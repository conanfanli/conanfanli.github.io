{"version":3,"sources":["webpack:///./reducers.ts","webpack:///./actions.ts","webpack:///./types/index.ts","webpack:///./TransactionChart.tsx","webpack:///./Root/Timeline/EventRow.tsx","webpack:///./Root/Timeline/utils.ts","webpack:///./Root/Timeline/index.tsx","webpack:///./TransactionList/NewPlaidForm.tsx","webpack:///./components/FileUploadButton.tsx","webpack:///./TransactionList/NewStatementForm.tsx","webpack:///./TransactionList/NewTransactionForm.tsx","webpack:///./Root/SearchBar.tsx","webpack:///./TransactionList/TransactionListAppBar.tsx","webpack:///./components/icons.tsx","webpack:///./components/CategoryField.tsx","webpack:///./TransactionList/TransactionRow.tsx","webpack:///./TransactionList/index.tsx","webpack:///./components/Tree.tsx","webpack:///./Root/CategoryListPage.tsx","webpack:///./history.ts","webpack:///./Root/contexts.ts","webpack:///./Root/index.tsx","webpack:///./common.tsx","webpack:///./LoginPage.tsx","webpack:///./utils.ts","webpack:///./__generated__/backendSchemas.ts","webpack:///./selectors.ts","webpack:///./components/SingleSelectField.tsx","webpack:///./configureStore.tsx","webpack:///./middleware.ts","webpack:///./main.tsx"],"names":["__webpack_require__","d","__webpack_exports__","initialState","redux_actions__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","_src_utils__WEBPACK_IMPORTED_MODULE_2__","redux__WEBPACK_IMPORTED_MODULE_3__","balance","events","categories","authToken","isAuthenticated","snacks","transactions","handlers","state","action","hasOwnProperty","type","createReducer","EAT_SNACK","slice","ADD_SNACK","concat","snack","createButlerReducer","partialState","sortBy","Object","response","updateType","filter","item","find","deleted","id","ret","Error","reducers","transaction","issued_date","e","Date","created_ts","getTime","BASE_URL","callButlerApi","window","location","protocol","hostname","port","BASE_API_URL","request","url","endpoint","jwt","fetch","method","body","JSON","stringify","jsonBody","headers","Content-Type","X-Requested-With","Authorization","UrlPathEnum","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_0__","highcharts_data__WEBPACK_IMPORTED_MODULE_3___default","react_highcharts__WEBPACK_IMPORTED_MODULE_8___default","a","Highcharts","highcharts_drilldown__WEBPACK_IMPORTED_MODULE_4___default","getChartConfig","_a","chart","title","text","xAxis","yAxis","min","align","labels","overflow","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","column","allowPointSelect","click","onClickColumn","legend","layout","verticalAlign","x","y","floating","borderWidth","shadow","credits","TransactionChartComponent","_super","props","_this","call","this","onChangeReportType","showReport","target","value","config","bind","reportTitle","report_type","initialReportType","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","console","log","getReportTitle","today","threeMonthAgo","setDate","getDate","apiName","butler","start_date","_src_utils__WEBPACK_IMPORTED_MODULE_6__","end_date","res","titled","updeep__WEBPACK_IMPORTED_MODULE_11___default","assign","chart_data","setState","react__WEBPACK_IMPORTED_MODULE_7__","componentDidMount","render","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","onChange","_material_ui_core__WEBPACK_IMPORTED_MODULE_2__","TransactionChart","react_redux__WEBPACK_IMPORTED_MODULE_9__","dispatch","redux__WEBPACK_IMPORTED_MODULE_10__","_src_types__WEBPACK_IMPORTED_MODULE_5__","EventRow","urlState","react","contexts","event","disabled","event_id","event_type","types","CHECKPOINT","CheckpointListItem","checkpoint","eventIcon","BATCH_IMPORT","plaid","wave","origin","STATEMENT_UPLOAD","getEventIcon","eventButtonIcon","getEventButtonIcon","ListItem","selected","button","onClick","ListTransactions","start","end","data","history_0","TransactionList","ListItemIcon","Tooltip","Icon","color","ListItemText","Typography","toLocaleDateString","signed_ts","signed_balance","batch_import","upload","source","first_date","last_date","getEventDescription","ListItemSecondaryAction","Button","description","style","ButtonGroup","variant","size","aria-label","SignCheckPoint","open","actions","Timeline","utils","selectors","ListEvents","List","map","index","key","toISOString","NewPlaidForm_NewPlaidFormComponent","NewPlaidFormComponent","apply","arguments","importTransactions","ImportFromPlaid","ImportFromWave","setStartDate","setEndDate","tslib_es6","Grid","container","xs","TextField","label","defaultValue","marginTop","NewPlaidForm","es","redux","backendSchemas","FileUploadButton_FileUploadButton","FileUploadButton","onFileInputChange","file","files","reader","FileReader","addEventListener","submitFileContent","result","readAsText","component","hidden","ref","fileInput","htmlFor","NewStatementForm_StatementFormContainer","StatementFormContainer","selectedSource","CHEQUE","onSelectType","content","length","UploadStatement","paddingTop","ExpansionPanel","expanded","ExpansionPanelSummary","spacing","sm","Select","c","MenuItem","Divider","ExpansionPanelActions","onClose","NewStatementForm","fieldConfig","required","merchant","notes","category_id","balance_adjust","total_amount","FieldInput","fieldName","updateField","instance","error","getInitialState","NewTransactionForm_NewTransactionFormContainer","NewTransactionFormContainer","createTransaction","CreateTransaction","old","newState","isValid","t","every","Boolean","selectableCategories","SingleSelectField","choices","cat","mui_icon_id","instancePropNameToUpdate","changes","NewTransactionForm","SearchBar_SearchBarComponent","SearchBarComponent","anchorEl","debounced","lodash","newValue","search_text","onFocus","currentTarget","handleClose","onSearch","icon","InputAdornment","position","Search","InputProps","startAdornment","Menu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","suggestions","sug","SearchBar","ownProps","TransactionListAppBar_TransactionListAppBarComponent","TransactionListAppBarComponent","showNewTransactionForm","showForm","showNewStatementForm","showPlaidImportForm","showWaveImportForm","toggleTimeline","AppBar","Toolbar","IconButton","History","flex","rice_instructor","Add","AttachMoney","CreditCard","Waves","GridOn","sessionStorage","removeItem","href","className","TransactionListAppBar","icons_PlaidIcon","PlaidIcon","float","CategoryField_SmartCatField","SmartCatField","prediction","onAccept","split","fontWeight","category_name","Check","declined","Close","CategoryField_CategoryField","CategoryField","onSelectCategory","UpdateTransaction","CategoryInfoField","category","parseFloat","toString","TransactionRow","onToggleExpansion","editable","fields","GetUserBalance","origin_payload","lib_default","shouldExpandNode","account_name","plaid_category","paddingLeft","ExpansionPanelDetails","helperText","textAlign","Fab","ArchiveTransaction","Delete","PAGE_SIZE","TransactionList_TransactionListContainer","TransactionListContainer","expandedTransactionId","shownForm","showTimeline","loadMoreTransactions","formType","closeForm","ListCategories","maxWidth","height","innerHeight","marginBottom","fullWidth","IdentedLineItemText","ident","itemProps","Tree_Tree","Tree","root","children","child","getLevel","node","level","Checkbox","flat","CategoryListPage_CategoryList","CategoryList","getCard","onSelectIcon","iconChoices","i","name","Card","display","CategoryListPage","CategoryTree","history","pushHistory","getPathName","history__WEBPACK_IMPORTED_MODULE_0__","pathname","searchString","keys","push","search","path","endsWith","UrlStateContext","ButlerContext","StateContext","react__WEBPACK_IMPORTED_MODULE_0__","_src_types__WEBPACK_IMPORTED_MODULE_1__","_src_reducers__WEBPACK_IMPORTED_MODULE_2__","RootComponent","react__WEBPACK_IMPORTED_MODULE_14__","_src_common__WEBPACK_IMPORTED_MODULE_8__","_contexts__WEBPACK_IMPORTED_MODULE_17__","Provider","Body","Root","react_redux__WEBPACK_IMPORTED_MODULE_16__","getItem","_src_selectors__WEBPACK_IMPORTED_MODULE_12__","redux__WEBPACK_IMPORTED_MODULE_6__","_src_types__WEBPACK_IMPORTED_MODULE_7__","PageList","UrlPathsMap","_src_TransactionList__WEBPACK_IMPORTED_MODULE_13__","_src_TransactionChart__WEBPACK_IMPORTED_MODULE_11__","_CategoryListPage__WEBPACK_IMPORTED_MODULE_5__","_src_history__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","primary","LoginPage","_src_LoginPage__WEBPACK_IMPORTED_MODULE_10__","warn","App","react_hot_loader__WEBPACK_IMPORTED_MODULE_15__","module","react_router__WEBPACK_IMPORTED_MODULE_4__","FlexContainer","newStyle","flexDirection","newProps","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","_material_ui_core__WEBPACK_IMPORTED_MODULE_0__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","_src_history__WEBPACK_IMPORTED_MODULE_3__","_src_types__WEBPACK_IMPORTED_MODULE_4__","_src_Root_contexts__WEBPACK_IMPORTED_MODULE_5__","username","setUsername","_b","password","setPassword","submitLogin","AuthenticateUser","setItem","alignItems","justifyContent","onKeyPress","charCode","formatDate","getIsoDateString","getToday","mergeArrays","connectButler","react_redux__WEBPACK_IMPORTED_MODULE_0__","redux__WEBPACK_IMPORTED_MODULE_1__","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_2__","month","day","timeZone","getFullYear","getMonth","existing","incoming","prependOrAppend","reduce","accumulator","findIndex","mapDispatchToProps","stateMapper","EnumRoute","EventType","EnumStatementSource","BUTLER_ACTIONS","successCallback","route","GetIncomeExpenseReport","GetExpenseReport","getSelectableCategories","getVisibleTransactions","parseUrlState","getAuthToken","_src_history__WEBPACK_IMPORTED_MODULE_0__","querystring__WEBPACK_IMPORTED_MODULE_1__","querystring__WEBPACK_IMPORTED_MODULE_1___default","n","is_selectable","params","parse","getInitialOption","lodash__WEBPACK_IMPORTED_MODULE_6___default","get","option","openDialog","closeDialog","onSelectOption","selectedOption","initialOption","marginRight","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","rice_instructor__WEBPACK_IMPORTED_MODULE_8__","undefined","placeholder","options","middleware","apiMiddleware","store","next","getState","then","ok","json","status","main_store","redux_thunk_es","react_dom","react_router","document","getElementById"],"mappings":"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","file":"app.js","sourcesContent":["import { handleAction } from 'redux-actions'\nimport { State } from '@src/types'\nimport * as _ from 'lodash'\nimport { mergeArrays } from '@src/utils'\nimport { combineReducers } from 'redux'\n\nexport const initialState: State = {\n  balance: '',\n  events: [],\n  categories: [],\n  authToken: null,\n  isAuthenticated: false,\n  snacks: [],\n  transactions: [],\n}\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n\nconst snacks = createReducer(initialState.snacks, {\n  EAT_SNACK: snacks => [...snacks.slice(1)],\n  ADD_SNACK: (snacks, action) => [...snacks, action.snack],\n})\n\nconst createButlerReducer = (partialState: keyof State, initialState, sortBy?: (a) => number) => {\n  return handleAction(\n    `BUTLER_ANSWERED`,\n    (state, action: any) => {\n      if (!action.response[partialState]) {\n        return state\n      }\n      if (action.updateType === 'replace') {\n        return action.response[partialState]\n      } else if (action.updateType === 'do-nothing') {\n        return state\n      } else if (action.updateType === 'remove') {\n        return [...state].filter(\n          item => !action.response[partialState].find(deleted => deleted.id === item.id),\n        )\n      } else if (action.updateType === 'merge-append') {\n        let ret = mergeArrays(state, action.response[partialState], 'append')\n        if (sortBy) {\n          return _.sortBy(ret, sortBy)\n        }\n        return ret\n      } else {\n        throw new Error('not handled')\n      }\n    },\n    initialState,\n  )\n}\n\nconst reducers = combineReducers({\n  snacks,\n  transactions: createButlerReducer('transactions', initialState.transactions, transaction => {\n    return -1 * transaction.issued_date\n  }),\n  authToken: createButlerReducer('authToken', initialState.authToken),\n  categories: createButlerReducer('categories', initialState.categories),\n  events: createButlerReducer('events', initialState.events, e => {\n    return -1 * new Date(e.created_ts).getTime()\n  }),\n  balance: createButlerReducer('balance', initialState.balance),\n})\n\nexport default reducers\n","export function addSnack(message: string) {\n  return {\n    type: 'ADD_SNACK',\n    snack: message,\n  }\n}\n\nexport function eatSnack() {\n  return {\n    type: 'EAT_SNACK',\n  }\n}\n\nexport const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${\n  window.location.port ? '8000' : ''\n}`\nexport const BASE_API_URL = `${BASE_URL}/api2`\n\nexport function callButlerApi(request: { endpoint: string; jsonBody: {}; authToken: string }) {\n  const url = `${BASE_API_URL}/${request.endpoint}/`\n  const jwt = request.authToken\n\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(request.jsonBody),\n    // credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n      Authorization: jwt ? `JWT ${jwt}` : '',\n    },\n  })\n}\n\nexport const ACTIONS = {\n  eatSnack,\n  addSnack,\n}\n","import { ACTIONS as actionCreators } from '@src/actions'\nimport {\n  ICheckPoint,\n  IStatement,\n  IImportBatch,\n  IUserTransaction,\n  ICategory,\n} from '@src/__generated__/backendSchemas'\nexport * from '@src/__generated__/backendSchemas'\n\nexport type IEvent = ICheckPoint | IStatement | IImportBatch\n\nexport interface State {\n  balance: string\n  events: Array<IEvent>\n  categories: Array<ICategory>\n  authToken: string | null\n  isAuthenticated: boolean\n  transactions: Array<IUserTransaction>\n  router?: any\n  snacks: Array<string>\n}\n\nexport type ActionType = typeof actionCreators\n\nexport enum UrlPathEnum {\n  Root = '/',\n  LoginPage = '/LoginPage',\n  TransactionList = '/TransactionList',\n  TransactionChart = '/TransactionChart',\n  CategoryListPage = '/CategoryListPage',\n}\n","import { MenuItem, Select } from '@material-ui/core'\n// import { parseUrlState } from '@src/selectors'\nimport HighchartsData from 'highcharts-data'\nimport HighchartsDrilldown from 'highcharts-drilldown'\nimport { BUTLER_ACTIONS } from '@src/types'\nimport { getIsoDateString } from '@src/utils'\nimport * as React from 'react'\nimport Highchart from 'react-highcharts'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport u from 'updeep'\n\nHighchartsData(Highchart.Highcharts)\nHighchartsDrilldown(Highchart.Highcharts)\n\ntype ReportType = 'INCOME_EXPENSE' | 'EXPENSE'\n\nconst getChartConfig = ({ onClickColumn }) => {\n  return {\n    chart: {\n      type: 'column',\n      //height: 800,\n      //width: 800\n    },\n    title: {\n      text: 'Income/Expense Report',\n    },\n    xAxis: {\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Spend',\n        align: 'high',\n      },\n      labels: {\n        overflow: 'justify',\n      },\n    },\n    tooltip: {\n      valueSuffix: ' dollars',\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true,\n        },\n      },\n      column: {\n        dataLabels: {\n          enabled: true,\n        },\n        allowPointSelect: false,\n        events: {\n          click: onClickColumn,\n        },\n      },\n    },\n    legend: {\n      enabled: true,\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      shadow: true,\n    },\n    credits: {\n      enabled: false,\n    },\n  }\n}\ninterface Prop {\n  butler: typeof BUTLER_ACTIONS\n  initialReportType: string\n}\n\ninterface State {\n  config: any\n  reportTitle: string\n  chart: any\n  report_type: ReportType\n}\n\nclass TransactionChartComponent extends React.Component<Prop, State> {\n  constructor(props) {\n    super(props)\n    const config = getChartConfig({\n      onClickColumn: this.onClickColumn.bind(this),\n    })\n    this.state = {\n      config,\n      chart: null,\n      reportTitle: '',\n      report_type: props.initialReportType,\n    }\n  }\n\n  onClickColumn(e) {\n    if (this.state.report_type === 'INCOME_EXPENSE') {\n      return console.log(e)\n    }\n  }\n\n  getReportTitle(value) {\n    return value == 'INCOME_EXPENSE' ? 'Income/Expense Report' : 'Expense Report'\n  }\n\n  onChangeReportType = e => {\n    this.showReport(e.target.value)\n  }\n\n  showReport(report_type: ReportType) {\n    const today = new Date()\n    let threeMonthAgo = new Date()\n    threeMonthAgo.setDate(threeMonthAgo.getDate() - 180)\n    const apiName = report_type === 'INCOME_EXPENSE' ? 'GetIncomeExpenseReport' : 'GetExpenseReport'\n    this.props.butler[apiName](\n      { start_date: getIsoDateString(threeMonthAgo), end_date: getIsoDateString(today) },\n      'do-nothing',\n      res => {\n        const titled = u(\n          {\n            title: {\n              text: this.getReportTitle(report_type),\n            },\n          },\n          this.state.config,\n        )\n        const config = Object.assign({}, titled, res.chart_data)\n        this.setState({ chart: <Highchart config={config} /> })\n        this.setState({ report_type, config })\n      },\n    )\n  }\n\n  componentDidMount() {\n    this.showReport(this.state.report_type)\n  }\n\n  render() {\n    if (!this.state.config) {\n      return <p>Loading ...</p>\n    }\n    return (\n      <div>\n        <Select value={this.state.report_type} onChange={this.onChangeReportType}>\n          <MenuItem value={'INCOME_EXPENSE'}>Income/Expense</MenuItem>\n          <MenuItem value={'EXPENSE'}>Expense</MenuItem>\n        </Select>\n        <p>{this.state.reportTitle}</p>\n        {this.state.chart}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const TransactionChart = connect(\n  null,\n  mapDispatchToProps,\n)(TransactionChartComponent)\n","import * as React from 'react'\nimport {\n  ListItemSecondaryAction,\n  ButtonGroup,\n  Button,\n  Tooltip,\n  Icon,\n  ListItemIcon,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core'\nimport { BASE_URL } from '@src/actions'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { EventType, ICheckPoint, IEvent, UrlPathEnum } from '@src/types'\nimport { pushHistory } from '@src/history'\nimport { getEventButtonIcon, getEventIcon, getEventDescription } from './utils'\nimport { UrlStateContext } from '@src/Root/contexts'\n\nexport const EventRow = (props: { authToken: string; event: IEvent }) => {\n  const urlState = React.useContext(UrlStateContext)\n  const butler = React.useContext(ButlerContext)\n\n  const { event } = props\n  const disabled = urlState.event_id === `${event.event_type}-${event.id}`\n  if (event.event_type === EventType.CHECKPOINT) {\n    return (\n      <CheckpointListItem\n        authToken={props.authToken}\n        disabled={disabled}\n        checkpoint={event as ICheckPoint}\n      />\n    )\n  }\n  const eventIcon = getEventIcon(event)\n  const onFilter = e => {\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${event.event_type}-${event.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${event.event_type}-${event.id}`,\n        }),\n    )\n  }\n  const eventButtonIcon = getEventButtonIcon(event)\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={event.event_type}>\n          <Icon color=\"primary\">{eventIcon}</Icon>\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(event.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{getEventDescription(event)}</Typography>\n      </ListItemText>\n      {eventButtonIcon ? (\n        <ListItemSecondaryAction>\n          <Button>\n            <Icon>{eventButtonIcon}</Icon>\n          </Button>\n        </ListItemSecondaryAction>\n      ) : null}\n    </ListItem>\n  )\n}\n\nexport const CheckpointListItem: React.FC<{\n  authToken: string\n  disabled: boolean\n  checkpoint: ICheckPoint\n}> = ({ authToken, checkpoint, disabled }) => {\n  const butler = React.useContext(ButlerContext)\n  const onFilter = e => {\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${checkpoint.event_type}-${checkpoint.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${checkpoint.event_type}-${checkpoint.id}`,\n        }),\n    )\n  }\n  const description = checkpoint.signed_ts\n    ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n        checkpoint.signed_ts,\n      ).toLocaleDateString()}`\n    : 'Not Signed'\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={checkpoint.event_type}>\n          {checkpoint.signed_ts ? (\n            <Icon color=\"primary\">toll</Icon>\n          ) : (\n            <Icon style={{ color: 'green' }}>fiber_new</Icon>\n          )}\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(checkpoint.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{description}</Typography>\n      </ListItemText>\n      <ListItemSecondaryAction>\n        <ButtonGroup\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          aria-label=\"Small outlined button group\"\n        >\n          {checkpoint.signed_ts ? null : (\n            <Button\n              size=\"small\"\n              color=\"secondary\"\n              onClick={() => butler.SignCheckPoint({ id: checkpoint.id }, 'merge-append')}\n            >\n              <Icon>plus_one</Icon>\n            </Button>\n          )}\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            disabled={!authToken}\n            onClick={() => {\n              window.open(`${BASE_URL}/export-checkpoint/${authToken}/${checkpoint.id}/`, '_blank')\n            }}\n          >\n            <Icon>cloud_download</Icon>\n          </Button>\n        </ButtonGroup>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n","import { ICheckPoint, EventType, IStatement, IImportBatch, IEvent } from '@src/types'\n\nexport const getEventDescription = (e: IEvent) => {\n  if (e.event_type === EventType.CHECKPOINT) {\n    const checkpoint = e as ICheckPoint\n    return checkpoint.signed_ts\n      ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n          checkpoint.signed_ts,\n        ).toLocaleDateString()}`\n      : 'Not Signed'\n  }\n  if (e.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = e as IImportBatch\n    return `${batch_import.origin}: ${batch_import.start_date} TO ${batch_import.end_date}`\n  }\n  if (e.event_type === EventType.STATEMENT_UPLOAD) {\n    const upload = e as IStatement\n    return `${upload.source}: ${upload.first_date} TO ${upload.last_date}`\n  }\n  throw new Error('not possible')\n}\nexport const getEventIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'toll'\n  }\n  if (event.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = event as IImportBatch\n    return { plaid: 'grid_on', wave: 'waves' }[batch_import.origin]\n  }\n  if (event.event_type === EventType.STATEMENT_UPLOAD) {\n    // const upload = memory as IStatement\n    return 'cloud_upload'\n  }\n  throw new Error('not possible')\n}\n\nexport const getEventButtonIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'plus_one'\n  }\n  return null\n}\n","import { List } from '@material-ui/core'\nimport * as React from 'react'\nimport { EventRow } from './EventRow'\nimport { connectButler } from '@src/utils'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { IEvent } from '@src/types'\nimport { getAuthToken } from '@src/selectors'\n\nconst TimelineComponent = (props: { events: Array<IEvent>; authToken: string }) => {\n  const butler = React.useContext(ButlerContext)\n  React.useEffect(() => {\n    butler.ListEvents({}, 'replace')\n  }, [])\n  return (\n    <div>\n      <List>\n        {props.events.map((e, index) => {\n          return <EventRow authToken={props.authToken} event={e} key={index} />\n        })}\n      </List>\n    </div>\n  )\n}\nexport const Timeline = connectButler(state => {\n  return {\n    events: state.events,\n    authToken: getAuthToken(state),\n  }\n})(TimelineComponent)\n","import { Button, Grid, TextField } from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ninterface OwnProps {\n  origin: 'plaid' | 'wave'\n}\n\ntype FinalProps = OwnProps & DispatchProps\nconst today = new Date().toISOString().slice(0, 10)\n\nexport class NewPlaidFormComponent extends React.Component<\n  FinalProps,\n  { start_date: string; end_date: string }\n> {\n  state = { start_date: today, end_date: today }\n\n  importTransactions = () => {\n    if (this.props.origin === 'plaid') {\n      this.props.butler.ImportFromPlaid(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    } else {\n      this.props.butler.ImportFromWave(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  setStartDate = e => {\n    this.setState({ start_date: e.target.value })\n  }\n  setEndDate = e => {\n    this.setState({ end_date: e.target.value })\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item xs={4}>\n          <TextField\n            type=\"date\"\n            label=\"from\"\n            value={this.state.start_date}\n            onChange={this.setStartDate}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField type=\"date\" label=\"to\" defaultValue={today} onChange={this.setEndDate} />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            onClick={this.importTransactions}\n            style={{ marginTop: '10px' }}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Import\n          </Button>\n        </Grid>\n      </Grid>\n    )\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewPlaidForm = connect<{}, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(NewPlaidFormComponent)\n","import { Button } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface Prop {\n  submitFileContent: (content: string | ArrayBuffer | null) => void\n  button?: React.ReactElement<any>\n}\nexport class FileUploadButton extends React.Component<Prop, any> {\n  fileInput: any\n\n  onFileInputChange = event => {\n    const file = event.target.files[0]\n    var reader = new FileReader()\n\n    const callback = () => this.props.submitFileContent(reader.result)\n    reader.addEventListener('load', callback, false)\n    if (file) {\n      reader.readAsText(file)\n    }\n  }\n\n  render() {\n    const button = this.props.button || (\n      <Button variant=\"outlined\" component=\"span\">\n        Upload\n      </Button>\n    )\n    return (\n      <div>\n        <input\n          id=\"file-upload-form\"\n          hidden\n          ref={ref => (this.fileInput = ref)}\n          onChange={this.onFileInputChange}\n          type=\"file\"\n        />\n        <label htmlFor=\"file-upload-form\">{button}</label>\n      </div>\n    )\n  }\n}\n","import { Select } from '@material-ui/core'\nimport {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  MenuItem,\n} from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { FileUploadButton } from '../components/FileUploadButton'\nimport { BUTLER_ACTIONS, EnumStatementSource } from '@src/__generated__/backendSchemas'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = OwnProps & DispatchProps\n\ninterface State {\n  selectedSource: EnumStatementSource\n}\n\nexport class StatementFormContainer extends React.Component<Prop, State> {\n  state = {\n    selectedSource: EnumStatementSource.CHEQUE,\n  }\n\n  onSelectType = event => {\n    this.setState({ selectedSource: event.target.value })\n  }\n\n  submitFileContent = (content: string) => {\n    console.log(content)\n    if (this.state.selectedSource.length && content) {\n      this.props.butler.UploadStatement(\n        {\n          source: this.state.selectedSource,\n          content: content,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  render() {\n    const choices = ['CHEQUE', 'PC_MASTER', 'SCOTIA_MASTER', 'VISA']\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <Select value={this.state.selectedSource} onChange={this.onSelectType}>\n                  {choices.map(c => {\n                    return (\n                      <MenuItem key={c} value={c}>\n                        {c}\n                      </MenuItem>\n                    )\n                  })}\n                </Select>\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FileUploadButton submitFileContent={this.submitFileContent} />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewStatementForm = connect<OwnProps, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(StatementFormContainer)\n","import {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  TextField,\n} from '@material-ui/core'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { BUTLER_ACTIONS, CreateTransaction__Request } from '@src/types'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport { getToday } from '@src/utils'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getSelectableCategories } from '../selectors'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface PropsFromStore {\n  selectableCategories: Array<ICategory>\n}\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Prop = OwnProps & PropsFromStore & DispatchProps\n\ninterface State {\n  transaction: CreateTransaction__Request\n}\n\ntype FieldName =\n  | 'issued_date'\n  | 'merchant'\n  | 'notes'\n  | 'category_id'\n  | 'total_amount'\n  | 'balance_adjust'\n\nconst fieldConfig = {\n  issued_date: { type: 'date', required: true },\n  merchant: { type: 'text', required: true },\n  notes: { type: 'text', required: false },\n  category_id: { type: 'number', required: false },\n  balance_adjust: { type: 'number', required: false },\n  total_amount: { type: 'number', required: true },\n}\n\nconst FieldInput = (props: {\n  fieldName: FieldName\n  updateField: (fieldName) => (event) => void\n  instance: CreateTransaction__Request\n}) => {\n  const { fieldName, updateField, instance } = props\n  const config = fieldConfig[fieldName]\n  let error = false\n  if (config.required && !instance[fieldName]) {\n    error = true\n  } else if (config.required && config.type === 'number' && !instance[fieldName]) {\n    error = true\n  }\n\n  return (\n    <TextField\n      type={config.type}\n      required={config.required}\n      error={error}\n      label={fieldName}\n      value={instance[fieldName]}\n      onChange={updateField(fieldName)}\n    />\n  )\n}\nconst getInitialState = () => {\n  return {\n    transaction: {\n      issued_date: getToday(),\n      merchant: '',\n      notes: '',\n      category_id: 47,\n      total_amount: '0',\n      balance_adjust: '0',\n    },\n  }\n}\n\nclass NewTransactionFormContainer extends React.Component<Prop, State> {\n  state = getInitialState()\n\n  createTransaction = () => {\n    this.props.butler.CreateTransaction(this.state.transaction, 'merge-append', data => {\n      this.props.onClose()\n    })\n  }\n  updateField = (fieldName: FieldName) => {\n    const old = this.state.transaction\n    return event => {\n      const newState = Object.assign({}, old, {\n        [fieldName]: event.target.value,\n      })\n      this.setState({ transaction: newState })\n    }\n  }\n  isValid() {\n    const t = this.state.transaction\n    return [t.issued_date, t.merchant, +t.total_amount].every(Boolean)\n  }\n  render() {\n    const { selectableCategories } = this.props\n    const transaction = this.state.transaction\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  instance={transaction}\n                  fieldName=\"issued_date\"\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"merchant\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"total_amount\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <SingleSelectField\n                  instance={transaction}\n                  choices={selectableCategories.map(cat => {\n                    return {\n                      value: cat.id,\n                      label: cat.description,\n                      mui_icon_id: cat.mui_icon_id,\n                    }\n                  })}\n                  instancePropNameToUpdate=\"category_id\"\n                  onChange={(instance, changes) => {\n                    const newState = Object.assign({}, this.state.transaction, changes)\n                    this.setState({ transaction: newState })\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"notes\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"balance_adjust\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.setState(getInitialState())\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              size=\"small\"\n              color=\"primary\"\n              onClick={this.createTransaction}\n              disabled={!this.isValid()}\n            >\n              Save\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    balance: state.balance,\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewTransactionForm = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NewTransactionFormContainer)\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\n\nimport { InputAdornment, Menu, MenuItem, TextField } from '@material-ui/core'\nimport { BUTLER_ACTIONS } from '@src/types'\nimport { Search } from '@material-ui/icons'\nimport { State } from '@src/types'\n\ninterface PropsFromStore {\n  suggestions: Array<any>\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Props = PropsFromStore & DispatchProps\n\nclass SearchBarComponent extends React.Component<Props, { anchorEl: JSX.Element | null }> {\n  state = { anchorEl: null }\n\n  debounced = _.debounce(\n    newValue =>\n      this.props.butler.ListTransactions({ search_text: newValue }, 'replace', data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          search_text: newValue,\n        }),\n      ),\n    500,\n  )\n\n  onFocus = event => {\n    this.setState({ anchorEl: event.currentTarget })\n  }\n  handleClose = event => {\n    this.setState({ anchorEl: null })\n  }\n  onSearch = event => {\n    this.debounced(event.target.value)\n  }\n  render() {\n    const icon = (\n      <InputAdornment position=\"start\">\n        <Search />\n      </InputAdornment>\n    )\n    return (\n      <div>\n        <TextField\n          onChange={this.onSearch}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">{icon}</InputAdornment>,\n          }}\n        />\n        <Menu\n          open={!!this.state.anchorEl}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n          getContentAnchorEl={null}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n        >\n          {this.props.suggestions.map((sug, index) => (\n            <MenuItem\n              key={index}\n              onClick={() => {\n                this.props.butler.ListTransactions({}, 'replace')\n              }}\n            >\n              {sug.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps): PropsFromStore => {\n  return { suggestions: [] }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const SearchBar = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchBarComponent)\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Add, AttachMoney, CreditCard, GridOn, History, Waves } from '@material-ui/icons'\nimport { SearchBar } from '@src/Root/SearchBar'\nimport { State as AppState } from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { IconMenu } from 'rice-instructor'\n\ninterface OwnProps {\n  showForm: (formType: string) => void\n  toggleTimeline: () => void\n}\n\ninterface StateProps {\n  balance: string | null\n}\ninterface DispatchProps {}\n\ntype FinalProps = OwnProps & StateProps & DispatchProps\n\nclass TransactionListAppBarComponent extends React.Component<FinalProps> {\n  showNewTransactionForm = () => {\n    this.props.showForm('transaction')\n  }\n\n  showNewStatementForm = () => {\n    this.props.showForm('statement')\n  }\n\n  showPlaidImportForm = () => {\n    this.props.showForm('plaid')\n  }\n  showWaveImportForm = () => {\n    this.props.showForm('wave')\n  }\n\n  toggleTimeline = () => {\n    this.props.toggleTimeline()\n  }\n\n  render() {\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Tooltip title=\"Timeline\">\n            <IconButton onClick={this.toggleTimeline}>\n              <History />\n            </IconButton>\n          </Tooltip>\n          {this.props.balance ? (\n            <Typography\n              variant=\"body1\"\n              key=\"balance\"\n            >{`Balance: $${this.props.balance}`}</Typography>\n          ) : null}\n          <div style={{ flex: 1 }} />\n          <SearchBar />\n          <IconMenu icon={<Add />}>\n            <MenuItem key=\"new-transaction-menu\" onClick={this.showNewTransactionForm}>\n              <ListItemIcon>\n                <AttachMoney />\n              </ListItemIcon>\n              <ListItemText>Transaction</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-statement-menu\" onClick={this.showNewStatementForm}>\n              <ListItemIcon>\n                <CreditCard />\n              </ListItemIcon>\n              <ListItemText>Statement</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-wave-menu\" onClick={this.showWaveImportForm}>\n              <ListItemIcon>\n                <Waves color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText>Wave Import</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-plaid-menu\" onClick={this.showPlaidImportForm}>\n              <ListItemIcon>\n                <GridOn color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText>Plaid Import</ListItemText>\n            </MenuItem>\n          </IconMenu>\n          <IconButton\n            onClick={() => {\n              sessionStorage.removeItem('authToken')\n              window.location.href = '/'\n            }}\n          >\n            <Icon className=\"material-icons\">exit_to_app</Icon>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    )\n  }\n}\nconst mapStateToProps = (state: AppState, ownProps) => {\n  return {\n    balance: state.balance,\n  }\n}\nexport const TransactionListAppBar = connect<StateProps, {}>(\n  mapStateToProps,\n  () => ({}),\n)(TransactionListAppBarComponent)\n","import * as React from 'react'\nimport { Icon } from '@material-ui/core'\n\nexport class PlaidIcon extends React.Component<{}> {\n  render() {\n    return (\n      <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n        grid_on\n      </Icon>\n    )\n  }\n}\n","import * as React from 'react'\n\nimport { Grid, IconButton } from '@material-ui/core'\nimport { Check, Close } from '@material-ui/icons'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport { IPrediction, CreateTransaction__Request } from '../types/index'\nimport { BUTLER_ACTIONS, IUserTransaction } from '@src/__generated__/backendSchemas'\n\ninterface CategoryFieldProp {\n  transaction: IUserTransaction | CreateTransaction__Request\n  butler: typeof BUTLER_ACTIONS\n  selectableCategories: Array<ICategory>\n}\n\ninterface SmartCatProp {\n  prediction: IPrediction\n  onAccept: () => void\n}\nexport class SmartCatField extends React.Component<SmartCatProp, any> {\n  render() {\n    const { prediction, onAccept } = this.props\n    const split = prediction.split ? 'Split ' : ''\n    return (\n      <div style={{ color: 'rgb(0, 188, 212)', fontWeight: 'bold' }}>\n        {`${split}${prediction.category_name}?`}\n        <Grid container>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => onAccept()}>\n              <Check color=\"primary\" />\n            </IconButton>\n          </Grid>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => this.setState({ declined: true })}>\n              <Close color=\"secondary\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport class CategoryField extends React.Component<CategoryFieldProp, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      declined: false,\n    }\n  }\n\n  onSelectCategory(transaction, changes) {\n    return this.props.butler.UpdateTransaction(\n      {\n        id: transaction.id,\n        category_id: changes.category_id,\n      },\n      'merge-append',\n    )\n  }\n\n  render() {\n    const { selectableCategories, transaction } = this.props\n    return (\n      <SingleSelectField\n        instance={transaction}\n        choices={selectableCategories.map(cat => {\n          return {\n            value: cat.id,\n            mui_icon_id: cat.mui_icon_id,\n            label: cat.description,\n          }\n        })}\n        instancePropNameToUpdate=\"category_id\"\n        onChange={this.onSelectCategory.bind(this)}\n      />\n    )\n  }\n}\n","import { PlaidIcon } from '@src/components/icons'\nimport {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Fab,\n  Grid,\n  Icon,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport JSONTree from 'react-json-tree'\n\nimport { ButlerContext, StateContext } from '@src/Root/contexts'\nimport { CategoryField, SmartCatField } from '@src/components/CategoryField'\nimport { ICategory, IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { formatDate } from '@src/utils'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { getSelectableCategories } from '../selectors'\n\ninterface OwnProps {\n  transaction: IUserTransaction\n  expanded: boolean\n  onToggleExpansion: (event, expanded) => void\n}\n\nexport const CategoryInfoField = (props: {\n  transaction: IUserTransaction\n  category: ICategory | null\n  onAccept: (arg: { id: number; category_id: number; balance_adjust: string }) => void\n}) => {\n  const { transaction, category, onAccept } = props\n  const prediction = transaction.prediction\n  if (prediction) {\n    return (\n      <SmartCatField\n        prediction={prediction}\n        onAccept={() =>\n          onAccept({\n            id: transaction.id,\n            category_id: prediction.category_id,\n            balance_adjust: prediction.split\n              ? (parseFloat(transaction.total_amount) / 2).toString()\n              : '0',\n          })\n        }\n      />\n    )\n  }\n  return (\n    <Grid container spacing={10}>\n      <Grid item xs={1}>\n        <Icon className=\"material-icons\">{category ? category.mui_icon_id : null}</Icon>\n      </Grid>\n      <Grid item xs>\n        {category ? <Typography color=\"textSecondary\">{category.description}</Typography> : null}\n      </Grid>\n    </Grid>\n  )\n}\n/*\n\nclass TransactionRowContainer extends React.Component<Prop, any> {\n  getCategory() {\n    const { transaction, selectableCategories } = this.props\n    if (!transaction.category_id) return null\n    return selectableCategories.find(c => c.id === transaction.category_id) || null\n  }\n  shouldComponentUpdate(nextProps) {\n    const result = !(\n      _.isEqual(nextProps.transaction, this.props.transaction) &&\n      nextProps.expanded === this.props.expanded\n    )\n    return result\n  }\n  onAcceptSmartCat = (fields: { id: number; category_id: number; balance_adjust: string }) => {\n    this.props.butler.UpdateTransaction({ ...fields }, 'merge-append', () =>\n      fields.balance_adjust ? this.props.butler.GetUserBalance({}, 'replace') : null,\n    )\n  }\n  render() {\n    const { transaction, selectableCategories, expanded, onToggleExpansion, butler } = this.props\n    const category = this.getCategory()\n    return (\n      <div>\n        <ExpansionPanel\n          disabled={!transaction.editable}\n          expanded={expanded}\n          onChange={onToggleExpansion}\n        >\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={3} sm={4}>\n                <Typography>{formatDate(transaction.issued_date)}</Typography>\n                {expanded ? null : (\n                  <CategoryInfoField\n                    transaction={transaction}\n                    category={category}\n                    onAccept={this.onAcceptSmartCat}\n                  />\n                )}\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                {transaction.origin_payload ? (\n                  <Tooltip\n                    title={\n                      <JSONTree shouldExpandNode={() => true} data={transaction.origin_payload} />\n                    }\n                  >\n                    {transaction.origin_payload['anchor_account_name'] ? (\n                      <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n                        waves\n                      </Icon>\n                    ) : (\n                      <PlaidIcon />\n                    )}\n                  </Tooltip>\n                ) : null}\n                <Typography variant=\"body1\">{transaction.merchant}</Typography>\n                <div>\n                  <Typography color=\"textSecondary\">{transaction.account_name}</Typography>\n                  <Typography color=\"textSecondary\">{transaction.plaid_category}</Typography>\n                  <Typography color=\"textSecondary\">{transaction.notes}</Typography>\n                </div>\n              </Grid>\n              <Grid item xs={3} sm={4} style={{ paddingLeft: '40px' }}>\n                <Typography>{`$${transaction.total_amount}`}</Typography>\n                {+transaction.balance_adjust && !expanded ? (\n                  <Typography\n                    style={{\n                      color: +transaction.balance_adjust > 0 ? 'green' : 'red',\n                    }}\n                  >\n                    {`$${transaction.balance_adjust}`}\n                  </Typography>\n                ) : null}\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <TextField\n                  defaultValue={transaction.notes}\n                  helperText=\"notes\"\n                  onChange={event =>\n                    butler.UpdateTransaction(\n                      { id: transaction.id, notes: event.target.value },\n                      'merge-append',\n                    )\n                  }\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <CategoryField\n                  {...{\n                    transaction,\n                    selectableCategories,\n                    butler,\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6} sm={3}>\n                <TextField\n                  helperText=\"Balance Adjust\"\n                  type=\"number\"\n                  defaultValue={transaction.balance_adjust}\n                  onChange={event =>\n                    butler.UpdateTransaction(\n                      {\n                        id: transaction.id,\n                        balance_adjust: event.target.value,\n                      },\n                      'merge-append',\n                      () => this.props.butler.GetUserBalance({}, 'replace'),\n                    )\n                  }\n                />\n              </Grid>\n              <Grid item xs={6} sm={1} style={{ textAlign: 'right' }}>\n                <Fab\n                  size=\"medium\"\n                  color=\"secondary\"\n                  aria-label=\"Delete\"\n                  onClick={() =>\n                    this.props.butler.ArchiveTransaction(\n                      {\n                        id: transaction.id,\n                      },\n                      'remove',\n                    )\n                  }\n                >\n                  <Delete />\n                </Fab>\n              </Grid>\n            </Grid>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    balance: state.balance,\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const TransactionRows = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TransactionRowContainer)\n  */\n\nexport const TransactionRow: React.FC<OwnProps> = props => {\n  const { transaction, expanded, onToggleExpansion } = props\n  const state = React.useContext(StateContext)\n  const selectableCategories = getSelectableCategories(state)\n  const butler = React.useContext(ButlerContext)\n\n  const onAcceptSmartCat = (fields: {\n    id: number\n    category_id: number\n    balance_adjust: string\n  }) => {\n    butler.UpdateTransaction({ ...fields }, 'merge-append', () =>\n      fields.balance_adjust ? butler.GetUserBalance({}, 'replace') : null,\n    )\n  }\n  const getCategory = () => {\n    if (!transaction.category_id) return null\n    return selectableCategories.find(c => c.id === transaction.category_id) || null\n  }\n  return (\n    <div>\n      <ExpansionPanel\n        disabled={!transaction.editable}\n        expanded={expanded}\n        onChange={onToggleExpansion}\n      >\n        <ExpansionPanelSummary>\n          <Grid container spacing={10}>\n            <Grid item xs={3} sm={4}>\n              <Typography>{formatDate(transaction.issued_date)}</Typography>\n              {expanded ? null : (\n                <CategoryInfoField\n                  transaction={transaction}\n                  category={getCategory()}\n                  onAccept={onAcceptSmartCat}\n                />\n              )}\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              {transaction.origin_payload ? (\n                <Tooltip\n                  title={\n                    <JSONTree shouldExpandNode={() => true} data={transaction.origin_payload} />\n                  }\n                >\n                  {transaction.origin_payload['anchor_account_name'] ? (\n                    <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n                      waves\n                    </Icon>\n                  ) : (\n                    <PlaidIcon />\n                  )}\n                </Tooltip>\n              ) : null}\n              <Typography variant=\"body1\">{transaction.merchant}</Typography>\n              <div>\n                <Typography color=\"textSecondary\">{transaction.account_name}</Typography>\n                <Typography color=\"textSecondary\">{transaction.plaid_category}</Typography>\n                <Typography color=\"textSecondary\">{transaction.notes}</Typography>\n              </div>\n            </Grid>\n            <Grid item xs={3} sm={4} style={{ paddingLeft: '40px' }}>\n              <Typography>{`$${transaction.total_amount}`}</Typography>\n              {+transaction.balance_adjust && !expanded ? (\n                <Typography\n                  style={{\n                    color: +transaction.balance_adjust > 0 ? 'green' : 'red',\n                  }}\n                >\n                  {`$${transaction.balance_adjust}`}\n                </Typography>\n              ) : null}\n            </Grid>\n          </Grid>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={10}>\n            <Grid item xs={6} sm={4}>\n              <TextField\n                defaultValue={transaction.notes}\n                helperText=\"notes\"\n                onChange={event =>\n                  butler.UpdateTransaction(\n                    { id: transaction.id, notes: event.target.value },\n                    'merge-append',\n                  )\n                }\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <CategoryField\n                {...{\n                  transaction,\n                  selectableCategories,\n                  butler,\n                }}\n              />\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <TextField\n                helperText=\"Balance Adjust\"\n                type=\"number\"\n                defaultValue={transaction.balance_adjust}\n                onChange={event =>\n                  butler.UpdateTransaction(\n                    {\n                      id: transaction.id,\n                      balance_adjust: event.target.value,\n                    },\n                    'merge-append',\n                    () => butler.GetUserBalance({}, 'replace'),\n                  )\n                }\n              />\n            </Grid>\n            <Grid item xs={6} sm={1} style={{ textAlign: 'right' }}>\n              <Fab\n                size=\"medium\"\n                color=\"secondary\"\n                aria-label=\"Delete\"\n                onClick={() =>\n                  butler.ArchiveTransaction(\n                    {\n                      id: transaction.id,\n                    },\n                    'remove',\n                  )\n                }\n              >\n                <Delete />\n              </Fab>\n            </Grid>\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </div>\n  )\n}\n","import { Button, Grid } from '@material-ui/core'\nimport { State as AppState } from '@src/types'\nimport * as React from 'react'\nimport { getSelectableCategories, getVisibleTransactions } from '../selectors'\nimport { ButlerProps, connectButler } from '@src/utils'\n\nimport { Timeline } from '@src/Root/Timeline'\nimport { NewPlaidForm } from './NewPlaidForm'\nimport { NewStatementForm } from './NewStatementForm'\nimport { IUserTransaction, ICategory } from '@src/__generated__/backendSchemas'\nimport { NewTransactionForm } from './NewTransactionForm'\nimport { TransactionListAppBar } from './TransactionListAppBar'\nimport { TransactionRow } from './TransactionRow'\n\ninterface OwnProps {}\ninterface PropsFromStore {\n  transactions: Array<IUserTransaction>\n  selectableCategories: Array<ICategory>\n}\nconst PAGE_SIZE = 40\n\ntype Prop = OwnProps & ButlerProps & PropsFromStore\n\ntype FormType = 'transaction' | 'plaid' | 'statement' | 'wave'\n\ninterface State {\n  expandedTransactionId: number | null\n  shownForm: FormType | null\n  showTimeline: boolean\n}\n\nclass TransactionListContainer extends React.Component<Prop, State> {\n  state: State = {\n    expandedTransactionId: null,\n    shownForm: null,\n    showTimeline: true,\n  }\n\n  toggleTimeline = () => this.setState({ showTimeline: !this.state.showTimeline })\n  loadMoreTransactions = () => {\n    const start = this.props.transactions.length\n    const end = start + PAGE_SIZE\n    this.props.butler.ListTransactions({ start, end }, 'merge-append')\n  }\n  showForm = (formType: FormType) => {\n    this.setState({ shownForm: formType })\n  }\n\n  componentDidMount() {\n    if (!this.props.selectableCategories.length) {\n      this.props.butler.ListCategories({}, 'replace')\n    }\n    this.props.butler.GetUserBalance({}, 'replace')\n    this.loadMoreTransactions()\n  }\n  onToggleExpansion(id: number) {\n    if (id === this.state.expandedTransactionId) {\n      this.setState({ expandedTransactionId: null })\n    } else {\n      this.setState({ expandedTransactionId: id })\n    }\n  }\n  closeForm = () => this.setState({ shownForm: null })\n\n  render() {\n    const { selectableCategories } = this.props\n    const { showTimeline } = this.state\n    if (!selectableCategories || !selectableCategories.length) {\n      return null\n    }\n    return (\n      <div style={{ maxWidth: '100%' }}>\n        <TransactionListAppBar toggleTimeline={this.toggleTimeline} showForm={this.showForm} />\n        <div\n          style={{\n            height: window.innerHeight - 70,\n            overflow: 'scroll',\n          }}\n        >\n          <Grid container>\n            {showTimeline ? (\n              <Grid item sm={3}>\n                <Timeline />\n              </Grid>\n            ) : null}\n            <Grid item sm={showTimeline ? 9 : 12}>\n              <div style={{ marginBottom: '20px' }}>\n                {this.state.shownForm === 'transaction' ? (\n                  <NewTransactionForm onClose={this.closeForm} />\n                ) : null}\n                {this.state.shownForm === 'statement' ? (\n                  <NewStatementForm onClose={this.closeForm} />\n                ) : null}\n                {this.state.shownForm === 'plaid' ? <NewPlaidForm origin=\"plaid\" /> : null}\n                {this.state.shownForm === 'wave' ? <NewPlaidForm origin=\"wave\" /> : null}\n              </div>\n              {this.props.transactions.map(t => (\n                <TransactionRow\n                  expanded={this.state.expandedTransactionId === t.id}\n                  key={t.id}\n                  transaction={t}\n                  onToggleExpansion={(event, expanded) => this.onToggleExpansion(t.id)}\n                />\n              ))}\n              <Button fullWidth size=\"large\" color=\"secondary\" onClick={this.loadMoreTransactions}>\n                ({this.props.transactions.length}) Click to Load More ...\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppState): PropsFromStore => {\n  return {\n    transactions: getVisibleTransactions(state),\n    selectableCategories: getSelectableCategories(state),\n  }\n}\n\nexport const TransactionList = connectButler(mapStateToProps)(TransactionListContainer)\n","import * as React from 'react'\n\nimport { Checkbox } from '@material-ui/core'\nimport { List, ListItem, ListItemText } from '@material-ui/core'\nimport { ITreeNode } from '@src/types'\n\ninterface TreeProps {\n  root: ITreeNode\n}\nconst IdentedLineItemText: React.SFC<{ ident: number }> = props => {\n  const { ident, ...itemProps } = props\n  if (ident) {\n    return <ListItemText {...itemProps} style={{ paddingLeft: `${56 * ident}px` }} />\n  }\n  return <ListItemText {...itemProps} />\n}\n\nfunction getLevel(node: ITreeNode, level: number) {\n  return [\n    <ListItem key={node.id}>\n      <IdentedLineItemText ident={level}>\n        <Checkbox />\n        {node.id}\n      </IdentedLineItemText>\n    </ListItem>,\n    ...node.children.map(child => getLevel(child, level + 1)),\n  ]\n}\nexport class Tree extends React.Component<TreeProps> {\n  render() {\n    return (\n      <List>{(this.props.root.children.map(child => getLevel(child, 0)) as any).flat(1000)}</List>\n    )\n  }\n}\n","import { Card, Typography } from '@material-ui/core'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { Tree } from '@src/components/Tree'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\n\ninterface StateProps {\n  categories: Array<ICategory>\n  iconChoices: Array<{\n    name: string\n    value: string\n  }>\n  CategoryTree: {}\n}\ninterface DispatchProps {}\ntype CategoryListProps = StateProps & DispatchProps\n\nclass CategoryList extends React.Component<CategoryListProps> {\n  render() {\n    return (\n      <div>\n        <Tree root={{ id: '1', children: [] }} />\n        <div>{this.props.categories.map(cat => this.getCard(cat))}</div>\n      </div>\n    )\n  }\n  onSelectIcon(category: ICategory, changes) {\n    /*\n    return this.props.actions.CategoryUpdate({\n      id: category.id,\n      mui_icon_id: changes.mui_icon_id,\n    })\n     */\n  }\n\n  getCard(cat: ICategory) {\n    const choices = this.props.iconChoices.map(i => {\n      return {\n        value: i.name,\n        mui_icon_id: i.value,\n        label: i.name,\n      }\n    })\n    return (\n      <Card key={cat.id}>\n        <Typography style={{ display: 'flex' }}>{cat.description}</Typography>\n        <SingleSelectField\n          style={{ flex: 1 }}\n          instance={cat}\n          choices={choices}\n          instancePropNameToUpdate=\"mui_icon_id\"\n          onChange={this.onSelectIcon.bind(this)}\n        />\n      </Card>\n    )\n  }\n}\n\nconst mapStateToProps = (state): StateProps => {\n  return {\n    categories: state.categories,\n    iconChoices: [],\n    CategoryTree: {},\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {}\n}\nexport const CategoryListPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CategoryList)\n","import { UrlPathEnum } from '@src/types'\nimport { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory()\nexport const pushHistory = (\n  pathname: UrlPathEnum,\n  urlState?: {} | null,\n  state: {} | null = null,\n) => {\n  const searchString =\n    urlState && urlState && Object.keys(urlState).length\n      ? '?urlState=' + JSON.stringify(urlState)\n      : ''\n  return history.push({\n    pathname,\n    search: searchString,\n    state,\n  })\n}\n\nexport const getPathName = () => {\n  const path = history.location.pathname\n  return path.endsWith('/') ? path.slice(0, path.length - 1) || '/' : path\n}\n","import * as React from 'react'\nimport { State, BUTLER_ACTIONS } from '@src/types'\nimport {initialState} from '@src/reducers'\n\nexport const UrlStateContext = React.createContext<any>({})\nexport const ButlerContext = React.createContext<typeof BUTLER_ACTIONS>(BUTLER_ACTIONS)\nexport const StateContext = React.createContext<State>(initialState)\n","import { List, ListItem, ListItemText } from '@material-ui/core'\nimport { Route, Switch } from 'react-router'\nimport { CategoryListPage } from './CategoryListPage'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/types'\nimport * as C from '@src/common'\nimport { getPathName, pushHistory } from '@src/history'\nimport { LoginPage } from '@src/LoginPage'\nimport { TransactionChart } from '@src/TransactionChart'\nimport { parseUrlState } from '@src/selectors'\nimport { TransactionList } from '@src/TransactionList'\nimport * as React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { connect } from 'react-redux'\nimport { StateContext, UrlStateContext, ButlerContext } from './contexts'\n\nimport { State, UrlPathEnum } from '@src/types'\n\ninterface StateProps {\n  isAuthenticated: boolean\n  urlState: any\n  state: State\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = StateProps & DispatchProps\n\nclass RootComponent extends React.Component<Prop, State> {\n  render() {\n    return (\n      <C.FlexContainer>\n        <div style={{ maxWidth: '100%', flex: 8 }}>\n          <StateContext.Provider value={this.props.state}>\n            <ButlerContext.Provider value={this.props.butler}>\n              <UrlStateContext.Provider value={this.props.urlState}>\n                <Body isAuthenticated={this.props.isAuthenticated} />\n              </UrlStateContext.Provider>\n            </ButlerContext.Provider>\n          </StateContext.Provider>\n        </div>\n      </C.FlexContainer>\n    )\n  }\n}\n\nexport const Root = connect<StateProps, DispatchProps>(\n  (state: State, ownProps) => {\n    return {\n      isAuthenticated: !!(state.authToken || sessionStorage.getItem('authToken')),\n      urlState: parseUrlState(),\n      state,\n    }\n  },\n  dispatch => ({\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }),\n)(RootComponent)\n\nconst PageList: React.FC = () => {\n  const UrlPathsMap = {\n    TransactionList,\n    TransactionChart,\n    CategoryListPage,\n  }\n  return (\n    <List>\n      {Object.keys(UrlPathsMap).map((c, index) => {\n        return (\n          <ListItem key={index} button onClick={() => pushHistory(c as UrlPathEnum)}>\n            <ListItemText primary={c} />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nclass Body extends React.Component<{ isAuthenticated: boolean }> {\n  render() {\n    if (getPathName() === UrlPathEnum.LoginPage) {\n      return <LoginPage />\n    }\n    if (!this.props.isAuthenticated) {\n      console.warn('not authenticated!!!')\n      pushHistory(UrlPathEnum.LoginPage)\n      return <div />\n    }\n    if (getPathName() === UrlPathEnum.Root) {\n      return <PageList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionList) {\n      return <TransactionList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionChart) {\n      return <TransactionChart />\n    }\n    if (getPathName() === UrlPathEnum.CategoryListPage) {\n      return <CategoryListPage />\n    }\n\n    throw new Error(`Invalid paths: ${getPathName()}`)\n  }\n}\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={Root} />\n  </Switch>\n))\n","import React from 'react'\nexport { default as styled } from 'styled-components'\nexport { default as PropTypes } from 'prop-types'\n\n// Material\nexport { default as IconButton } from '@material-ui/core/IconButton'\nexport { default as TextField } from '@material-ui/core/TextField'\nexport { Card, CardActions, CardHeader, CardMedia } from '@material-ui/core'\nexport { default as LinearProgress } from '@material-ui/core/LinearProgress'\n\nimport { Table as TRC } from '@material-ui/core'\n\nexport { SingleSelectField } from './components/SingleSelectField'\n\nexport const S = {\n  secondary: 'rgb(255, 64, 129)',\n  Card: {\n    margin: '5px',\n  },\n  CardContainer: {\n    paddingBottom: '5px',\n  },\n  Toolbar: {\n    height: '56px',\n    background: '#4285f4',\n  },\n\n  SmallFont: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  filterFonts: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  Body: {\n    background: '#f2f2f2',\n  },\n}\n\nexport const isWide = () => window.screen.availWidth > 800\n\nexport const TableRowColumn = props => {\n  const style = Object.assign(\n    {},\n    {\n      whiteSpace: 'normal',\n      textOverflow: 'initial',\n    },\n    props.style,\n  )\n  return <TRC {...props} style={style} />\n}\n\nexport const FlexContainer = props => {\n  const defaultStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n  const newStyle = Object.assign({}, defaultStyle, props.style)\n  const newProps = Object.assign({}, props, { style: newStyle })\n  return <div {...newProps} />\n}\n","import { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport * as React from 'react'\n\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { ButlerContext } from '@src/Root/contexts'\n\nexport const LoginPage = props => {\n  const butler = React.useContext(ButlerContext)\n  const [username, setUsername] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const submitLogin = () => {\n    butler.AuthenticateUser(\n      {\n        username: username,\n        password: password,\n      },\n      'replace',\n      data => {\n        sessionStorage.setItem('authToken', data.authToken)\n        // Redirect to root\n        pushHistory(UrlPathEnum.Root)\n      },\n    )\n  }\n  return (\n    <div\n      style={{\n        height: `${window.innerHeight}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <TextField label=\"Username\" onChange={e => setUsername(e.target.value)} />\n      <br />\n      <TextField\n        onChange={e => setPassword(e.target.value)}\n        type=\"password\"\n        label=\"Password\"\n        onKeyPress={e => {\n          if (e.charCode == 13) {\n            submitLogin()\n          }\n        }}\n      />\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={() => submitLogin()}>\n        Login\n      </Button>\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\nexport function stringToDate(dateString: string): Date {\n  const [year, month, day] = dateString.split('-').map(v => parseInt(v))\n  const ret = new Date(year, month - 1, day)\n  return ret\n}\nexport function formatDate(d: string): string {\n  const date = new Date(d)\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC',\n  })\n}\n\nexport const getIsoDateString = (d: Date) => {\n  const year = d.getFullYear()\n  const month = d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1\n  const day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport function getToday(): string {\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth() < 9 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n  const day = today.getDate() < 10 ? '0' + today.getDate() : today.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport interface Identifiable {\n  id: string | number\n}\nexport const mergeArrays = <T extends Identifiable>(\n  existing: Array<T>,\n  incoming: Array<T>,\n  prependOrAppend: 'prepend' | 'append',\n): Array<T> => {\n  return incoming.reduce(\n    function(accumulator: Array<T>, value: T) {\n      const index = existing.findIndex(x => x.id === value.id)\n      if (index >= 0) {\n        const ret = [\n          ...accumulator.slice(0, index),\n          value,\n          ...accumulator.slice(index + 1, accumulator.length),\n        ]\n        return ret\n      } else {\n        return prependOrAppend === 'append' ? [...accumulator, value] : [value, ...accumulator]\n      }\n    },\n    [...existing],\n  )\n}\nexport interface ButlerProps {\n  butler: typeof BUTLER_ACTIONS\n}\nconst mapDispatchToProps = (dispatch): ButlerProps => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\n\nexport const connectButler = <T extends {}>(stateMapper: ((state) => T) | null) => {\n  return connect<T, ButlerProps>(\n    stateMapper,\n    mapDispatchToProps,\n  )\n}\n","/**\n * GENERATED CODE. DO NOT EDIT !!!\"\n */\nexport interface ArchiveTransaction__Request {\n  id: number\n}\nexport interface AuthenticateUserRequest {\n  username: string\n  password: string\n}\nexport interface AuthenticateUserResponse {\n  errors: {}\n  authToken: string\n}\nexport interface CreateTransaction__Request {\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  merchant: string\n  balance_adjust?: string\n}\nexport enum EnumRoute {\n  ListTransactions = 'ListTransactions',\n  AuthenticateUser = 'AuthenticateUser',\n  ListCategories = 'ListCategories',\n  ListEvents = 'ListEvents',\n  GetUserBalance = 'GetUserBalance',\n  UpdateTransaction = 'UpdateTransaction',\n  GetIncomeExpenseReport = 'GetIncomeExpenseReport',\n  GetExpenseReport = 'GetExpenseReport',\n  UploadStatement = 'UploadStatement',\n  ImportFromPlaid = 'ImportFromPlaid',\n  ImportFromWave = 'ImportFromWave',\n  SignCheckPoint = 'SignCheckPoint',\n  CreateTransaction = 'CreateTransaction',\n  ArchiveTransaction = 'ArchiveTransaction',\n}\nexport interface GetExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetIncomeExpenseReportResponse {\n  chart_data: {}\n}\nexport interface GetIncomeExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetUserBalanceRequest {}\nexport interface GetUserBalanceResponse {\n  balance: string\n}\nexport interface ITreeNode {\n  id: string\n  children: Array<ITreeNode>\n}\nexport interface ImportFromPlaidRequest {\n  start_date: string\n  end_date: string\n}\nexport interface IPlaidAccount {\n  account_id: string\n  name: string\n  type: string\n  subtype: string\n  mask: string\n}\nexport interface IPlaidTransaction {\n  account_id: string\n  account: IPlaidAccount\n  amount: number\n  category: Array<string>\n  category_id: string\n  date: string\n  iso_currency_code: string\n  name: string\n  pending: boolean\n  transaction_id: string\n  transaction_type: string\n}\nexport interface IWaveTransaction {\n  anchor_account_name: string\n  date_created: string\n  direction: string\n  transaction_description: string\n  transaction_date: string\n  transaction_id: string\n  transaction_amount: string\n}\nexport interface IPrediction {\n  category_id: number\n  category_name: string\n  split: boolean\n}\nexport interface IUserTransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  plaid_category: string | null\n  editable: boolean\n  prediction: IPrediction | null\n}\nexport interface ImportFromPlaidResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ImportFromWaveRequest {\n  start_date: string\n  end_date: string\n}\nexport interface ImportFromWaveResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ListCategoriesRequest {}\nexport interface ICategory {\n  id: number\n  description: string\n  name: string\n  parent_id: number | null\n  mui_icon_id: string\n  is_selectable: boolean\n}\nexport interface ListCategoriesResponse {\n  categories: Array<ICategory>\n}\nexport interface ListEventsRequest {}\nexport enum EventType {\n  CHECKPOINT = 'CHECKPOINT',\n  STATEMENT_UPLOAD = 'STATEMENT_UPLOAD',\n  BATCH_IMPORT = 'BATCH_IMPORT',\n}\nexport interface ICheckPoint {\n  id: number\n  group_id: number\n  signed_ts: string | null\n  signed_by: number | null\n  signed_balance: string | null\n  updated_ts: string\n  created_ts: string\n  created_by: number\n  event_type?: EventType\n}\nexport interface IStatement {\n  id: number\n  source: string\n  user_id: string\n  created_ts: number\n  first_date: string\n  last_date: string\n  notes: string\n  is_processed: boolean\n  event_type?: EventType\n}\nexport interface IImportBatch {\n  id: number\n  origin: string\n  user_id: string\n  created_ts: number\n  start_date: string\n  end_date: string\n  event_type?: EventType\n}\nexport interface ListEventsResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface ListTransactionsRequest {\n  start?: number\n  end?: number\n  event_id?: string\n  search_text?: string\n}\nexport interface ListTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface SignCheckPointRequest {\n  id: number\n}\nexport interface SignCheckPointResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface UpdateTransactionRequest {\n  id: number\n  issued_date?: string | null\n  notes?: string | null\n  category_id?: number | null\n  balance_adjust?: string\n}\nexport interface UpdateTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport enum EnumStatementSource {\n  PC_MASTER = 'PC_MASTER',\n  SCOTIA_MASTER = 'SCOTIA_MASTER',\n  VISA = 'VISA',\n  CHEQUE = 'CHEQUE',\n}\nexport interface UploadStatementRequest {\n  source: EnumStatementSource\n  content: string\n}\nexport interface ITransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  plaid_category: string | null\n}\nexport interface UploadStatementResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n  transactions: Array<ITransaction>\n  duplicates: Array<ITransaction>\n}\n\nexport type UpdateType = 'replace' | 'do-nothing' | 'merge-append' | 'remove'\nconst ListTransactions = (\n  data: ListTransactionsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListTransactions,\n      route: EnumRoute.ListTransactions,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst AuthenticateUser = (\n  data: AuthenticateUserRequest,\n  updateType: UpdateType,\n  successCallback?: (data: AuthenticateUserResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.AuthenticateUser,\n      route: EnumRoute.AuthenticateUser,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListCategories = (\n  data: ListCategoriesRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListCategoriesResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListCategories,\n      route: EnumRoute.ListCategories,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListEvents = (\n  data: ListEventsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListEventsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListEvents,\n      route: EnumRoute.ListEvents,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetUserBalance = (\n  data: GetUserBalanceRequest,\n  updateType: UpdateType,\n  successCallback?: (data: GetUserBalanceResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetUserBalance,\n      route: EnumRoute.GetUserBalance,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UpdateTransaction = (\n  data: UpdateTransactionRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UpdateTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UpdateTransaction,\n      route: EnumRoute.UpdateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetIncomeExpenseReport = (\n  data: GetIncomeExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetIncomeExpenseReport,\n      route: EnumRoute.GetIncomeExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetExpenseReport = (\n  data: GetExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetExpenseReport,\n      route: EnumRoute.GetExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UploadStatement = (\n  data: UploadStatementRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UploadStatementResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UploadStatement,\n      route: EnumRoute.UploadStatement,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromPlaid = (\n  data: ImportFromPlaidRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromPlaidResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromPlaid,\n      route: EnumRoute.ImportFromPlaid,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromWave = (\n  data: ImportFromWaveRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromWaveResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromWave,\n      route: EnumRoute.ImportFromWave,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst SignCheckPoint = (\n  data: SignCheckPointRequest,\n  updateType: UpdateType,\n  successCallback?: (data: SignCheckPointResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.SignCheckPoint,\n      route: EnumRoute.SignCheckPoint,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst CreateTransaction = (\n  data: CreateTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.CreateTransaction,\n      route: EnumRoute.CreateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ArchiveTransaction = (\n  data: ArchiveTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ArchiveTransaction,\n      route: EnumRoute.ArchiveTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nexport const BUTLER_ACTIONS = {\n  ListTransactions,\n\n  AuthenticateUser,\n\n  ListCategories,\n\n  ListEvents,\n\n  GetUserBalance,\n\n  UpdateTransaction,\n\n  GetIncomeExpenseReport,\n\n  GetExpenseReport,\n\n  UploadStatement,\n\n  ImportFromPlaid,\n\n  ImportFromWave,\n\n  SignCheckPoint,\n\n  CreateTransaction,\n\n  ArchiveTransaction,\n}\n","import { history } from '@src/history'\nimport { IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { State } from '@src/types'\nimport _ from 'lodash'\nimport querystring from 'querystring'\n\nexport function getSelectableCategories(state: State) {\n  return state.categories.filter(x => x.is_selectable)\n}\n\nexport function getSnack(state: State) {\n  if (!state.snacks.length) {\n    return ''\n  }\n  return state.snacks[0]\n}\n\nexport function getVisibleTransactions(state): Array<IUserTransaction> {\n  return state.transactions || []\n}\n\nexport function parseUrlState() {\n  const params = parseSearch()\n  if (params && params.urlState) {\n    return JSON.parse(params.urlState as string)\n  }\n  return {}\n}\nexport function parseSearch() {\n  return querystring.parse(history.location.search.split('?')[1])\n}\n\nexport const getAuthToken = (state: State) =>\n  state.authToken || sessionStorage.getItem('authToken') || ''\n","import { Button, Dialog, DialogContent, DialogTitle, Icon } from '@material-ui/core'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { Autocomplete, OptionType } from 'rice-instructor'\n\ninterface Prop {\n  instancePropNameToUpdate: string\n  choices: Array<{\n    value: string | number\n    mui_icon_id?: string\n    label: string\n  }>\n  instance: {}\n  onChange: (instance, changes) => void\n  style?: any\n  defaultValue?: string\n}\n\nexport class SingleSelectField extends React.Component<Prop, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      openDialog: false,\n    }\n  }\n\n  getInitialOption = () => {\n    const value = _.get(this.props.instance, this.props.instancePropNameToUpdate, null)\n\n    if (!value) return null\n    const option = this.props.choices.find(x => x.value === value)\n    if (!option) {\n      throw new Error(`${value} not found `)\n    }\n\n    return option\n  }\n\n  openDialog = e => {\n    this.setState({ openDialog: true })\n  }\n  closeDialog = () => {\n    this.setState({ openDialog: false })\n  }\n  onSelectOption = (selectedOption: OptionType) => {\n    const self = this,\n      { onChange, instance, instancePropNameToUpdate } = self.props\n    onChange(instance, {\n      [instancePropNameToUpdate]: selectedOption.value,\n    })\n    this.closeDialog()\n  }\n\n  render() {\n    const { choices } = this.props\n    const initialOption = this.getInitialOption()\n    return (\n      <div>\n        <Button onClick={this.openDialog} variant=\"outlined\" color=\"primary\">\n          {initialOption ? (\n            <Icon style={{ marginRight: '5px' }}>{initialOption.mui_icon_id}</Icon>\n          ) : null}\n          {initialOption ? initialOption.label : 'Select A Category'}\n        </Button>\n        <Dialog open={this.state.openDialog} fullWidth onClose={this.closeDialog}>\n          <DialogTitle>Select a category</DialogTitle>\n          <DialogContent>\n            <Autocomplete\n              onSelectOption={this.onSelectOption}\n              defaultValue={initialOption ? initialOption.value : undefined}\n              placeholder=\"Select a category\"\n              options={choices}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    )\n  }\n}\n","import { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport { apiMiddleware } from './middleware'\nimport reducers from './reducers'\n\nexport const configureStore = (initialState?) => {\n  let middleware = applyMiddleware(thunk, apiMiddleware, logger())\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware)\n  }\n  const store = createStore(reducers, initialState, middleware)\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers')\n      store.replaceReducer(nextReducer)\n    })\n  }\n  return store\n}\n","import { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { Middleware } from 'redux'\nimport { callButlerApi } from './actions'\nimport { EnumRoute } from '@src/__generated__/backendSchemas'\n\nexport const apiMiddleware: Middleware = store => next => action => {\n  if (action && EnumRoute[action.type]) {\n    callButlerApi({\n      endpoint: action.route,\n      jsonBody: action.data,\n      authToken: sessionStorage.getItem('authToken') || store.getState().authToken || '',\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          store.dispatch({\n            type: `BUTLER_ANSWERED`,\n            updateType: action.updateType,\n            response: data,\n          })\n          if (action.successCallback) {\n            action.successCallback(data)\n          }\n        })\n      } else if (response.status === 401) {\n        sessionStorage.removeItem('jwt')\n        pushHistory(UrlPathEnum.LoginPage)\n      }\n    })\n  }\n\n  return next(action)\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router'\nimport { history } from './history'\n\nimport { App } from '@src/Root'\nimport { configureStore } from './configureStore'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}