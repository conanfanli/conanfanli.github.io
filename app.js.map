{"version":3,"sources":["webpack:///./actions.ts","webpack:///./reducers.ts","webpack:///./types/index.ts","webpack:///./TransactionChart.tsx","webpack:///./TransactionList/NewPlaidForm.tsx","webpack:///./components/FileUploadButton.tsx","webpack:///./TransactionList/NewStatementForm.tsx","webpack:///./TransactionList/NewTransactionForm.tsx","webpack:///./Root/SearchBar.tsx","webpack:///./TransactionList/TransactionListAppBar.tsx","webpack:///./components/CategoryField.tsx","webpack:///./components/DebouncedTextField.tsx","webpack:///./components/icons.tsx","webpack:///./TransactionList/TransactionRow.tsx","webpack:///./Root/Timeline/EventRow.tsx","webpack:///./Root/Timeline/utils.ts","webpack:///./Root/Timeline/index.tsx","webpack:///./TransactionList/index.tsx","webpack:///./components/Tree.tsx","webpack:///./Root/CategoryListPage.tsx","webpack:///./history.ts","webpack:///./Root/index.tsx","webpack:///./common.tsx","webpack:///./LoginPage.tsx","webpack:///./utils.ts","webpack:///./Root/contexts.ts","webpack:///./__generated__/backendSchemas.ts","webpack:///./selectors.ts","webpack:///./components/SingleSelectField.tsx","webpack:///./configureStore.tsx","webpack:///./middleware.ts","webpack:///./main.tsx"],"names":["__webpack_require__","d","__webpack_exports__","BASE_URL","callButlerApi","window","location","protocol","hostname","port","BASE_API_URL","request","url","endpoint","jwt","authToken","fetch","method","body","JSON","stringify","jsonBody","headers","Content-Type","X-Requested-With","Authorization","initialState","redux_actions__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","redux__WEBPACK_IMPORTED_MODULE_2__","_src_utils__WEBPACK_IMPORTED_MODULE_3__","balance","user_id","events","categories","isAuthenticated","snacks","transactions","handlers","state","action","hasOwnProperty","type","createReducer","EAT_SNACK","slice","ADD_SNACK","concat","snack","createButlerReducer","partialState","sortBy","Object","response","updateType","filter","item","find","deleted","id","ret","Error","reducers","transaction","issued_date","e","Date","created_ts","getTime","UrlPathEnum","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_0__","highcharts_data__WEBPACK_IMPORTED_MODULE_3___default","react_highcharts__WEBPACK_IMPORTED_MODULE_6___default","a","Highcharts","highcharts_drilldown__WEBPACK_IMPORTED_MODULE_4___default","getChartConfig","_a","chart","title","text","xAxis","yAxis","min","align","labels","overflow","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","column","allowPointSelect","click","onClickColumn","legend","layout","verticalAlign","x","y","floating","borderWidth","shadow","credits","TransactionChartComponent","_super","props","_this","call","this","onChangeReportType","showReport","target","value","config","bind","reportTitle","report_type","initialReportType","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","console","log","getReportTitle","today","threeMonthAgo","setDate","getDate","apiName","butler","start_date","_src_utils__WEBPACK_IMPORTED_MODULE_10__","end_date","res","titled","updeep__WEBPACK_IMPORTED_MODULE_9___default","assign","chart_data","setState","react__WEBPACK_IMPORTED_MODULE_5__","componentDidMount","render","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","onChange","_material_ui_core__WEBPACK_IMPORTED_MODULE_2__","TransactionChart","react_redux__WEBPACK_IMPORTED_MODULE_7__","dispatch","redux__WEBPACK_IMPORTED_MODULE_8__","_src_types__WEBPACK_IMPORTED_MODULE_11__","toISOString","NewPlaidForm_NewPlaidFormComponent","NewPlaidFormComponent","apply","arguments","importTransactions","origin","ImportFromPlaid","ImportFromWave","setStartDate","setEndDate","tslib_es6","react","Grid","container","xs","TextField","label","defaultValue","Button","onClick","style","marginTop","color","variant","NewPlaidForm","es","redux","backendSchemas","FileUploadButton_FileUploadButton","FileUploadButton","onFileInputChange","event","file","files","reader","FileReader","addEventListener","submitFileContent","result","readAsText","button","component","hidden","ref","fileInput","htmlFor","NewStatementForm_StatementFormContainer","StatementFormContainer","selectedSource","CHEQUE","onSelectType","content","length","UploadStatement","source","paddingTop","ExpansionPanel","expanded","ExpansionPanelSummary","spacing","sm","Select","map","c","MenuItem","key","Divider","ExpansionPanelActions","size","onClose","NewStatementForm","fieldConfig","required","merchant","notes","category_id","balance_adjust","total_amount","FieldInput","fieldName","updateField","instance","error","getInitialState","utils","NewTransactionForm_NewTransactionFormContainer","NewTransactionFormContainer","createTransaction","CreateTransaction","data","old","newState","isValid","t","every","Boolean","selectableCategories","SingleSelectField","choices","cat","description","mui_icon_id","instancePropNameToUpdate","changes","disabled","NewTransactionForm","selectors","types","SearchBar_SearchBarComponent","SearchBarComponent","anchorEl","debounced","lodash","newValue","ListTransactions","search_text","history_0","TransactionList","onFocus","currentTarget","handleClose","onSearch","icon","InputAdornment","position","Search","InputProps","startAdornment","Menu","open","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","suggestions","sug","index","SearchBar","ownProps","TransactionListAppBar_TransactionListAppBarComponent","TransactionListAppBarComponent","showNewTransactionForm","showForm","showNewStatementForm","showPlaidImportForm","showWaveImportForm","toggleTimeline","AppBar","Toolbar","Tooltip","IconButton","History","Typography","flex","rice_instructor","Add","ListItemIcon","AttachMoney","ListItemText","CreditCard","Waves","GridOn","sessionStorage","removeItem","href","Icon","className","TransactionListAppBar","CategoryField_SmartCatField","SmartCatField","prediction","onAccept","split","fontWeight","category_name","Check","declined","Close","CategoryField_CategoryField","CategoryField","onSelectCategory","UpdateTransaction","DebouncedTextField","helperText","onBounce","icons_PlaidIcon","PlaidIcon","float","CategoryInfoField","category","multiplier","lender_id","parseFloat","toString","TransactionRow","onToggleExpansion","contexts","editable","fields","GetUserBalance","origin_payload","lib_default","shouldExpandNode","account_name","plaid_category","paddingLeft","ExpansionPanelDetails","textAlign","Fab","aria-label","ArchiveTransaction","Delete","EventRow","urlState","event_id","event_type","CHECKPOINT","CheckpointListItem","checkpoint","eventIcon","BATCH_IMPORT","plaid","wave","STATEMENT_UPLOAD","getEventIcon","eventButtonIcon","getEventButtonIcon","ListItem","selected","start","end","toLocaleDateString","signed_ts","signed_balance","batch_import","upload","first_date","last_date","getEventDescription","ListItemSecondaryAction","ButtonGroup","SignCheckPoint","actions","Timeline","ListEvents","List","PAGE_SIZE","TransactionList_TransactionListContainer","TransactionListContainer","expandedTransactionId","shownForm","showTimeline","loadMoreTransactions","formType","closeForm","ListCategories","maxWidth","height","innerHeight","marginBottom","fullWidth","IdentedLineItemText","ident","itemProps","Tree_Tree","Tree","root","children","child","getLevel","node","level","Checkbox","flat","CategoryListPage_CategoryList","CategoryList","getCard","onSelectIcon","iconChoices","i","name","Card","display","CategoryListPage","CategoryTree","history","pushHistory","getPathName","history__WEBPACK_IMPORTED_MODULE_0__","pathname","searchString","keys","push","search","path","endsWith","RootComponent","react__WEBPACK_IMPORTED_MODULE_6__","_src_common__WEBPACK_IMPORTED_MODULE_12__","_contexts__WEBPACK_IMPORTED_MODULE_10__","Provider","Body","Root","react_redux__WEBPACK_IMPORTED_MODULE_8__","getItem","_src_selectors__WEBPACK_IMPORTED_MODULE_16__","redux__WEBPACK_IMPORTED_MODULE_5__","PageList","UrlPathsMap","_src_TransactionList__WEBPACK_IMPORTED_MODULE_17__","_src_TransactionChart__WEBPACK_IMPORTED_MODULE_15__","_CategoryListPage__WEBPACK_IMPORTED_MODULE_9__","_src_history__WEBPACK_IMPORTED_MODULE_13__","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","primary","LoginPage","_src_LoginPage__WEBPACK_IMPORTED_MODULE_14__","warn","App","react_hot_loader__WEBPACK_IMPORTED_MODULE_7__","module","react_router__WEBPACK_IMPORTED_MODULE_4__","FlexContainer","newStyle","flexDirection","newProps","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","_material_ui_core__WEBPACK_IMPORTED_MODULE_0__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","_src_history__WEBPACK_IMPORTED_MODULE_3__","_src_types__WEBPACK_IMPORTED_MODULE_4__","_src_Root_contexts__WEBPACK_IMPORTED_MODULE_5__","username","setUsername","_b","password","setPassword","submitLogin","AuthenticateUser","setItem","alignItems","justifyContent","onKeyPress","charCode","formatDate","getIsoDateString","getToday","mergeArrays","connectButler","react_redux__WEBPACK_IMPORTED_MODULE_0__","redux__WEBPACK_IMPORTED_MODULE_1__","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_2__","month","day","timeZone","getFullYear","getMonth","existing","incoming","prependOrAppend","reduce","accumulator","findIndex","mapDispatchToProps","stateMapper","UrlStateContext","ButlerContext","StateContext","react__WEBPACK_IMPORTED_MODULE_0__","_src_types__WEBPACK_IMPORTED_MODULE_1__","_src_reducers__WEBPACK_IMPORTED_MODULE_2__","EnumRoute","EventType","EnumStatementSource","BUTLER_ACTIONS","successCallback","route","GetIncomeExpenseReport","GetExpenseReport","getSelectableCategories","getVisibleTransactions","parseUrlState","getAuthToken","querystring__WEBPACK_IMPORTED_MODULE_0__","querystring__WEBPACK_IMPORTED_MODULE_0___default","n","_src_history__WEBPACK_IMPORTED_MODULE_1__","is_selectable","params","parse","getInitialOption","lodash__WEBPACK_IMPORTED_MODULE_6___default","get","option","openDialog","closeDialog","onSelectOption","selectedOption","initialOption","react__WEBPACK_IMPORTED_MODULE_7__","marginRight","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","rice_instructor__WEBPACK_IMPORTED_MODULE_8__","undefined","placeholder","options","middleware","apiMiddleware","store","next","getState","then","ok","json","status","main_store","redux_thunk_es","react_dom","react_router","document","getElementById"],"mappings":"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","file":"app.js","sourcesContent":["export function addSnack(message: string) {\n  return {\n    type: 'ADD_SNACK',\n    snack: message,\n  }\n}\n\nexport function eatSnack() {\n  return {\n    type: 'EAT_SNACK',\n  }\n}\n\nexport const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${\n  window.location.port ? '8000' : ''\n}`\nexport const BASE_API_URL = `${BASE_URL}/api2`\n\nexport function callButlerApi(request: { endpoint: string; jsonBody: {}; authToken: string }) {\n  const url = `${BASE_API_URL}/${request.endpoint}/`\n  const jwt = request.authToken\n\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(request.jsonBody),\n    // credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n      Authorization: jwt ? `JWT ${jwt}` : '',\n    },\n  })\n}\n\nexport const ACTIONS = {\n  eatSnack,\n  addSnack,\n}\n","import { handleAction } from 'redux-actions'\nimport * as _ from 'lodash'\nimport { combineReducers } from 'redux'\nimport { State } from '@src/types'\nimport { mergeArrays } from '@src/utils'\n\nexport const initialState: State = {\n  balance: '',\n  user_id: 0,\n  events: [],\n  categories: [],\n  authToken: null,\n  isAuthenticated: false,\n  snacks: [],\n  transactions: [],\n}\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n\nconst snacks = createReducer(initialState.snacks, {\n  EAT_SNACK: snacks => [...snacks.slice(1)],\n  ADD_SNACK: (snacks, action) => [...snacks, action.snack],\n})\n\nconst createButlerReducer = (partialState: keyof State, initialState, sortBy?: (a) => number) => {\n  return handleAction(\n    `BUTLER_ANSWERED`,\n    (state, action: any) => {\n      if (!action.response[partialState]) {\n        return state\n      }\n      if (action.updateType === 'replace') {\n        return action.response[partialState]\n      } else if (action.updateType === 'do-nothing') {\n        return state\n      } else if (action.updateType === 'remove') {\n        return [...state].filter(\n          item => !action.response[partialState].find(deleted => deleted.id === item.id),\n        )\n      } else if (action.updateType === 'merge-append') {\n        const ret = mergeArrays(state, action.response[partialState], 'append')\n        if (sortBy) {\n          return _.sortBy(ret, sortBy)\n        }\n        return ret\n      } else {\n        throw new Error('not handled')\n      }\n    },\n    initialState,\n  )\n}\n\nconst reducers = combineReducers({\n  snacks,\n  transactions: createButlerReducer('transactions', initialState.transactions, transaction => {\n    return -1 * transaction.issued_date\n  }),\n  authToken: createButlerReducer('authToken', initialState.authToken),\n  categories: createButlerReducer('categories', initialState.categories),\n  events: createButlerReducer('events', initialState.events, e => {\n    return -1 * new Date(e.created_ts).getTime()\n  }),\n  balance: createButlerReducer('balance', initialState.balance),\n  user_id: createButlerReducer('user_id', initialState.balance),\n})\n\nexport default reducers\n","import { ACTIONS as actionCreators } from '@src/actions'\nimport {\n  ICheckPoint,\n  IStatement,\n  IImportBatch,\n  IUserTransaction,\n  ICategory,\n} from '@src/__generated__/backendSchemas'\n\nexport * from '@src/__generated__/backendSchemas'\n\nexport type IEvent = ICheckPoint | IStatement | IImportBatch\n\nexport interface State {\n  user_id: number\n  balance: string\n  events: Array<IEvent>\n  categories: Array<ICategory>\n  authToken: string | null\n  isAuthenticated: boolean\n  transactions: Array<IUserTransaction>\n  router?: any\n  snacks: Array<string>\n}\n\nexport type ActionType = typeof actionCreators\n\nexport enum UrlPathEnum {\n  Root = '/',\n  LoginPage = '/LoginPage',\n  TransactionList = '/TransactionList',\n  TransactionChart = '/TransactionChart',\n  CategoryListPage = '/CategoryListPage',\n}\n","import { MenuItem, Select } from '@material-ui/core'\n// import { parseUrlState } from '@src/selectors'\nimport HighchartsData from 'highcharts-data'\nimport HighchartsDrilldown from 'highcharts-drilldown'\nimport * as React from 'react'\nimport Highchart from 'react-highcharts'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport u from 'updeep'\nimport { getIsoDateString } from '@src/utils'\nimport { BUTLER_ACTIONS } from '@src/types'\n\nHighchartsData(Highchart.Highcharts)\nHighchartsDrilldown(Highchart.Highcharts)\n\ntype ReportType = 'INCOME_EXPENSE' | 'EXPENSE'\n\nconst getChartConfig = ({ onClickColumn }) => {\n  return {\n    chart: {\n      type: 'column',\n      //height: 800,\n      //width: 800\n    },\n    title: {\n      text: 'Income/Expense Report',\n    },\n    xAxis: {\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Spend',\n        align: 'high',\n      },\n      labels: {\n        overflow: 'justify',\n      },\n    },\n    tooltip: {\n      valueSuffix: ' dollars',\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true,\n        },\n      },\n      column: {\n        dataLabels: {\n          enabled: true,\n        },\n        allowPointSelect: false,\n        events: {\n          click: onClickColumn,\n        },\n      },\n    },\n    legend: {\n      enabled: true,\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      shadow: true,\n    },\n    credits: {\n      enabled: false,\n    },\n  }\n}\ninterface Prop {\n  butler: typeof BUTLER_ACTIONS\n  initialReportType: string\n}\n\ninterface State {\n  config: any\n  reportTitle: string\n  chart: any\n  report_type: ReportType\n}\n\nclass TransactionChartComponent extends React.Component<Prop, State> {\n  constructor(props) {\n    super(props)\n    const config = getChartConfig({\n      onClickColumn: this.onClickColumn.bind(this),\n    })\n    this.state = {\n      config,\n      chart: null,\n      reportTitle: '',\n      report_type: props.initialReportType,\n    }\n  }\n\n  onClickColumn(e) {\n    if (this.state.report_type === 'INCOME_EXPENSE') {\n      return console.log(e)\n    }\n  }\n\n  getReportTitle(value) {\n    return value == 'INCOME_EXPENSE' ? 'Income/Expense Report' : 'Expense Report'\n  }\n\n  onChangeReportType = e => {\n    this.showReport(e.target.value)\n  }\n\n  showReport(report_type: ReportType) {\n    const today = new Date()\n    const threeMonthAgo = new Date()\n    threeMonthAgo.setDate(threeMonthAgo.getDate() - 180)\n    const apiName = report_type === 'INCOME_EXPENSE' ? 'GetIncomeExpenseReport' : 'GetExpenseReport'\n    this.props.butler[apiName](\n      { start_date: getIsoDateString(threeMonthAgo), end_date: getIsoDateString(today) },\n      'do-nothing',\n      res => {\n        const titled = u(\n          {\n            title: {\n              text: this.getReportTitle(report_type),\n            },\n          },\n          this.state.config,\n        )\n        const config = Object.assign({}, titled, res.chart_data)\n        this.setState({ chart: <Highchart config={config} /> })\n        this.setState({ report_type, config })\n      },\n    )\n  }\n\n  componentDidMount() {\n    this.showReport(this.state.report_type)\n  }\n\n  render() {\n    if (!this.state.config) {\n      return <p>Loading ...</p>\n    }\n    return (\n      <div>\n        <Select value={this.state.report_type} onChange={this.onChangeReportType}>\n          <MenuItem value={'INCOME_EXPENSE'}>Income/Expense</MenuItem>\n          <MenuItem value={'EXPENSE'}>Expense</MenuItem>\n        </Select>\n        <p>{this.state.reportTitle}</p>\n        {this.state.chart}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const TransactionChart = connect(\n  null,\n  mapDispatchToProps,\n)(TransactionChartComponent)\n","import { Button, Grid, TextField } from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ninterface OwnProps {\n  origin: 'plaid' | 'wave'\n}\n\ntype FinalProps = OwnProps & DispatchProps\nconst today = new Date().toISOString().slice(0, 10)\n\nexport class NewPlaidFormComponent extends React.Component<\n  FinalProps,\n  { start_date: string; end_date: string }\n> {\n  state = { start_date: today, end_date: today }\n\n  importTransactions = () => {\n    if (this.props.origin === 'plaid') {\n      this.props.butler.ImportFromPlaid(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    } else {\n      this.props.butler.ImportFromWave(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  setStartDate = e => {\n    this.setState({ start_date: e.target.value })\n  }\n  setEndDate = e => {\n    this.setState({ end_date: e.target.value })\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item xs={4}>\n          <TextField\n            type=\"date\"\n            label=\"from\"\n            value={this.state.start_date}\n            onChange={this.setStartDate}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField type=\"date\" label=\"to\" defaultValue={today} onChange={this.setEndDate} />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            onClick={this.importTransactions}\n            style={{ marginTop: '10px' }}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Import\n          </Button>\n        </Grid>\n      </Grid>\n    )\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewPlaidForm = connect<{}, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(NewPlaidFormComponent)\n","import { Button } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface Prop {\n  submitFileContent: (content: string | ArrayBuffer | null) => void\n  button?: React.ReactElement<any>\n}\nexport class FileUploadButton extends React.Component<Prop, any> {\n  fileInput: any\n\n  onFileInputChange = event => {\n    const file = event.target.files[0]\n    const reader = new FileReader()\n\n    const callback = () => this.props.submitFileContent(reader.result)\n    reader.addEventListener('load', callback, false)\n    if (file) {\n      reader.readAsText(file)\n    }\n  }\n\n  render() {\n    const button = this.props.button || (\n      <Button variant=\"outlined\" component=\"span\">\n        Upload\n      </Button>\n    )\n    return (\n      <div>\n        <input\n          id=\"file-upload-form\"\n          hidden\n          ref={ref => (this.fileInput = ref)}\n          onChange={this.onFileInputChange}\n          type=\"file\"\n        />\n        <label htmlFor=\"file-upload-form\">{button}</label>\n      </div>\n    )\n  }\n}\n","import {\n  Select,\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  MenuItem,\n} from '@material-ui/core'\n\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { FileUploadButton } from '../components/FileUploadButton'\nimport { BUTLER_ACTIONS, EnumStatementSource } from '@src/__generated__/backendSchemas'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = OwnProps & DispatchProps\n\ninterface State {\n  selectedSource: EnumStatementSource\n}\n\nexport class StatementFormContainer extends React.Component<Prop, State> {\n  state = {\n    selectedSource: EnumStatementSource.CHEQUE,\n  }\n\n  onSelectType = event => {\n    this.setState({ selectedSource: event.target.value })\n  }\n\n  submitFileContent = (content: string) => {\n    console.log(content)\n    if (this.state.selectedSource.length && content) {\n      this.props.butler.UploadStatement(\n        {\n          source: this.state.selectedSource,\n          content: content,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  render() {\n    const choices = ['CHEQUE', 'PC_MASTER', 'SCOTIA_MASTER', 'VISA']\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <Select value={this.state.selectedSource} onChange={this.onSelectType}>\n                  {choices.map(c => {\n                    return (\n                      <MenuItem key={c} value={c}>\n                        {c}\n                      </MenuItem>\n                    )\n                  })}\n                </Select>\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FileUploadButton submitFileContent={this.submitFileContent} />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewStatementForm = connect<OwnProps, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(StatementFormContainer)\n","import {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  TextField,\n} from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getSelectableCategories } from '../selectors'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { BUTLER_ACTIONS, CreateTransaction__Request } from '@src/types'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport { getToday } from '@src/utils'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface PropsFromStore {\n  selectableCategories: Array<ICategory>\n}\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Prop = OwnProps & PropsFromStore & DispatchProps\n\ninterface State {\n  transaction: CreateTransaction__Request\n}\n\ntype FieldName =\n  | 'issued_date'\n  | 'merchant'\n  | 'notes'\n  | 'category_id'\n  | 'total_amount'\n  | 'balance_adjust'\n\nconst fieldConfig = {\n  issued_date: { type: 'date', required: true },\n  merchant: { type: 'text', required: true },\n  notes: { type: 'text', required: false },\n  category_id: { type: 'number', required: false },\n  balance_adjust: { type: 'number', required: false },\n  total_amount: { type: 'number', required: true },\n}\n\nconst FieldInput = (props: {\n  fieldName: FieldName\n  updateField: (fieldName) => (event) => void\n  instance: CreateTransaction__Request\n}) => {\n  const { fieldName, updateField, instance } = props\n  const config = fieldConfig[fieldName]\n  let error = false\n  if (config.required && !instance[fieldName]) {\n    error = true\n  } else if (config.required && config.type === 'number' && !instance[fieldName]) {\n    error = true\n  }\n\n  return (\n    <TextField\n      type={config.type}\n      required={config.required}\n      error={error}\n      label={fieldName}\n      value={instance[fieldName]}\n      onChange={updateField(fieldName)}\n    />\n  )\n}\nconst getInitialState = () => {\n  return {\n    transaction: {\n      issued_date: getToday(),\n      merchant: '',\n      notes: '',\n      category_id: 47,\n      total_amount: '0',\n      balance_adjust: '0',\n    },\n  }\n}\n\nclass NewTransactionFormContainer extends React.Component<Prop, State> {\n  state = getInitialState()\n\n  createTransaction = () => {\n    this.props.butler.CreateTransaction(this.state.transaction, 'merge-append', data => {\n      this.props.onClose()\n    })\n  }\n  updateField = (fieldName: FieldName) => {\n    const old = this.state.transaction\n    return event => {\n      const newState = Object.assign({}, old, {\n        [fieldName]: event.target.value,\n      })\n      this.setState({ transaction: newState })\n    }\n  }\n  isValid() {\n    const t = this.state.transaction\n    return [t.issued_date, t.merchant, +t.total_amount].every(Boolean)\n  }\n  render() {\n    const { selectableCategories } = this.props\n    const transaction = this.state.transaction\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  instance={transaction}\n                  fieldName=\"issued_date\"\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"merchant\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"total_amount\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <SingleSelectField\n                  instance={transaction}\n                  choices={selectableCategories.map(cat => {\n                    return {\n                      value: cat.id,\n                      label: cat.description,\n                      mui_icon_id: cat.mui_icon_id,\n                    }\n                  })}\n                  instancePropNameToUpdate=\"category_id\"\n                  onChange={(instance, changes) => {\n                    const newState = Object.assign({}, this.state.transaction, changes)\n                    this.setState({ transaction: newState })\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"notes\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"balance_adjust\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.setState(getInitialState())\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              size=\"small\"\n              color=\"primary\"\n              onClick={this.createTransaction}\n              disabled={!this.isValid()}\n            >\n              Save\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    balance: state.balance,\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewTransactionForm = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NewTransactionFormContainer)\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { InputAdornment, Menu, MenuItem, TextField } from '@material-ui/core'\nimport { Search } from '@material-ui/icons'\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum, BUTLER_ACTIONS, State } from '@src/types'\n\ninterface PropsFromStore {\n  suggestions: Array<any>\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Props = PropsFromStore & DispatchProps\n\nclass SearchBarComponent extends React.Component<Props, { anchorEl: JSX.Element | null }> {\n  state = { anchorEl: null }\n\n  debounced = _.debounce(\n    newValue =>\n      this.props.butler.ListTransactions({ search_text: newValue }, 'replace', data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          search_text: newValue,\n        }),\n      ),\n    500,\n  )\n\n  onFocus = event => {\n    this.setState({ anchorEl: event.currentTarget })\n  }\n  handleClose = event => {\n    this.setState({ anchorEl: null })\n  }\n  onSearch = event => {\n    this.debounced(event.target.value)\n  }\n  render() {\n    const icon = (\n      <InputAdornment position=\"start\">\n        <Search />\n      </InputAdornment>\n    )\n    return (\n      <div>\n        <TextField\n          onChange={this.onSearch}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">{icon}</InputAdornment>,\n          }}\n        />\n        <Menu\n          open={!!this.state.anchorEl}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n          getContentAnchorEl={null}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n        >\n          {this.props.suggestions.map((sug, index) => (\n            <MenuItem\n              key={index}\n              onClick={() => {\n                this.props.butler.ListTransactions({}, 'replace')\n              }}\n            >\n              {sug.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps): PropsFromStore => {\n  return { suggestions: [] }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const SearchBar = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchBarComponent)\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Add, AttachMoney, CreditCard, GridOn, History, Waves } from '@material-ui/icons'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { IconMenu } from 'rice-instructor'\nimport { State as AppState } from '@src/types'\nimport { SearchBar } from '@src/Root/SearchBar'\n\ninterface OwnProps {\n  showForm: (formType: string) => void\n  toggleTimeline: () => void\n}\n\ninterface StateProps {\n  balance: string | null\n}\n\ntype FinalProps = OwnProps & StateProps\n\nclass TransactionListAppBarComponent extends React.Component<FinalProps> {\n  showNewTransactionForm = () => {\n    this.props.showForm('transaction')\n  }\n\n  showNewStatementForm = () => {\n    this.props.showForm('statement')\n  }\n\n  showPlaidImportForm = () => {\n    this.props.showForm('plaid')\n  }\n  showWaveImportForm = () => {\n    this.props.showForm('wave')\n  }\n\n  toggleTimeline = () => {\n    this.props.toggleTimeline()\n  }\n\n  render() {\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Tooltip title=\"Timeline\">\n            <IconButton onClick={this.toggleTimeline}>\n              <History />\n            </IconButton>\n          </Tooltip>\n          {this.props.balance ? (\n            <Typography\n              variant=\"body1\"\n              key=\"balance\"\n            >{`Balance: $${this.props.balance}`}</Typography>\n          ) : null}\n          <div style={{ flex: 1 }} />\n          <SearchBar />\n          <IconMenu icon={<Add />}>\n            <MenuItem key=\"new-transaction-menu\" onClick={this.showNewTransactionForm}>\n              <ListItemIcon>\n                <AttachMoney />\n              </ListItemIcon>\n              <ListItemText>Transaction</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-statement-menu\" onClick={this.showNewStatementForm}>\n              <ListItemIcon>\n                <CreditCard />\n              </ListItemIcon>\n              <ListItemText>Statement</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-wave-menu\" onClick={this.showWaveImportForm}>\n              <ListItemIcon>\n                <Waves color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText>Wave Import</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-plaid-menu\" onClick={this.showPlaidImportForm}>\n              <ListItemIcon>\n                <GridOn color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText>Plaid Import</ListItemText>\n            </MenuItem>\n          </IconMenu>\n          <IconButton\n            onClick={() => {\n              sessionStorage.removeItem('authToken')\n              window.location.href = '/'\n            }}\n          >\n            <Icon className=\"material-icons\">exit_to_app</Icon>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    )\n  }\n}\nconst mapStateToProps = (state: AppState, ownProps) => {\n  return {\n    balance: state.balance,\n  }\n}\nexport const TransactionListAppBar = connect<StateProps, {}>(\n  mapStateToProps,\n  () => ({}),\n)(TransactionListAppBarComponent)\n","import * as React from 'react'\n\nimport { Grid, IconButton } from '@material-ui/core'\nimport { Check, Close } from '@material-ui/icons'\nimport { IPrediction, CreateTransaction__Request } from '../types/index'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { ICategory, BUTLER_ACTIONS, IUserTransaction } from '@src/__generated__/backendSchemas'\n\ninterface CategoryFieldProp {\n  transaction: IUserTransaction | CreateTransaction__Request\n  butler: typeof BUTLER_ACTIONS\n  selectableCategories: Array<ICategory>\n}\n\ninterface SmartCatProp {\n  prediction: IPrediction\n  onAccept: () => void\n}\nexport class SmartCatField extends React.Component<SmartCatProp, any> {\n  render() {\n    const { prediction, onAccept } = this.props\n    const split = prediction.split ? 'Split ' : ''\n    return (\n      <div style={{ color: 'rgb(0, 188, 212)', fontWeight: 'bold' }}>\n        {`${split}${prediction.category_name}?`}\n        <Grid container>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => onAccept()}>\n              <Check color=\"primary\" />\n            </IconButton>\n          </Grid>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => this.setState({ declined: true })}>\n              <Close color=\"secondary\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport class CategoryField extends React.Component<CategoryFieldProp, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      declined: false,\n    }\n  }\n\n  onSelectCategory(transaction, changes) {\n    return this.props.butler.UpdateTransaction(\n      {\n        id: transaction.id,\n        category_id: changes.category_id,\n      },\n      'merge-append',\n    )\n  }\n\n  render() {\n    const { selectableCategories, transaction } = this.props\n    return (\n      <SingleSelectField\n        instance={transaction}\n        choices={selectableCategories.map(cat => {\n          return {\n            value: cat.id,\n            mui_icon_id: cat.mui_icon_id,\n            label: cat.description,\n          }\n        })}\n        instancePropNameToUpdate=\"category_id\"\n        onChange={this.onSelectCategory.bind(this)}\n      />\n    )\n  }\n}\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { TextField } from '@material-ui/core'\n\ninterface IDebouncedTextField {\n  helperText?: string\n  defaultValue?: string\n  onBounce: (newValue) => void\n}\n\nexport const DebouncedTextField: React.FunctionComponent<IDebouncedTextField> = ({\n  helperText,\n  defaultValue,\n  onBounce,\n}) => {\n  const debounced = _.debounce(newValue => onBounce(newValue), 1000)\n  return (\n    <TextField\n      helperText={helperText}\n      type=\"number\"\n      defaultValue={defaultValue}\n      onChange={event => debounced(event.target.value)}\n    />\n  )\n}\n","import * as React from 'react'\nimport { Icon } from '@material-ui/core'\n\nexport class PlaidIcon extends React.Component<{}> {\n  render() {\n    return (\n      <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n        grid_on\n      </Icon>\n    )\n  }\n}\n","import {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Fab,\n  Grid,\n  Icon,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport JSONTree from 'react-json-tree'\nimport * as React from 'react'\nimport * as _ from 'lodash'\nimport { getSelectableCategories } from '../selectors'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { CategoryField, SmartCatField } from '@src/components/CategoryField'\nimport { DebouncedTextField } from '@src/components/DebouncedTextField'\nimport { ICategory, IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { formatDate, connectButler } from '@src/utils'\nimport { PlaidIcon } from '@src/components/icons'\n\ninterface ITransactionRowProps {\n  transaction: IUserTransaction\n  user_id: number\n  expanded: boolean\n  selectableCategories: Array<ICategory>\n  onToggleExpansion: (event, expanded) => void\n}\n\nexport const CategoryInfoField = (props: {\n  transaction: IUserTransaction\n  category: ICategory | null\n  user_id: number\n  onAccept: (arg: { id: number; category_id: number; balance_adjust: string }) => void\n}) => {\n  const { transaction, category, onAccept } = props\n  const prediction = transaction.prediction\n  const multiplier = props.user_id === transaction.lender_id ? 1 : -1\n  if (prediction) {\n    return (\n      <SmartCatField\n        prediction={prediction}\n        onAccept={() =>\n          onAccept({\n            id: transaction.id,\n            category_id: prediction.category_id,\n            balance_adjust: prediction.split\n              ? ((multiplier * parseFloat(transaction.total_amount)) / 2).toString()\n              : '0',\n          })\n        }\n      />\n    )\n  }\n  return (\n    <Grid container spacing={10}>\n      <Grid item xs={1}>\n        <Icon className=\"material-icons\">{category ? category.mui_icon_id : null}</Icon>\n      </Grid>\n      <Grid item xs>\n        {category ? <Typography color=\"textSecondary\">{category.description}</Typography> : null}\n      </Grid>\n    </Grid>\n  )\n}\n\nconst TransactionRowComponent = (props: ITransactionRowProps) => {\n  const { user_id, selectableCategories, transaction, expanded, onToggleExpansion } = props\n  const butler = React.useContext(ButlerContext)\n\n  const onAcceptSmartCat = (fields: {\n    id: number\n    category_id: number\n    balance_adjust: string\n  }) => {\n    butler.UpdateTransaction({ ...fields }, 'merge-append', () =>\n      fields.balance_adjust ? butler.GetUserBalance({}, 'replace') : null,\n    )\n  }\n  const getCategory = () => {\n    if (!transaction.category_id) return null\n    return selectableCategories.find(c => c.id === transaction.category_id) || null\n  }\n  return (\n    <div>\n      <ExpansionPanel\n        disabled={!transaction.editable}\n        expanded={expanded}\n        onChange={onToggleExpansion}\n      >\n        <ExpansionPanelSummary>\n          <Grid container spacing={10}>\n            <Grid item xs={3} sm={4}>\n              <Typography>{formatDate(transaction.issued_date)}</Typography>\n              {expanded ? null : (\n                <CategoryInfoField\n                  user_id={user_id}\n                  transaction={transaction}\n                  category={getCategory()}\n                  onAccept={onAcceptSmartCat}\n                />\n              )}\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              {transaction.origin_payload ? (\n                <Tooltip\n                  title={\n                    <JSONTree shouldExpandNode={() => true} data={transaction.origin_payload} />\n                  }\n                >\n                  {transaction.origin_payload['anchor_account_name'] ? (\n                    <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n                      waves\n                    </Icon>\n                  ) : (\n                    <PlaidIcon />\n                  )}\n                </Tooltip>\n              ) : null}\n              <Typography variant=\"body1\">{transaction.merchant}</Typography>\n              <div>\n                <Typography color=\"textSecondary\">{transaction.account_name}</Typography>\n                <Typography color=\"textSecondary\">{transaction.plaid_category}</Typography>\n                <Typography color=\"textSecondary\">{transaction.notes}</Typography>\n              </div>\n            </Grid>\n            <Grid item xs={3} sm={4} style={{ paddingLeft: '40px' }}>\n              <Typography>{`$${transaction.total_amount}`}</Typography>\n              {+transaction.balance_adjust && !expanded ? (\n                <Typography\n                  style={{\n                    color: +transaction.balance_adjust > 0 ? 'green' : 'red',\n                  }}\n                >\n                  {`$${transaction.balance_adjust}`}\n                </Typography>\n              ) : null}\n            </Grid>\n          </Grid>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={10}>\n            <Grid item xs={6} sm={4}>\n              <TextField\n                defaultValue={transaction.notes}\n                helperText=\"notes\"\n                onChange={event =>\n                  butler.UpdateTransaction(\n                    { id: transaction.id, notes: event.target.value },\n                    'merge-append',\n                  )\n                }\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <CategoryField\n                {...{\n                  transaction,\n                  selectableCategories,\n                  butler,\n                }}\n              />\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <DebouncedTextField\n                helperText=\"Balance Adjust\"\n                defaultValue={transaction.balance_adjust}\n                onBounce={newValue =>\n                  butler.UpdateTransaction(\n                    {\n                      id: transaction.id,\n                      balance_adjust: newValue,\n                    },\n                    'merge-append',\n                    () => butler.GetUserBalance({}, 'replace'),\n                  )\n                }\n              />\n            </Grid>\n            <Grid item xs={6} sm={1} style={{ textAlign: 'right' }}>\n              <Fab\n                size=\"medium\"\n                color=\"secondary\"\n                aria-label=\"Delete\"\n                onClick={() =>\n                  butler.ArchiveTransaction(\n                    {\n                      id: transaction.id,\n                    },\n                    'remove',\n                  )\n                }\n              >\n                <Delete />\n              </Fab>\n            </Grid>\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </div>\n  )\n}\nexport const TransactionRow = connectButler(state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    user_id: state.user_id,\n  }\n})(TransactionRowComponent)\n","import * as React from 'react'\nimport {\n  ListItemSecondaryAction,\n  ButtonGroup,\n  Button,\n  Tooltip,\n  Icon,\n  ListItemIcon,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core'\nimport { getEventButtonIcon, getEventIcon, getEventDescription } from './utils'\nimport { BASE_URL } from '@src/actions'\nimport { ButlerContext, UrlStateContext } from '@src/Root/contexts'\nimport { EventType, ICheckPoint, IEvent, UrlPathEnum } from '@src/types'\nimport { pushHistory } from '@src/history'\n\nexport const EventRow = (props: { authToken: string; event: IEvent }) => {\n  const urlState = React.useContext(UrlStateContext)\n  const butler = React.useContext(ButlerContext)\n\n  const { event } = props\n  const disabled = urlState.event_id === `${event.event_type}-${event.id}`\n  if (event.event_type === EventType.CHECKPOINT) {\n    return (\n      <CheckpointListItem\n        authToken={props.authToken}\n        disabled={disabled}\n        checkpoint={event as ICheckPoint}\n      />\n    )\n  }\n  const eventIcon = getEventIcon(event)\n  const onFilter = e => {\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${event.event_type}-${event.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${event.event_type}-${event.id}`,\n        }),\n    )\n  }\n  const eventButtonIcon = getEventButtonIcon(event)\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={event.event_type}>\n          <Icon color=\"primary\">{eventIcon}</Icon>\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(event.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{getEventDescription(event)}</Typography>\n      </ListItemText>\n      {eventButtonIcon ? (\n        <ListItemSecondaryAction>\n          <Button>\n            <Icon>{eventButtonIcon}</Icon>\n          </Button>\n        </ListItemSecondaryAction>\n      ) : null}\n    </ListItem>\n  )\n}\n\nexport const CheckpointListItem: React.FC<{\n  authToken: string\n  disabled: boolean\n  checkpoint: ICheckPoint\n}> = ({ authToken, checkpoint, disabled }) => {\n  const butler = React.useContext(ButlerContext)\n  const onFilter = e => {\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${checkpoint.event_type}-${checkpoint.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${checkpoint.event_type}-${checkpoint.id}`,\n        }),\n    )\n  }\n  const description = checkpoint.signed_ts\n    ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n        checkpoint.signed_ts,\n      ).toLocaleDateString()}`\n    : 'Not Signed'\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={checkpoint.event_type}>\n          {checkpoint.signed_ts ? (\n            <Icon color=\"primary\">toll</Icon>\n          ) : (\n            <Icon style={{ color: 'green' }}>fiber_new</Icon>\n          )}\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(checkpoint.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{description}</Typography>\n      </ListItemText>\n      <ListItemSecondaryAction>\n        <ButtonGroup\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          aria-label=\"Small outlined button group\"\n        >\n          {checkpoint.signed_ts ? null : (\n            <Button\n              size=\"small\"\n              color=\"secondary\"\n              onClick={() => butler.SignCheckPoint({ id: checkpoint.id }, 'merge-append')}\n            >\n              <Icon>plus_one</Icon>\n            </Button>\n          )}\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            disabled={!authToken}\n            onClick={() => {\n              window.open(`${BASE_URL}/export-checkpoint/${authToken}/${checkpoint.id}/`, '_blank')\n            }}\n          >\n            <Icon>cloud_download</Icon>\n          </Button>\n        </ButtonGroup>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n","import { ICheckPoint, EventType, IStatement, IImportBatch, IEvent } from '@src/types'\n\nexport const getEventDescription = (e: IEvent) => {\n  if (e.event_type === EventType.CHECKPOINT) {\n    const checkpoint = e as ICheckPoint\n    return checkpoint.signed_ts\n      ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n          checkpoint.signed_ts,\n        ).toLocaleDateString()}`\n      : 'Not Signed'\n  }\n  if (e.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = e as IImportBatch\n    return `${batch_import.origin}: ${batch_import.start_date} TO ${batch_import.end_date}`\n  }\n  if (e.event_type === EventType.STATEMENT_UPLOAD) {\n    const upload = e as IStatement\n    return `${upload.source}: ${upload.first_date} TO ${upload.last_date}`\n  }\n  throw new Error('not possible')\n}\nexport const getEventIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'toll'\n  }\n  if (event.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = event as IImportBatch\n    return { plaid: 'grid_on', wave: 'waves' }[batch_import.origin]\n  }\n  if (event.event_type === EventType.STATEMENT_UPLOAD) {\n    // const upload = memory as IStatement\n    return 'cloud_upload'\n  }\n  throw new Error('not possible')\n}\n\nexport const getEventButtonIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'plus_one'\n  }\n  return null\n}\n","import { List } from '@material-ui/core'\nimport * as React from 'react'\nimport { EventRow } from './EventRow'\nimport { connectButler } from '@src/utils'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { IEvent } from '@src/types'\nimport { getAuthToken } from '@src/selectors'\n\nconst TimelineComponent = (props: { events: Array<IEvent>; authToken: string }) => {\n  const butler = React.useContext(ButlerContext)\n  React.useEffect(() => {\n    butler.ListEvents({}, 'replace')\n  }, [])\n  return (\n    <div>\n      <List>\n        {props.events.map((e, index) => {\n          return <EventRow authToken={props.authToken} event={e} key={index} />\n        })}\n      </List>\n    </div>\n  )\n}\nexport const Timeline = connectButler(state => {\n  return {\n    events: state.events,\n    authToken: getAuthToken(state),\n  }\n})(TimelineComponent)\n","import { Button, Grid } from '@material-ui/core'\nimport * as React from 'react'\nimport { getSelectableCategories, getVisibleTransactions } from '../selectors'\n\nimport { NewPlaidForm } from './NewPlaidForm'\nimport { NewStatementForm } from './NewStatementForm'\nimport { NewTransactionForm } from './NewTransactionForm'\nimport { TransactionListAppBar } from './TransactionListAppBar'\nimport { TransactionRow } from './TransactionRow'\nimport { IUserTransaction, ICategory } from '@src/__generated__/backendSchemas'\nimport { Timeline } from '@src/Root/Timeline'\nimport { ButlerProps, connectButler } from '@src/utils'\nimport { State as AppState } from '@src/types'\n\ninterface OwnProps {}\ninterface PropsFromStore {\n  transactions: Array<IUserTransaction>\n  selectableCategories: Array<ICategory>\n}\nconst PAGE_SIZE = 40\n\ntype Prop = OwnProps & ButlerProps & PropsFromStore\n\ntype FormType = 'transaction' | 'plaid' | 'statement' | 'wave'\n\ninterface State {\n  expandedTransactionId: number | null\n  shownForm: FormType | null\n  showTimeline: boolean\n}\n\nclass TransactionListContainer extends React.Component<Prop, State> {\n  state: State = {\n    expandedTransactionId: null,\n    shownForm: null,\n    showTimeline: true,\n  }\n\n  toggleTimeline = () => this.setState({ showTimeline: !this.state.showTimeline })\n  loadMoreTransactions = () => {\n    const start = this.props.transactions.length\n    const end = start + PAGE_SIZE\n    this.props.butler.ListTransactions({ start, end }, 'merge-append')\n  }\n  showForm = (formType: FormType) => {\n    this.setState({ shownForm: formType })\n  }\n\n  componentDidMount() {\n    if (!this.props.selectableCategories.length) {\n      this.props.butler.ListCategories({}, 'replace')\n    }\n    this.props.butler.GetUserBalance({}, 'replace')\n    this.loadMoreTransactions()\n  }\n  onToggleExpansion(id: number) {\n    if (id === this.state.expandedTransactionId) {\n      this.setState({ expandedTransactionId: null })\n    } else {\n      this.setState({ expandedTransactionId: id })\n    }\n  }\n  closeForm = () => this.setState({ shownForm: null })\n\n  render() {\n    const { selectableCategories } = this.props\n    const { showTimeline } = this.state\n    if (!selectableCategories || !selectableCategories.length) {\n      return null\n    }\n    return (\n      <div style={{ maxWidth: '100%' }}>\n        <TransactionListAppBar toggleTimeline={this.toggleTimeline} showForm={this.showForm} />\n        <div\n          style={{\n            height: window.innerHeight - 70,\n            overflow: 'scroll',\n          }}\n        >\n          <Grid container>\n            {showTimeline ? (\n              <Grid item sm={3}>\n                <Timeline />\n              </Grid>\n            ) : null}\n            <Grid item sm={showTimeline ? 9 : 12}>\n              <div style={{ marginBottom: '20px' }}>\n                {this.state.shownForm === 'transaction' ? (\n                  <NewTransactionForm onClose={this.closeForm} />\n                ) : null}\n                {this.state.shownForm === 'statement' ? (\n                  <NewStatementForm onClose={this.closeForm} />\n                ) : null}\n                {this.state.shownForm === 'plaid' ? <NewPlaidForm origin=\"plaid\" /> : null}\n                {this.state.shownForm === 'wave' ? <NewPlaidForm origin=\"wave\" /> : null}\n              </div>\n              {this.props.transactions.map(t => (\n                <TransactionRow\n                  expanded={this.state.expandedTransactionId === t.id}\n                  key={t.id}\n                  transaction={t}\n                  onToggleExpansion={(event, expanded) => this.onToggleExpansion(t.id)}\n                />\n              ))}\n              <Button fullWidth size=\"large\" color=\"secondary\" onClick={this.loadMoreTransactions}>\n                ({this.props.transactions.length}) Click to Load More ...\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppState): PropsFromStore => {\n  return {\n    transactions: getVisibleTransactions(state),\n    selectableCategories: getSelectableCategories(state),\n  }\n}\n\nexport const TransactionList = connectButler(mapStateToProps)(TransactionListContainer)\n","import * as React from 'react'\n\nimport { Checkbox, List, ListItem, ListItemText } from '@material-ui/core'\n\nimport { ITreeNode } from '@src/types'\n\ninterface TreeProps {\n  root: ITreeNode\n}\nconst IdentedLineItemText: React.SFC<{ ident: number }> = props => {\n  const { ident, ...itemProps } = props\n  if (ident) {\n    return <ListItemText {...itemProps} style={{ paddingLeft: `${56 * ident}px` }} />\n  }\n  return <ListItemText {...itemProps} />\n}\n\nfunction getLevel(node: ITreeNode, level: number) {\n  return [\n    <ListItem key={node.id}>\n      <IdentedLineItemText ident={level}>\n        <Checkbox />\n        {node.id}\n      </IdentedLineItemText>\n    </ListItem>,\n    ...node.children.map(child => getLevel(child, level + 1)),\n  ]\n}\nexport class Tree extends React.Component<TreeProps> {\n  render() {\n    return (\n      <List>{(this.props.root.children.map(child => getLevel(child, 0)) as any).flat(1000)}</List>\n    )\n  }\n}\n","import { Card, Typography } from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { Tree } from '@src/components/Tree'\nimport { ICategory } from '@src/__generated__/backendSchemas'\n\ninterface StateProps {\n  categories: Array<ICategory>\n  iconChoices: Array<{\n    name: string\n    value: string\n  }>\n  CategoryTree: {}\n}\n\ntype CategoryListProps = StateProps\n\nclass CategoryList extends React.Component<CategoryListProps> {\n  render() {\n    return (\n      <div>\n        <Tree root={{ id: '1', children: [] }} />\n        <div>{this.props.categories.map(cat => this.getCard(cat))}</div>\n      </div>\n    )\n  }\n  onSelectIcon(category: ICategory, changes) {\n    /*\n    return this.props.actions.CategoryUpdate({\n      id: category.id,\n      mui_icon_id: changes.mui_icon_id,\n    })\n     */\n  }\n\n  getCard(cat: ICategory) {\n    const choices = this.props.iconChoices.map(i => {\n      return {\n        value: i.name,\n        mui_icon_id: i.value,\n        label: i.name,\n      }\n    })\n    return (\n      <Card key={cat.id}>\n        <Typography style={{ display: 'flex' }}>{cat.description}</Typography>\n        <SingleSelectField\n          style={{ flex: 1 }}\n          instance={cat}\n          choices={choices}\n          instancePropNameToUpdate=\"mui_icon_id\"\n          onChange={this.onSelectIcon.bind(this)}\n        />\n      </Card>\n    )\n  }\n}\n\nconst mapStateToProps = (state): StateProps => {\n  return {\n    categories: state.categories,\n    iconChoices: [],\n    CategoryTree: {},\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {}\n}\nexport const CategoryListPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CategoryList)\n","import { createBrowserHistory } from 'history'\nimport { UrlPathEnum } from '@src/types'\n\nexport const history = createBrowserHistory()\nexport const pushHistory = (\n  pathname: UrlPathEnum,\n  urlState?: {} | null,\n  state: {} | null = null,\n) => {\n  const searchString =\n    urlState && urlState && Object.keys(urlState).length\n      ? '?urlState=' + JSON.stringify(urlState)\n      : ''\n  return history.push({\n    pathname,\n    search: searchString,\n    state,\n  })\n}\n\nexport const getPathName = () => {\n  const path = history.location.pathname\n  return path.endsWith('/') ? path.slice(0, path.length - 1) || '/' : path\n}\n","import { List, ListItem, ListItemText } from '@material-ui/core'\nimport { Route, Switch } from 'react-router'\nimport { bindActionCreators } from 'redux'\nimport * as React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { connect } from 'react-redux'\nimport { CategoryListPage } from './CategoryListPage'\nimport { StateContext, UrlStateContext, ButlerContext } from './contexts'\nimport { BUTLER_ACTIONS, State, UrlPathEnum } from '@src/types'\nimport * as C from '@src/common'\nimport { getPathName, pushHistory } from '@src/history'\nimport { LoginPage } from '@src/LoginPage'\nimport { TransactionChart } from '@src/TransactionChart'\nimport { parseUrlState } from '@src/selectors'\nimport { TransactionList } from '@src/TransactionList'\n\ninterface StateProps {\n  isAuthenticated: boolean\n  urlState: any\n  state: State\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = StateProps & DispatchProps\n\nclass RootComponent extends React.Component<Prop, State> {\n  render() {\n    return (\n      <C.FlexContainer>\n        <div style={{ maxWidth: '100%', flex: 8 }}>\n          <StateContext.Provider value={this.props.state}>\n            <ButlerContext.Provider value={this.props.butler}>\n              <UrlStateContext.Provider value={this.props.urlState}>\n                <Body isAuthenticated={this.props.isAuthenticated} />\n              </UrlStateContext.Provider>\n            </ButlerContext.Provider>\n          </StateContext.Provider>\n        </div>\n      </C.FlexContainer>\n    )\n  }\n}\n\nexport const Root = connect<StateProps, DispatchProps>(\n  (state: State, ownProps) => {\n    return {\n      isAuthenticated: !!(state.authToken || sessionStorage.getItem('authToken')),\n      urlState: parseUrlState(),\n      state,\n    }\n  },\n  dispatch => ({\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }),\n)(RootComponent)\n\nconst PageList: React.FC = () => {\n  const UrlPathsMap = {\n    TransactionList,\n    TransactionChart,\n    CategoryListPage,\n  }\n  return (\n    <List>\n      {Object.keys(UrlPathsMap).map((c, index) => {\n        return (\n          <ListItem key={index} button onClick={() => pushHistory(c as UrlPathEnum)}>\n            <ListItemText primary={c} />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nclass Body extends React.Component<{ isAuthenticated: boolean }> {\n  render() {\n    if (getPathName() === UrlPathEnum.LoginPage) {\n      return <LoginPage />\n    }\n    if (!this.props.isAuthenticated) {\n      console.warn('not authenticated!!!')\n      pushHistory(UrlPathEnum.LoginPage)\n      return <div />\n    }\n    if (getPathName() === UrlPathEnum.Root) {\n      return <PageList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionList) {\n      return <TransactionList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionChart) {\n      return <TransactionChart />\n    }\n    if (getPathName() === UrlPathEnum.CategoryListPage) {\n      return <CategoryListPage />\n    }\n\n    throw new Error(`Invalid paths: ${getPathName()}`)\n  }\n}\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={Root} />\n  </Switch>\n))\n","import React from 'react'\n\nexport { default as styled } from 'styled-components'\nexport { default as PropTypes } from 'prop-types'\n\n// Material\nexport { default as IconButton } from '@material-ui/core/IconButton'\nexport { default as TextField } from '@material-ui/core/TextField'\nexport { Card, CardActions, CardHeader, CardMedia } from '@material-ui/core'\nexport { default as LinearProgress } from '@material-ui/core/LinearProgress'\n\nimport { Table as TRC } from '@material-ui/core'\n\nexport { SingleSelectField } from './components/SingleSelectField'\n\nexport const S = {\n  secondary: 'rgb(255, 64, 129)',\n  Card: {\n    margin: '5px',\n  },\n  CardContainer: {\n    paddingBottom: '5px',\n  },\n  Toolbar: {\n    height: '56px',\n    background: '#4285f4',\n  },\n\n  SmallFont: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  filterFonts: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  Body: {\n    background: '#f2f2f2',\n  },\n}\n\nexport const isWide = () => window.screen.availWidth > 800\n\nexport const TableRowColumn = props => {\n  const style = Object.assign(\n    {},\n    {\n      whiteSpace: 'normal',\n      textOverflow: 'initial',\n    },\n    props.style,\n  )\n  return <TRC {...props} style={style} />\n}\n\nexport const FlexContainer = props => {\n  const defaultStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n  const newStyle = Object.assign({}, defaultStyle, props.style)\n  const newProps = Object.assign({}, props, { style: newStyle })\n  return <div {...newProps} />\n}\n","import { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport * as React from 'react'\n\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { ButlerContext } from '@src/Root/contexts'\n\nexport const LoginPage = props => {\n  const butler = React.useContext(ButlerContext)\n  const [username, setUsername] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const submitLogin = () => {\n    butler.AuthenticateUser(\n      {\n        username: username,\n        password: password,\n      },\n      'replace',\n      data => {\n        sessionStorage.setItem('authToken', data.authToken)\n        // Redirect to root\n        pushHistory(UrlPathEnum.Root)\n      },\n    )\n  }\n  return (\n    <div\n      style={{\n        height: `${window.innerHeight}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <TextField label=\"Username\" onChange={e => setUsername(e.target.value)} />\n      <br />\n      <TextField\n        onChange={e => setPassword(e.target.value)}\n        type=\"password\"\n        label=\"Password\"\n        onKeyPress={e => {\n          if (e.charCode == 13) {\n            submitLogin()\n          }\n        }}\n      />\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={() => submitLogin()}>\n        Login\n      </Button>\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\nexport function stringToDate(dateString: string): Date {\n  const [year, month, day] = dateString.split('-').map(v => parseInt(v))\n  const ret = new Date(year, month - 1, day)\n  return ret\n}\nexport function formatDate(d: string): string {\n  const date = new Date(d)\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC',\n  })\n}\n\nexport const getIsoDateString = (d: Date) => {\n  const year = d.getFullYear()\n  const month = d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1\n  const day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport function getToday(): string {\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth() < 9 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n  const day = today.getDate() < 10 ? '0' + today.getDate() : today.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport interface Identifiable {\n  id: string | number\n}\nexport const mergeArrays = <T extends Identifiable>(\n  existing: Array<T>,\n  incoming: Array<T>,\n  prependOrAppend: 'prepend' | 'append',\n): Array<T> => {\n  return incoming.reduce(\n    function(accumulator: Array<T>, value: T) {\n      const index = existing.findIndex(x => x.id === value.id)\n      if (index >= 0) {\n        const ret = [\n          ...accumulator.slice(0, index),\n          value,\n          ...accumulator.slice(index + 1, accumulator.length),\n        ]\n        return ret\n      } else {\n        return prependOrAppend === 'append' ? [...accumulator, value] : [value, ...accumulator]\n      }\n    },\n    [...existing],\n  )\n}\nexport interface ButlerProps {\n  butler: typeof BUTLER_ACTIONS\n}\nconst mapDispatchToProps = (dispatch): ButlerProps => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\n\nexport const connectButler = <T extends {}>(stateMapper: ((state) => T) | null) => {\n  return connect<T, ButlerProps>(\n    stateMapper,\n    mapDispatchToProps,\n  )\n}\n","import * as React from 'react'\nimport { State, BUTLER_ACTIONS } from '@src/types'\nimport { initialState } from '@src/reducers'\n\nexport const UrlStateContext = React.createContext<any>({})\nexport const ButlerContext = React.createContext<typeof BUTLER_ACTIONS>(BUTLER_ACTIONS)\nexport const StateContext = React.createContext<State>(initialState)\n","/**\n * GENERATED CODE. DO NOT EDIT !!!\"\n */\nexport interface ArchiveTransaction__Request {\n  id: number\n}\nexport interface AuthenticateUserRequest {\n  username: string\n  password: string\n}\nexport interface AuthenticateUserResponse {\n  errors: {}\n  authToken: string\n}\nexport interface CreateTransaction__Request {\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  merchant: string\n  balance_adjust?: string\n}\nexport enum EnumRoute {\n  ListTransactions = 'ListTransactions',\n  AuthenticateUser = 'AuthenticateUser',\n  ListCategories = 'ListCategories',\n  ListEvents = 'ListEvents',\n  GetUserBalance = 'GetUserBalance',\n  UpdateTransaction = 'UpdateTransaction',\n  GetIncomeExpenseReport = 'GetIncomeExpenseReport',\n  GetExpenseReport = 'GetExpenseReport',\n  UploadStatement = 'UploadStatement',\n  ImportFromPlaid = 'ImportFromPlaid',\n  ImportFromWave = 'ImportFromWave',\n  SignCheckPoint = 'SignCheckPoint',\n  CreateTransaction = 'CreateTransaction',\n  ArchiveTransaction = 'ArchiveTransaction',\n}\nexport interface GetExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetIncomeExpenseReportResponse {\n  chart_data: {}\n}\nexport interface GetIncomeExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetUserBalanceRequest {}\nexport interface GetUserBalanceResponse {\n  balance: string\n  user_id: number\n}\nexport interface ITreeNode {\n  id: string\n  children: Array<ITreeNode>\n}\nexport interface ImportFromPlaidRequest {\n  start_date: string\n  end_date: string\n}\nexport interface IPlaidAccount {\n  account_id: string\n  name: string\n  type: string\n  subtype: string\n  mask: string\n}\nexport interface IPlaidTransaction {\n  account_id: string\n  account: IPlaidAccount\n  amount: number\n  category: Array<string>\n  category_id: string\n  date: string\n  iso_currency_code: string\n  name: string\n  pending: boolean\n  transaction_id: string\n  transaction_type: string\n}\nexport interface IWaveTransaction {\n  anchor_account_name: string\n  date_created: string\n  direction: string\n  transaction_description: string\n  transaction_date: string\n  transaction_id: string\n  transaction_amount: string\n}\nexport interface IPrediction {\n  category_id: number\n  category_name: string\n  split: boolean\n}\nexport interface IUserTransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  lender_id: number\n  plaid_category: string | null\n  editable: boolean\n  prediction: IPrediction | null\n}\nexport interface ImportFromPlaidResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ImportFromWaveRequest {\n  start_date: string\n  end_date: string\n}\nexport interface ImportFromWaveResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ListCategoriesRequest {}\nexport interface ICategory {\n  id: number\n  description: string\n  name: string\n  parent_id: number | null\n  mui_icon_id: string\n  is_selectable: boolean\n}\nexport interface ListCategoriesResponse {\n  categories: Array<ICategory>\n}\nexport interface ListEventsRequest {}\nexport enum EventType {\n  CHECKPOINT = 'CHECKPOINT',\n  STATEMENT_UPLOAD = 'STATEMENT_UPLOAD',\n  BATCH_IMPORT = 'BATCH_IMPORT',\n}\nexport interface ICheckPoint {\n  id: number\n  group_id: number\n  signed_ts: string | null\n  signed_by: number | null\n  signed_balance: string | null\n  updated_ts: string\n  created_ts: string\n  created_by: number\n  event_type?: EventType\n}\nexport interface IStatement {\n  id: number\n  source: string\n  user_id: string\n  created_ts: number\n  first_date: string\n  last_date: string\n  notes: string\n  is_processed: boolean\n  event_type?: EventType\n}\nexport interface IImportBatch {\n  id: number\n  origin: string\n  user_id: string\n  created_ts: number\n  start_date: string\n  end_date: string\n  event_type?: EventType\n}\nexport interface ListEventsResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface ListTransactionsRequest {\n  start?: number\n  end?: number\n  event_id?: string\n  search_text?: string\n}\nexport interface ListTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface SignCheckPointRequest {\n  id: number\n}\nexport interface SignCheckPointResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface UpdateTransactionRequest {\n  id: number\n  issued_date?: string | null\n  notes?: string | null\n  category_id?: number | null\n  balance_adjust?: string\n}\nexport interface UpdateTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport enum EnumStatementSource {\n  PC_MASTER = 'PC_MASTER',\n  SCOTIA_MASTER = 'SCOTIA_MASTER',\n  VISA = 'VISA',\n  CHEQUE = 'CHEQUE',\n}\nexport interface UploadStatementRequest {\n  source: EnumStatementSource\n  content: string\n}\nexport interface ITransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  lender_id: number\n  plaid_category: string | null\n}\nexport interface UploadStatementResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n  transactions: Array<ITransaction>\n  duplicates: Array<ITransaction>\n}\n\nexport type UpdateType = 'replace' | 'do-nothing' | 'merge-append' | 'remove'\nconst ListTransactions = (\n  data: ListTransactionsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListTransactions,\n      route: EnumRoute.ListTransactions,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst AuthenticateUser = (\n  data: AuthenticateUserRequest,\n  updateType: UpdateType,\n  successCallback?: (data: AuthenticateUserResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.AuthenticateUser,\n      route: EnumRoute.AuthenticateUser,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListCategories = (\n  data: ListCategoriesRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListCategoriesResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListCategories,\n      route: EnumRoute.ListCategories,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListEvents = (\n  data: ListEventsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListEventsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListEvents,\n      route: EnumRoute.ListEvents,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetUserBalance = (\n  data: GetUserBalanceRequest,\n  updateType: UpdateType,\n  successCallback?: (data: GetUserBalanceResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetUserBalance,\n      route: EnumRoute.GetUserBalance,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UpdateTransaction = (\n  data: UpdateTransactionRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UpdateTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UpdateTransaction,\n      route: EnumRoute.UpdateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetIncomeExpenseReport = (\n  data: GetIncomeExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetIncomeExpenseReport,\n      route: EnumRoute.GetIncomeExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetExpenseReport = (\n  data: GetExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetExpenseReport,\n      route: EnumRoute.GetExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UploadStatement = (\n  data: UploadStatementRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UploadStatementResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UploadStatement,\n      route: EnumRoute.UploadStatement,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromPlaid = (\n  data: ImportFromPlaidRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromPlaidResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromPlaid,\n      route: EnumRoute.ImportFromPlaid,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromWave = (\n  data: ImportFromWaveRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromWaveResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromWave,\n      route: EnumRoute.ImportFromWave,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst SignCheckPoint = (\n  data: SignCheckPointRequest,\n  updateType: UpdateType,\n  successCallback?: (data: SignCheckPointResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.SignCheckPoint,\n      route: EnumRoute.SignCheckPoint,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst CreateTransaction = (\n  data: CreateTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.CreateTransaction,\n      route: EnumRoute.CreateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ArchiveTransaction = (\n  data: ArchiveTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ArchiveTransaction,\n      route: EnumRoute.ArchiveTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nexport const BUTLER_ACTIONS = {\n  ListTransactions,\n\n  AuthenticateUser,\n\n  ListCategories,\n\n  ListEvents,\n\n  GetUserBalance,\n\n  UpdateTransaction,\n\n  GetIncomeExpenseReport,\n\n  GetExpenseReport,\n\n  UploadStatement,\n\n  ImportFromPlaid,\n\n  ImportFromWave,\n\n  SignCheckPoint,\n\n  CreateTransaction,\n\n  ArchiveTransaction,\n}\n","import querystring from 'querystring'\nimport { history } from '@src/history'\nimport { IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { State } from '@src/types'\n\nexport function getSelectableCategories(state: State) {\n  return state.categories.filter(x => x.is_selectable)\n}\n\nexport function getSnack(state: State) {\n  if (!state.snacks.length) {\n    return ''\n  }\n  return state.snacks[0]\n}\n\nexport function getVisibleTransactions(state): Array<IUserTransaction> {\n  return state.transactions || []\n}\n\nexport function parseUrlState() {\n  const params = parseSearch()\n  if (params && params.urlState) {\n    return JSON.parse(params.urlState as string)\n  }\n  return {}\n}\nexport function parseSearch() {\n  return querystring.parse(history.location.search.split('?')[1])\n}\n\nexport const getAuthToken = (state: State) =>\n  state.authToken || sessionStorage.getItem('authToken') || ''\n","import { Button, Dialog, DialogContent, DialogTitle, Icon } from '@material-ui/core'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { Autocomplete } from 'rice-instructor'\n\ninterface Prop {\n  instancePropNameToUpdate: string\n  choices: Array<{\n    value: string | number\n    mui_icon_id?: string\n    label: string\n  }>\n  instance: {}\n  onChange: (instance, changes) => void\n  style?: any\n  defaultValue?: string\n}\n\nexport class SingleSelectField extends React.Component<Prop, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      openDialog: false,\n    }\n  }\n\n  getInitialOption = () => {\n    const value = _.get(this.props.instance, this.props.instancePropNameToUpdate, null)\n\n    if (!value) return null\n    const option = this.props.choices.find(x => x.value === value)\n    if (!option) {\n      throw new Error(`${value} not found `)\n    }\n\n    return option\n  }\n\n  openDialog = e => {\n    this.setState({ openDialog: true })\n  }\n  closeDialog = () => {\n    this.setState({ openDialog: false })\n  }\n  onSelectOption = selectedOption => {\n    const { onChange, instance, instancePropNameToUpdate } = this.props\n    onChange(instance, {\n      [instancePropNameToUpdate]: selectedOption.value,\n    })\n    this.closeDialog()\n  }\n\n  render() {\n    const { choices } = this.props\n    const initialOption = this.getInitialOption()\n    return (\n      <div>\n        <Button onClick={this.openDialog} variant=\"outlined\" color=\"primary\">\n          {initialOption ? (\n            <Icon style={{ marginRight: '5px' }}>{initialOption.mui_icon_id}</Icon>\n          ) : null}\n          {initialOption ? initialOption.label : 'Select A Category'}\n        </Button>\n        <Dialog open={this.state.openDialog} fullWidth onClose={this.closeDialog}>\n          <DialogTitle>Select a category</DialogTitle>\n          <DialogContent>\n            <Autocomplete\n              onSelectOption={this.onSelectOption}\n              defaultValue={initialOption ? initialOption.value : undefined}\n              placeholder=\"Select a category\"\n              options={choices}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    )\n  }\n}\n","import { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport { apiMiddleware } from './middleware'\nimport reducers from './reducers'\n\nexport const configureStore = (initialState?) => {\n  let middleware = applyMiddleware(thunk, apiMiddleware, logger())\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware)\n  }\n  const store = createStore(reducers, initialState, middleware)\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers')\n      store.replaceReducer(nextReducer)\n    })\n  }\n  return store\n}\n","import { Middleware } from 'redux'\nimport { callButlerApi } from './actions'\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { EnumRoute } from '@src/__generated__/backendSchemas'\n\nexport const apiMiddleware: Middleware = store => next => action => {\n  if (action && EnumRoute[action.type]) {\n    callButlerApi({\n      endpoint: action.route,\n      jsonBody: action.data,\n      authToken: sessionStorage.getItem('authToken') || store.getState().authToken || '',\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          store.dispatch({\n            type: `BUTLER_ANSWERED`,\n            updateType: action.updateType,\n            response: data,\n          })\n          if (action.successCallback) {\n            action.successCallback(data)\n          }\n        })\n      } else if (response.status === 401) {\n        sessionStorage.removeItem('jwt')\n        pushHistory(UrlPathEnum.LoginPage)\n      }\n    })\n  }\n\n  return next(action)\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router'\nimport { history } from './history'\n\nimport { configureStore } from './configureStore'\nimport { App } from '@src/Root'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}