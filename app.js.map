{"version":3,"sources":["webpack:///./types/index.ts","webpack:///./actions.ts","webpack:///./reducers.ts","webpack:///./Root/contexts.ts","webpack:///./history.ts","webpack:///./TransactionChart.tsx","webpack:///./TransactionList/NewPlaidForm.tsx","webpack:///./components/FileUploadButton.tsx","webpack:///./TransactionList/NewStatementForm.tsx","webpack:///./components/DialogSelect.tsx","webpack:///./TransactionList/NewTransactionForm.tsx","webpack:///./Root/SearchBar.tsx","webpack:///./TransactionList/TransactionListAppBar.tsx","webpack:///./TransactionList/SmartCatField.tsx","webpack:///./TransactionList/CategoryField.tsx","webpack:///./components/DebouncedTextField.tsx","webpack:///./components/icons.tsx","webpack:///./TransactionList/TransactionRow.tsx","webpack:///./Root/Timeline/EventRow.tsx","webpack:///./Root/Timeline/utils.ts","webpack:///./Root/Timeline/index.tsx","webpack:///./TransactionList/index.tsx","webpack:///./components/IconSelect.tsx","webpack:///./CategoryPage/Tree.tsx","webpack:///./CategoryPage/index.tsx","webpack:///./utils.ts","webpack:///./Root/index.tsx","webpack:///./LoginPage.tsx","webpack:///./__generated__/backendSchemas.ts","webpack:///./selectors.ts","webpack:///./configureStore.tsx","webpack:///./middleware.ts","webpack:///./main.tsx"],"names":["__webpack_require__","d","__webpack_exports__","UrlPathEnum","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_0__","BASE_URL","callButlerApi","window","location","protocol","hostname","port","BASE_API_URL","request","url","endpoint","jwt","authToken","fetch","method","body","JSON","stringify","jsonBody","headers","Content-Type","X-Requested-With","Authorization","initialState","redux_actions__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","redux__WEBPACK_IMPORTED_MODULE_2__","_src_utils__WEBPACK_IMPORTED_MODULE_3__","balance","user_id","events","categories","isAuthenticated","snacks","transactions","handlers","state","action","hasOwnProperty","type","createReducer","EAT_SNACK","slice","ADD_SNACK","concat","snack","createButlerReducer","partialState","sortBy","Object","response","updateType","filter","item","find","deleted","id","ret","Error","reducers","transaction","issued_date","e","Date","created_ts","getTime","UrlStateContext","ButlerContext","StateContext","react__WEBPACK_IMPORTED_MODULE_0__","_src_types__WEBPACK_IMPORTED_MODULE_1__","_src_reducers__WEBPACK_IMPORTED_MODULE_2__","history","pushHistory","getPathName","history__WEBPACK_IMPORTED_MODULE_0__","pathname","urlState","searchString","keys","length","push","search","path","endsWith","highcharts_data__WEBPACK_IMPORTED_MODULE_3___default","react_highcharts__WEBPACK_IMPORTED_MODULE_6___default","a","Highcharts","highcharts_drilldown__WEBPACK_IMPORTED_MODULE_4___default","getChartConfig","_a","chart","title","text","xAxis","yAxis","min","align","labels","overflow","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","column","allowPointSelect","click","onClickColumn","legend","layout","verticalAlign","x","y","floating","borderWidth","shadow","credits","TransactionChartComponent","_super","props","_this","call","this","onChangeReportType","showReport","target","value","config","bind","reportTitle","report_type","initialReportType","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","console","log","getReportTitle","today","threeMonthAgo","setDate","getDate","apiName","butler","start_date","_src_utils__WEBPACK_IMPORTED_MODULE_10__","end_date","res","titled","updeep__WEBPACK_IMPORTED_MODULE_9___default","assign","chart_data","setState","react__WEBPACK_IMPORTED_MODULE_5__","componentDidMount","render","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","onChange","_material_ui_core__WEBPACK_IMPORTED_MODULE_2__","TransactionChart","react_redux__WEBPACK_IMPORTED_MODULE_7__","dispatch","redux__WEBPACK_IMPORTED_MODULE_8__","_src_types__WEBPACK_IMPORTED_MODULE_11__","toISOString","NewPlaidForm_NewPlaidFormComponent","NewPlaidFormComponent","apply","arguments","importTransactions","origin","ImportFromPlaid","ImportFromWave","setStartDate","setEndDate","tslib_es6","react","Grid","container","xs","TextField","label","defaultValue","Button","onClick","style","marginTop","color","variant","NewPlaidForm","es","redux","backendSchemas","FileUploadButton_FileUploadButton","FileUploadButton","onFileInputChange","event","file","files","reader","FileReader","addEventListener","submitFileContent","result","readAsText","button","component","hidden","ref","fileInput","htmlFor","NewStatementForm_StatementFormContainer","StatementFormContainer","selectedSource","CHEQUE","onSelectType","content","UploadStatement","source","paddingTop","ExpansionPanel","expanded","ExpansionPanelSummary","spacing","sm","Select","map","c","MenuItem","key","Divider","ExpansionPanelActions","size","onClose","NewStatementForm","DialogSelect","choices","onSelectOption","isOpen","setIsOpen","initialOption","option","getInitialOption","Icon","marginRight","mui_icon_id","Dialog","open","fullWidth","DialogTitle","DialogContent","rice_instructor","opt","undefined","placeholder","options","fieldConfig","required","merchant","notes","category_id","balance_adjust","total_amount","FieldInput","fieldName","updateField","instance","error","initialForm","utils","NewTransactionForm","t","selectableCategories","formData","setFormData","contexts","old","newState","cat","description","CreateTransaction","data","disabled","every","Boolean","SearchBar_SearchBarComponent","SearchBarComponent","anchorEl","debounced","lodash","newValue","ListTransactions","search_text","history_0","types","TransactionList","onFocus","currentTarget","handleClose","onSearch","icon","InputAdornment","position","Search","InputProps","startAdornment","Menu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","suggestions","sug","index","SearchBar","ownProps","TransactionListAppBar","GetUserBalance","AppBar","Toolbar","Tooltip","IconButton","toggleTimeline","History","Typography","flex","Add","showForm","ListItemIcon","AttachMoney","ListItemText","CreditCard","Waves","GridOn","sessionStorage","removeItem","href","className","SmartCatField","prediction","onAccept","split","fontWeight","category_name","Check","Close","CategoryField","UpdateTransaction","DebouncedTextField","helperText","setter","onBounce","icons_PlaidIcon","PlaidIcon","float","CategoryInfoField","category","multiplier","lender_id","parseFloat","toString","TransactionRow","selectors","onToggleExpansion","balanceAdjust","setBalanceAdjust","editable","fields","origin_payload","lib_default","shouldExpandNode","account_name","plaid_category","paddingLeft","ExpansionPanelDetails","textAlign","Fab","aria-label","ArchiveTransaction","Delete","last","next","EventRow","event_id","event_type","CHECKPOINT","CheckpointListItem","checkpoint","eventIcon","BATCH_IMPORT","plaid","wave","STATEMENT_UPLOAD","getEventIcon","eventButtonIcon","getEventButtonIcon","ListItem","selected","start","end","toLocaleDateString","signed_ts","signed_balance","batch_import","upload","first_date","last_date","getEventDescription","ListItemSecondaryAction","ButtonGroup","SignCheckPoint","actions","Timeline","ListEvents","List","showTimeline","setShowTimeline","_b","formType","setFormType","_c","setExpanded","loadMoreTransactions","ListCategories","maxWidth","height","innerHeight","marginBottom","ICON_IDS","IconSelect","initialValue","iconId","useStyles","makeStyles","theme","createStyles","node","width","backgroundColor","palette","background","paper","Tree","level","onSelectIcon","onSaveNode","classes","setOpen","primary","name","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","disablePadding","children","child","NodeListItem","setEditable","pickingIcon","setPickingIcon","_d","nodeName","setNodeName","_e","setIconId","dense","role","autoFocus","onBlur","edge","CategoryPage","root","setRoot","TreefyCategories","UpdateCategory","formatDate","getIsoDateString","getToday","mergeArrays","connectButler","react_redux__WEBPACK_IMPORTED_MODULE_0__","redux__WEBPACK_IMPORTED_MODULE_1__","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_2__","month","day","timeZone","getFullYear","getMonth","existing","incoming","prependOrAppend","reduce","accumulator","findIndex","mapDispatchToProps","stateMapper","RootComponent","react__WEBPACK_IMPORTED_MODULE_6__","_contexts__WEBPACK_IMPORTED_MODULE_9__","Provider","Body","Root","react_redux__WEBPACK_IMPORTED_MODULE_8__","getItem","_src_selectors__WEBPACK_IMPORTED_MODULE_15__","redux__WEBPACK_IMPORTED_MODULE_5__","PageList","UrlPathsMap","_src_TransactionList__WEBPACK_IMPORTED_MODULE_16__","_src_TransactionChart__WEBPACK_IMPORTED_MODULE_14__","_src_CategoryPage__WEBPACK_IMPORTED_MODULE_10__","_src_history__WEBPACK_IMPORTED_MODULE_12__","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","LoginPage","_src_LoginPage__WEBPACK_IMPORTED_MODULE_13__","warn","App","react_hot_loader__WEBPACK_IMPORTED_MODULE_7__","module","react_router__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core__WEBPACK_IMPORTED_MODULE_0__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","_src_history__WEBPACK_IMPORTED_MODULE_3__","_src_types__WEBPACK_IMPORTED_MODULE_4__","_src_Root_contexts__WEBPACK_IMPORTED_MODULE_5__","username","setUsername","password","setPassword","submitLogin","AuthenticateUser","setItem","display","alignItems","justifyContent","flexDirection","onKeyPress","charCode","EnumRoute","EventType","EnumStatementSource","BUTLER_ACTIONS","successCallback","route","GetIncomeExpenseReport","GetExpenseReport","getSelectableCategories","getVisibleTransactions","parseUrlState","getAuthToken","querystring__WEBPACK_IMPORTED_MODULE_0__","querystring__WEBPACK_IMPORTED_MODULE_0___default","n","_src_history__WEBPACK_IMPORTED_MODULE_1__","is_selectable","params","parse","middleware","apiMiddleware","store","getState","then","ok","json","status","main_store","redux_thunk_es","react_dom","react_router","document","getElementById"],"mappings":"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","file":"app.js","sourcesContent":["import { ACTIONS as actionCreators } from '@src/actions'\nimport {\n  ICheckPoint,\n  IStatement,\n  IImportBatch,\n  IUserTransaction,\n  ICategory,\n} from '@src/__generated__/backendSchemas'\n\nexport * from '@src/__generated__/backendSchemas'\n\nexport type IEvent = ICheckPoint | IStatement | IImportBatch\n\nexport interface State {\n  user_id: number\n  balance: string\n  events: Array<IEvent>\n  categories: Array<ICategory>\n  authToken: string | null\n  isAuthenticated: boolean\n  transactions: Array<IUserTransaction>\n  router?: any\n  snacks: Array<string>\n}\n\nexport type ActionType = typeof actionCreators\n\nexport enum UrlPathEnum {\n  Root = '/',\n  LoginPage = '/LoginPage',\n  TransactionList = '/TransactionList',\n  TransactionChart = '/TransactionChart',\n  CategoryPage = '/CategoryPage',\n}\n","export function addSnack(message: string) {\n  return {\n    type: 'ADD_SNACK',\n    snack: message,\n  }\n}\n\nexport function eatSnack() {\n  return {\n    type: 'EAT_SNACK',\n  }\n}\n\nexport const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${\n  window.location.port ? '8000' : ''\n}`\nexport const BASE_API_URL = `${BASE_URL}/api2`\n\nexport function callButlerApi(request: { endpoint: string; jsonBody: {}; authToken: string }) {\n  const url = `${BASE_API_URL}/${request.endpoint}/`\n  const jwt = request.authToken\n\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(request.jsonBody),\n    // credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n      Authorization: jwt ? `JWT ${jwt}` : '',\n    },\n  })\n}\n\nexport const ACTIONS = {\n  eatSnack,\n  addSnack,\n}\n","import { handleAction } from 'redux-actions'\nimport * as _ from 'lodash'\nimport { combineReducers } from 'redux'\nimport { State } from '@src/types'\nimport { mergeArrays } from '@src/utils'\n\nexport const initialState: State = {\n  balance: '',\n  user_id: 0,\n  events: [],\n  categories: [],\n  authToken: null,\n  isAuthenticated: false,\n  snacks: [],\n  transactions: [],\n}\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n\nconst snacks = createReducer(initialState.snacks, {\n  EAT_SNACK: snacks => [...snacks.slice(1)],\n  ADD_SNACK: (snacks, action) => [...snacks, action.snack],\n})\n\nconst createButlerReducer = (partialState: keyof State, initialState, sortBy?: (a) => number) => {\n  return handleAction(\n    `BUTLER_ANSWERED`,\n    (state, action: any) => {\n      if (!action.response[partialState]) {\n        return state\n      }\n      if (action.updateType === 'replace') {\n        return action.response[partialState]\n      } else if (action.updateType === 'do-nothing') {\n        return state\n      } else if (action.updateType === 'remove') {\n        return [...state].filter(\n          item => !action.response[partialState].find(deleted => deleted.id === item.id),\n        )\n      } else if (action.updateType === 'merge-append') {\n        const ret = mergeArrays(state, action.response[partialState], 'append')\n        if (sortBy) {\n          return _.sortBy(ret, sortBy)\n        }\n        return ret\n      } else {\n        throw new Error('not handled')\n      }\n    },\n    initialState,\n  )\n}\n\nconst reducers = combineReducers({\n  snacks,\n  transactions: createButlerReducer('transactions', initialState.transactions, transaction => {\n    return -1 * transaction.issued_date\n  }),\n  authToken: createButlerReducer('authToken', initialState.authToken),\n  categories: createButlerReducer('categories', initialState.categories),\n  events: createButlerReducer('events', initialState.events, e => {\n    return -1 * new Date(e.created_ts).getTime()\n  }),\n  balance: createButlerReducer('balance', initialState.balance),\n  user_id: createButlerReducer('user_id', initialState.balance),\n})\n\nexport default reducers\n","import * as React from 'react'\nimport { State, BUTLER_ACTIONS } from '@src/types'\nimport { initialState } from '@src/reducers'\n\nexport const UrlStateContext = React.createContext<any>({})\nexport const ButlerContext = React.createContext<typeof BUTLER_ACTIONS>(BUTLER_ACTIONS)\nexport const StateContext = React.createContext<State>(initialState)\n","import { createBrowserHistory } from 'history'\nimport { UrlPathEnum } from '@src/types'\n\nexport const history = createBrowserHistory()\nexport const pushHistory = (\n  pathname: UrlPathEnum,\n  urlState?: {} | null,\n  state: {} | null = null,\n) => {\n  const searchString =\n    urlState && urlState && Object.keys(urlState).length\n      ? '?urlState=' + JSON.stringify(urlState)\n      : ''\n  return history.push({\n    pathname,\n    search: searchString,\n    state,\n  })\n}\n\nexport const getPathName = () => {\n  const path = history.location.pathname\n  return path.endsWith('/') ? path.slice(0, path.length - 1) || '/' : path\n}\n","import { MenuItem, Select } from '@material-ui/core'\n// import { parseUrlState } from '@src/selectors'\nimport HighchartsData from 'highcharts-data'\nimport HighchartsDrilldown from 'highcharts-drilldown'\nimport * as React from 'react'\nimport Highchart from 'react-highcharts'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport u from 'updeep'\nimport { getIsoDateString } from '@src/utils'\nimport { BUTLER_ACTIONS } from '@src/types'\n\nHighchartsData(Highchart.Highcharts)\nHighchartsDrilldown(Highchart.Highcharts)\n\ntype ReportType = 'INCOME_EXPENSE' | 'EXPENSE'\n\nconst getChartConfig = ({ onClickColumn }) => {\n  return {\n    chart: {\n      type: 'column',\n      //height: 800,\n      //width: 800\n    },\n    title: {\n      text: 'Income/Expense Report',\n    },\n    xAxis: {\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Spend',\n        align: 'high',\n      },\n      labels: {\n        overflow: 'justify',\n      },\n    },\n    tooltip: {\n      valueSuffix: ' dollars',\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true,\n        },\n      },\n      column: {\n        dataLabels: {\n          enabled: true,\n        },\n        allowPointSelect: false,\n        events: {\n          click: onClickColumn,\n        },\n      },\n    },\n    legend: {\n      enabled: true,\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      shadow: true,\n    },\n    credits: {\n      enabled: false,\n    },\n  }\n}\ninterface Prop {\n  butler: typeof BUTLER_ACTIONS\n  initialReportType: string\n}\n\ninterface State {\n  config: any\n  reportTitle: string\n  chart: any\n  report_type: ReportType\n}\n\nclass TransactionChartComponent extends React.Component<Prop, State> {\n  constructor(props) {\n    super(props)\n    const config = getChartConfig({\n      onClickColumn: this.onClickColumn.bind(this),\n    })\n    this.state = {\n      config,\n      chart: null,\n      reportTitle: '',\n      report_type: props.initialReportType,\n    }\n  }\n\n  onClickColumn(e) {\n    if (this.state.report_type === 'INCOME_EXPENSE') {\n      return console.log(e)\n    }\n  }\n\n  getReportTitle(value) {\n    return value == 'INCOME_EXPENSE' ? 'Income/Expense Report' : 'Expense Report'\n  }\n\n  onChangeReportType = e => {\n    this.showReport(e.target.value)\n  }\n\n  showReport(report_type: ReportType) {\n    const today = new Date()\n    const threeMonthAgo = new Date()\n    threeMonthAgo.setDate(threeMonthAgo.getDate() - 180)\n    const apiName = report_type === 'INCOME_EXPENSE' ? 'GetIncomeExpenseReport' : 'GetExpenseReport'\n    this.props.butler[apiName](\n      { start_date: getIsoDateString(threeMonthAgo), end_date: getIsoDateString(today) },\n      'do-nothing',\n      res => {\n        const titled = u(\n          {\n            title: {\n              text: this.getReportTitle(report_type),\n            },\n          },\n          this.state.config,\n        )\n        const config = Object.assign({}, titled, res.chart_data)\n        this.setState({ chart: <Highchart config={config} /> })\n        this.setState({ report_type, config })\n      },\n    )\n  }\n\n  componentDidMount() {\n    this.showReport(this.state.report_type)\n  }\n\n  render() {\n    if (!this.state.config) {\n      return <p>Loading ...</p>\n    }\n    return (\n      <div>\n        <Select value={this.state.report_type} onChange={this.onChangeReportType}>\n          <MenuItem value={'INCOME_EXPENSE'}>Income/Expense</MenuItem>\n          <MenuItem value={'EXPENSE'}>Expense</MenuItem>\n        </Select>\n        <p>{this.state.reportTitle}</p>\n        {this.state.chart}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const TransactionChart = connect(\n  null,\n  mapDispatchToProps,\n)(TransactionChartComponent)\n","import { Button, Grid, TextField } from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ninterface OwnProps {\n  origin: 'plaid' | 'wave'\n}\n\ntype FinalProps = OwnProps & DispatchProps\nconst today = new Date().toISOString().slice(0, 10)\n\nexport class NewPlaidFormComponent extends React.Component<\n  FinalProps,\n  { start_date: string; end_date: string }\n> {\n  state = { start_date: today, end_date: today }\n\n  importTransactions = () => {\n    if (this.props.origin === 'plaid') {\n      this.props.butler.ImportFromPlaid(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    } else {\n      this.props.butler.ImportFromWave(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  setStartDate = e => {\n    this.setState({ start_date: e.target.value })\n  }\n  setEndDate = e => {\n    this.setState({ end_date: e.target.value })\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item xs={4}>\n          <TextField\n            type=\"date\"\n            label=\"from\"\n            value={this.state.start_date}\n            onChange={this.setStartDate}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField type=\"date\" label=\"to\" defaultValue={today} onChange={this.setEndDate} />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            onClick={this.importTransactions}\n            style={{ marginTop: '10px' }}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Import\n          </Button>\n        </Grid>\n      </Grid>\n    )\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewPlaidForm = connect<{}, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(NewPlaidFormComponent)\n","import { Button } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface Prop {\n  submitFileContent: (content: string | ArrayBuffer | null) => void\n  button?: React.ReactElement<any>\n}\nexport class FileUploadButton extends React.Component<Prop, any> {\n  fileInput: any\n\n  onFileInputChange = event => {\n    const file = event.target.files[0]\n    const reader = new FileReader()\n\n    const callback = () => this.props.submitFileContent(reader.result)\n    reader.addEventListener('load', callback, false)\n    if (file) {\n      reader.readAsText(file)\n    }\n  }\n\n  render() {\n    const button = this.props.button || (\n      <Button variant=\"outlined\" component=\"span\">\n        Upload\n      </Button>\n    )\n    return (\n      <div>\n        <input\n          id=\"file-upload-form\"\n          hidden\n          ref={ref => (this.fileInput = ref)}\n          onChange={this.onFileInputChange}\n          type=\"file\"\n        />\n        <label htmlFor=\"file-upload-form\">{button}</label>\n      </div>\n    )\n  }\n}\n","import {\n  Select,\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  MenuItem,\n} from '@material-ui/core'\n\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { FileUploadButton } from '../components/FileUploadButton'\nimport { BUTLER_ACTIONS, EnumStatementSource } from '@src/__generated__/backendSchemas'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = OwnProps & DispatchProps\n\ninterface State {\n  selectedSource: EnumStatementSource\n}\n\nexport class StatementFormContainer extends React.Component<Prop, State> {\n  state = {\n    selectedSource: EnumStatementSource.CHEQUE,\n  }\n\n  onSelectType = event => {\n    this.setState({ selectedSource: event.target.value })\n  }\n\n  submitFileContent = (content: string) => {\n    console.log(content)\n    if (this.state.selectedSource.length && content) {\n      this.props.butler.UploadStatement(\n        {\n          source: this.state.selectedSource,\n          content: content,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  render() {\n    const choices = ['CHEQUE', 'PC_MASTER', 'SCOTIA_MASTER', 'VISA']\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <Select value={this.state.selectedSource} onChange={this.onSelectType}>\n                  {choices.map(c => {\n                    return (\n                      <MenuItem key={c} value={c}>\n                        {c}\n                      </MenuItem>\n                    )\n                  })}\n                </Select>\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FileUploadButton submitFileContent={this.submitFileContent} />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewStatementForm = connect<OwnProps, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(StatementFormContainer)\n","import { Button, Dialog, DialogContent, DialogTitle, Icon } from '@material-ui/core'\n\nimport * as React from 'react'\n\nimport { Autocomplete } from 'rice-instructor'\n\ninterface DialogSelectProps {\n  choices: Array<{\n    value: string | number\n    mui_icon_id?: string\n    label: string\n  }>\n  onSelectOption: (option) => void\n  value: string | null | number\n}\nconst getInitialOption = (\n  value: string | number | null,\n  choices: Array<{\n    value: string | number\n    mui_icon_id?: string\n    label: string\n  }>,\n) => {\n  if (!value) return null\n  const option = choices.find(x => x.value === value)\n  if (!option) {\n    console.log(choices)\n    throw new Error(`${value} not found `)\n  }\n\n  return option\n}\nexport const DialogSelect = (props: DialogSelectProps) => {\n  const { choices, value, onSelectOption } = props\n  const [isOpen, setIsOpen] = React.useState(false)\n  const initialOption = getInitialOption(value, choices)\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)} variant=\"outlined\" color=\"primary\">\n        {initialOption ? (\n          <Icon style={{ marginRight: '5px' }}>{initialOption.mui_icon_id}</Icon>\n        ) : null}\n        {initialOption ? initialOption.label : 'Select a Category'}\n      </Button>\n      <Dialog open={isOpen} fullWidth onClose={() => setIsOpen(false)}>\n        <DialogTitle>Select a Category</DialogTitle>\n        <DialogContent>\n          <Autocomplete\n            onSelectOption={opt => {\n              onSelectOption(opt)\n              setIsOpen(false)\n            }}\n            defaultValue={initialOption ? initialOption.value : undefined}\n            placeholder=\"Select a category\"\n            options={choices}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","import {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  TextField,\n} from '@material-ui/core'\nimport * as React from 'react'\nimport { DialogSelect } from '@src/components/DialogSelect'\nimport { CreateTransaction__Request } from '@src/types'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport { getToday } from '@src/utils'\n\ninterface NewTransactionFormProps {\n  onClose: () => void\n  selectableCategories: Array<ICategory>\n}\n\ntype FieldName =\n  | 'issued_date'\n  | 'merchant'\n  | 'notes'\n  | 'category_id'\n  | 'total_amount'\n  | 'balance_adjust'\n\nconst fieldConfig = {\n  issued_date: { type: 'date', required: true },\n  merchant: { type: 'text', required: true },\n  notes: { type: 'text', required: false },\n  category_id: { type: 'number', required: false },\n  balance_adjust: { type: 'number', required: false },\n  total_amount: { type: 'number', required: true },\n}\n\nconst FieldInput = (props: {\n  fieldName: FieldName\n  updateField: (fieldName) => (event) => void\n  instance: CreateTransaction__Request\n}) => {\n  const { fieldName, updateField, instance } = props\n  const config = fieldConfig[fieldName]\n  let error = false\n  if (config.required && !instance[fieldName]) {\n    error = true\n  } else if (config.required && config.type === 'number' && !instance[fieldName]) {\n    error = true\n  }\n\n  return (\n    <TextField\n      type={config.type}\n      required={config.required}\n      error={error}\n      label={fieldName}\n      value={instance[fieldName]}\n      onChange={updateField(fieldName)}\n    />\n  )\n}\nconst initialForm = {\n  issued_date: getToday(),\n  merchant: '',\n  notes: '',\n  category_id: null,\n  total_amount: '0',\n  balance_adjust: '0',\n}\n\nexport const NewTransactionForm: React.FC<NewTransactionFormProps> = props => {\n  const { selectableCategories, onClose } = props\n  const [formData, setFormData] = React.useState<CreateTransaction__Request>(initialForm)\n  const butler = React.useContext(ButlerContext)\n\n  const createTransaction = () => {\n    butler.CreateTransaction(formData, 'merge-append', data => {\n      onClose()\n    })\n  }\n  const updateField = (fieldName: FieldName) => {\n    const old = formData\n    return event => {\n      const newState = Object.assign({}, old, {\n        [fieldName]: event.target.value,\n      })\n      setFormData(newState)\n    }\n  }\n  const isValid = () => {\n    const t = formData\n    return [t.issued_date, t.merchant, +t.total_amount].every(Boolean)\n  }\n  const transaction = formData\n  return (\n    <div style={{ paddingTop: '10px' }}>\n      <ExpansionPanel expanded={true}>\n        <ExpansionPanelSummary>\n          <Grid container spacing={10}>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                instance={transaction}\n                fieldName=\"issued_date\"\n                updateField={updateField}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput fieldName=\"merchant\" instance={transaction} updateField={updateField} />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                fieldName=\"total_amount\"\n                instance={transaction}\n                updateField={updateField}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <DialogSelect\n                value={transaction.category_id || ''}\n                onSelectOption={option => {\n                  const newState = Object.assign({}, formData, {\n                    category_id: option.value,\n                  })\n                  setFormData(newState)\n                }}\n                choices={selectableCategories.map(cat => {\n                  return {\n                    value: cat.id,\n                    label: cat.description,\n                    mui_icon_id: cat.mui_icon_id,\n                  }\n                })}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput fieldName=\"notes\" instance={transaction} updateField={updateField} />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                fieldName=\"balance_adjust\"\n                instance={transaction}\n                updateField={updateField}\n              />\n            </Grid>\n          </Grid>\n        </ExpansionPanelSummary>\n        <Divider />\n        <ExpansionPanelActions>\n          <Button\n            size=\"small\"\n            onClick={() => {\n              setFormData(initialForm)\n              onClose()\n            }}\n          >\n            Cancel\n          </Button>\n          <Button size=\"small\" color=\"primary\" onClick={createTransaction} disabled={!isValid()}>\n            Save\n          </Button>\n        </ExpansionPanelActions>\n      </ExpansionPanel>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { InputAdornment, Menu, MenuItem, TextField } from '@material-ui/core'\nimport { Search } from '@material-ui/icons'\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum, BUTLER_ACTIONS, State } from '@src/types'\n\ninterface PropsFromStore {\n  suggestions: Array<any>\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Props = PropsFromStore & DispatchProps\n\nclass SearchBarComponent extends React.Component<Props, { anchorEl: JSX.Element | null }> {\n  state = { anchorEl: null }\n\n  debounced = _.debounce(\n    newValue =>\n      this.props.butler.ListTransactions({ search_text: newValue }, 'replace', data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          search_text: newValue,\n        }),\n      ),\n    500,\n  )\n\n  onFocus = event => {\n    this.setState({ anchorEl: event.currentTarget })\n  }\n  handleClose = event => {\n    this.setState({ anchorEl: null })\n  }\n  onSearch = event => {\n    this.debounced(event.target.value)\n  }\n  render() {\n    const icon = (\n      <InputAdornment position=\"start\">\n        <Search />\n      </InputAdornment>\n    )\n    return (\n      <div>\n        <TextField\n          onChange={this.onSearch}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">{icon}</InputAdornment>,\n          }}\n        />\n        <Menu\n          open={!!this.state.anchorEl}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n          getContentAnchorEl={null}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n        >\n          {this.props.suggestions.map((sug, index) => (\n            <MenuItem\n              key={index}\n              onClick={() => {\n                this.props.butler.ListTransactions({}, 'replace')\n              }}\n            >\n              {sug.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps): PropsFromStore => {\n  return { suggestions: [] }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const SearchBar = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchBarComponent)\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Add, AttachMoney, CreditCard, GridOn, History, Waves } from '@material-ui/icons'\nimport * as React from 'react'\nimport { IconMenu } from 'rice-instructor'\nimport { State as AppState } from '@src/types'\nimport { connectButler } from '@src/utils'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { SearchBar } from '@src/Root/SearchBar'\n\ninterface Prop {\n  balance: string | null\n  showForm: (formType: string) => void\n  toggleTimeline: () => void\n}\n\nconst TransactionListAppBarComponent = (props: Prop) => {\n  const showNewTransactionForm = () => {\n    props.showForm('transaction')\n  }\n\n  const showNewStatementForm = () => {\n    props.showForm('statement')\n  }\n\n  const showPlaidImportForm = () => {\n    props.showForm('plaid')\n  }\n  const showWaveImportForm = () => {\n    props.showForm('wave')\n  }\n\n  const toggleTimeline = () => {\n    props.toggleTimeline()\n  }\n\n  const butler = React.useContext(ButlerContext)\n  React.useEffect(() => {\n    if (!props.balance) {\n      butler.GetUserBalance({}, 'replace')\n    }\n  })\n  return (\n    <AppBar position=\"static\" color=\"default\">\n      <Toolbar>\n        <Tooltip title=\"Timeline\">\n          <IconButton onClick={toggleTimeline}>\n            <History />\n          </IconButton>\n        </Tooltip>\n        {props.balance ? (\n          <Typography variant=\"body1\" key=\"balance\">{`Balance: $${props.balance}`}</Typography>\n        ) : null}\n        <div style={{ flex: 1 }} />\n        <SearchBar />\n        <IconMenu icon={<Add />}>\n          <MenuItem key=\"new-transaction-menu\" onClick={showNewTransactionForm}>\n            <ListItemIcon>\n              <AttachMoney />\n            </ListItemIcon>\n            <ListItemText>Transaction</ListItemText>\n          </MenuItem>\n          <MenuItem key=\"new-statement-menu\" onClick={showNewStatementForm}>\n            <ListItemIcon>\n              <CreditCard />\n            </ListItemIcon>\n            <ListItemText>Statement</ListItemText>\n          </MenuItem>\n          <MenuItem key=\"new-wave-menu\" onClick={showWaveImportForm}>\n            <ListItemIcon>\n              <Waves color=\"primary\" />\n            </ListItemIcon>\n            <ListItemText>Wave Import</ListItemText>\n          </MenuItem>\n          <MenuItem key=\"new-plaid-menu\" onClick={showPlaidImportForm}>\n            <ListItemIcon>\n              <GridOn color=\"primary\" />\n            </ListItemIcon>\n            <ListItemText>Plaid Import</ListItemText>\n          </MenuItem>\n        </IconMenu>\n        <IconButton\n          onClick={() => {\n            sessionStorage.removeItem('authToken')\n            window.location.href = '/'\n          }}\n        >\n          <Icon className=\"material-icons\">exit_to_app</Icon>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    balance: state.balance,\n  }\n}\nexport const TransactionListAppBar = connectButler(mapStateToProps)(TransactionListAppBarComponent)\n","import * as React from 'react'\n\nimport { Grid, IconButton } from '@material-ui/core'\nimport { Check, Close } from '@material-ui/icons'\nimport { IPrediction } from '@src/types'\n\ninterface SmartCatProp {\n  prediction: IPrediction\n  onAccept: () => void\n}\nexport const SmartCatField: React.FC<SmartCatProp> = props => {\n  const { prediction, onAccept } = props\n  const split = prediction.split ? 'Split ' : ''\n  return (\n    <div style={{ color: 'rgb(0, 188, 212)', fontWeight: 'bold' }}>\n      {`${split}${prediction.category_name}?`}\n      <Grid container>\n        <Grid item xs={12} sm={1}>\n          <IconButton onClick={() => onAccept()}>\n            <Check color=\"primary\" />\n          </IconButton>\n        </Grid>\n        <Grid item xs={12} sm={1}>\n          <IconButton\n            onClick={() => {\n              // Do nothing because the Transaction row will be focused and enter edit mode\n            }}\n          >\n            <Close color=\"secondary\" />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n","import * as React from 'react'\n\nimport { DialogSelect } from '@src/components/DialogSelect'\nimport { ICategory, IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { ButlerContext } from '@src/Root/contexts'\n\ninterface CategoryFieldProp {\n  transaction: IUserTransaction\n  selectableCategories: Array<ICategory>\n}\n\nexport const CategoryField: React.FC<CategoryFieldProp> = props => {\n  const { selectableCategories, transaction } = props\n  const butler = React.useContext(ButlerContext)\n  if (!selectableCategories.length) return <div></div>\n  return (\n    <DialogSelect\n      value={transaction.category_id || null}\n      onSelectOption={option => {\n        butler.UpdateTransaction(\n          {\n            id: transaction.id,\n            category_id: option.value,\n          },\n          'merge-append',\n        )\n      }}\n      choices={selectableCategories.map(cat => {\n        return {\n          value: cat.id,\n          label: cat.description,\n          mui_icon_id: cat.mui_icon_id,\n        }\n      })}\n    />\n  )\n}\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { TextField } from '@material-ui/core'\n\ninterface IDebouncedTextField {\n  helperText?: string\n  onBounce: (newValue) => void\n  setter: (newValue) => void\n  type?: string\n  value?: any\n}\n\nexport const DebouncedTextField: React.FunctionComponent<IDebouncedTextField> = ({\n  helperText,\n  setter,\n  onBounce,\n  type,\n  value,\n}) => {\n  const debounced = React.useCallback(_.debounce(onBounce, 1000), [])\n\n  return (\n    <TextField\n      helperText={helperText}\n      type={type}\n      onChange={event => {\n        setter(event.target.value)\n        debounced(event.target.value)\n      }}\n      value={value}\n    />\n  )\n}\n","import * as React from 'react'\nimport { Icon } from '@material-ui/core'\n\nexport class PlaidIcon extends React.Component<{}> {\n  render() {\n    return (\n      <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n        grid_on\n      </Icon>\n    )\n  }\n}\n","import {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Fab,\n  Grid,\n  Icon,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport * as _ from 'lodash'\nimport JSONTree from 'react-json-tree'\nimport * as React from 'react'\nimport { getSelectableCategories } from '../selectors'\nimport { SmartCatField } from './SmartCatField'\nimport { CategoryField } from './CategoryField'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { DebouncedTextField } from '@src/components/DebouncedTextField'\nimport { ICategory, IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { formatDate, connectButler } from '@src/utils'\nimport { PlaidIcon } from '@src/components/icons'\n\ninterface ITransactionRowProps {\n  transaction: IUserTransaction\n  user_id: number\n  expanded: boolean\n  selectableCategories: Array<ICategory>\n  onToggleExpansion: (event, expanded) => void\n}\n\nexport const CategoryInfoField = (props: {\n  transaction: IUserTransaction\n  category: ICategory | null\n  user_id: number\n  onAccept: (arg: { id: number; category_id: number; balance_adjust: string }) => void\n}) => {\n  const { transaction, category, onAccept } = props\n  const prediction = transaction.prediction\n  const multiplier = props.user_id === transaction.lender_id ? 1 : -1\n  if (!transaction.category_id && prediction) {\n    return (\n      <SmartCatField\n        prediction={prediction}\n        onAccept={() =>\n          onAccept({\n            id: transaction.id,\n            category_id: prediction.category_id,\n            balance_adjust: prediction.split\n              ? ((multiplier * parseFloat(transaction.total_amount)) / 2).toString()\n              : '0',\n          })\n        }\n      />\n    )\n  }\n  return (\n    <Grid container spacing={10}>\n      <Grid item xs={1}>\n        <Icon className=\"material-icons\">{category ? category.mui_icon_id : null}</Icon>\n      </Grid>\n      <Grid item xs>\n        {category ? <Typography color=\"textSecondary\">{category.description}</Typography> : null}\n      </Grid>\n    </Grid>\n  )\n}\n\nconst TransactionRowComponent = (props: ITransactionRowProps) => {\n  const { user_id, selectableCategories, transaction, expanded, onToggleExpansion } = props\n  const butler = React.useContext(ButlerContext)\n  console.log('render row')\n\n  const onAcceptSmartCat = (fields: {\n    id: number\n    category_id: number\n    balance_adjust: string\n  }) => {\n    butler.UpdateTransaction({ ...fields }, 'merge-append', () =>\n      fields.balance_adjust ? butler.GetUserBalance({}, 'replace') : null,\n    )\n  }\n  const getCategory = () => {\n    if (!transaction.category_id) return null\n    return selectableCategories.find(c => c.id === transaction.category_id) || null\n  }\n  const [balanceAdjust, setBalanceAdjust] = React.useState(transaction.balance_adjust)\n  return (\n    <div>\n      <ExpansionPanel\n        disabled={!transaction.editable}\n        expanded={expanded}\n        onChange={onToggleExpansion}\n      >\n        <ExpansionPanelSummary>\n          <Grid container spacing={10}>\n            <Grid item xs={3} sm={4}>\n              <Typography>{formatDate(transaction.issued_date)}</Typography>\n              {expanded ? null : (\n                <CategoryInfoField\n                  user_id={user_id}\n                  transaction={transaction}\n                  category={getCategory()}\n                  onAccept={onAcceptSmartCat}\n                />\n              )}\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              {transaction.origin_payload ? (\n                <Tooltip\n                  title={\n                    <JSONTree shouldExpandNode={() => true} data={transaction.origin_payload} />\n                  }\n                >\n                  {transaction.origin_payload['anchor_account_name'] ? (\n                    <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n                      waves\n                    </Icon>\n                  ) : (\n                    <PlaidIcon />\n                  )}\n                </Tooltip>\n              ) : null}\n              <Typography variant=\"body1\">{transaction.merchant}</Typography>\n              <div>\n                <Typography color=\"textSecondary\">{transaction.account_name}</Typography>\n                <Typography color=\"textSecondary\">{transaction.plaid_category}</Typography>\n                <Typography color=\"textSecondary\">{transaction.notes}</Typography>\n              </div>\n            </Grid>\n            <Grid item xs={3} sm={4} style={{ paddingLeft: '40px' }}>\n              <Typography>{`$${transaction.total_amount}`}</Typography>\n              {+transaction.balance_adjust && !expanded ? (\n                <Typography\n                  style={{\n                    color: +transaction.balance_adjust > 0 ? 'green' : 'red',\n                  }}\n                >\n                  {`$${transaction.balance_adjust}`}\n                </Typography>\n              ) : null}\n            </Grid>\n          </Grid>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={10}>\n            <Grid item xs={6} sm={4}>\n              <DebouncedTextField\n                helperText=\"notes\"\n                setter={() => {\n                  // do nothing\n                }}\n                onBounce={newValue =>\n                  butler.UpdateTransaction({ id: transaction.id, notes: newValue }, 'merge-append')\n                }\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <CategoryField\n                {...{\n                  transaction,\n                  selectableCategories,\n                  butler,\n                }}\n              />\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <DebouncedTextField\n                type=\"number\"\n                helperText=\"Balance Adjust\"\n                value={balanceAdjust}\n                setter={setBalanceAdjust}\n                onBounce={newValue => {\n                  butler.UpdateTransaction(\n                    {\n                      id: transaction.id,\n                      balance_adjust: newValue,\n                    },\n                    'merge-append',\n                    () => butler.GetUserBalance({}, 'replace'),\n                  )\n                }}\n              />\n            </Grid>\n            <Grid item xs={6} sm={1} style={{ textAlign: 'right' }}>\n              <Fab\n                size=\"medium\"\n                color=\"secondary\"\n                aria-label=\"Delete\"\n                onClick={() =>\n                  butler.ArchiveTransaction(\n                    {\n                      id: transaction.id,\n                    },\n                    'remove',\n                  )\n                }\n              >\n                <Delete />\n              </Fab>\n            </Grid>\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </div>\n  )\n}\nconst areEqual = (last: ITransactionRowProps, next: ITransactionRowProps) => {\n  if (\n    _.isEqual(last.transaction, next.transaction) &&\n    last.expanded === next.expanded &&\n    last.selectableCategories.length === next.selectableCategories.length\n  ) {\n    return true\n  }\n  return false\n}\nexport const TransactionRow = connectButler(state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    user_id: state.user_id,\n  }\n})(React.memo(TransactionRowComponent, areEqual))\n","import * as React from 'react'\nimport {\n  ListItemSecondaryAction,\n  ButtonGroup,\n  Button,\n  Tooltip,\n  Icon,\n  ListItemIcon,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core'\nimport { getEventButtonIcon, getEventIcon, getEventDescription } from './utils'\nimport { BASE_URL } from '@src/actions'\nimport { ButlerContext, UrlStateContext } from '@src/Root/contexts'\nimport { EventType, ICheckPoint, IEvent, UrlPathEnum } from '@src/types'\nimport { pushHistory } from '@src/history'\n\nexport const EventRow = (props: { authToken: string; event: IEvent }) => {\n  const urlState = React.useContext(UrlStateContext)\n  const butler = React.useContext(ButlerContext)\n\n  const { event } = props\n  const disabled = urlState.event_id === `${event.event_type}-${event.id}`\n  if (event.event_type === EventType.CHECKPOINT) {\n    return (\n      <CheckpointListItem\n        authToken={props.authToken}\n        disabled={disabled}\n        checkpoint={event as ICheckPoint}\n      />\n    )\n  }\n  const eventIcon = getEventIcon(event)\n  const onFilter = e => {\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${event.event_type}-${event.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${event.event_type}-${event.id}`,\n        }),\n    )\n  }\n  const eventButtonIcon = getEventButtonIcon(event)\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={event.event_type}>\n          <Icon color=\"primary\">{eventIcon}</Icon>\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(event.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{getEventDescription(event)}</Typography>\n      </ListItemText>\n      {eventButtonIcon ? (\n        <ListItemSecondaryAction>\n          <Button>\n            <Icon>{eventButtonIcon}</Icon>\n          </Button>\n        </ListItemSecondaryAction>\n      ) : null}\n    </ListItem>\n  )\n}\n\nexport const CheckpointListItem: React.FC<{\n  authToken: string\n  disabled: boolean\n  checkpoint: ICheckPoint\n}> = ({ authToken, checkpoint, disabled }) => {\n  const butler = React.useContext(ButlerContext)\n  const onFilter = e => {\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${checkpoint.event_type}-${checkpoint.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${checkpoint.event_type}-${checkpoint.id}`,\n        }),\n    )\n  }\n  const description = checkpoint.signed_ts\n    ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n        checkpoint.signed_ts,\n      ).toLocaleDateString()}`\n    : 'Not Signed'\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={checkpoint.event_type}>\n          {checkpoint.signed_ts ? (\n            <Icon color=\"primary\">toll</Icon>\n          ) : (\n            <Icon style={{ color: 'green' }}>fiber_new</Icon>\n          )}\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(checkpoint.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{description}</Typography>\n      </ListItemText>\n      <ListItemSecondaryAction>\n        <ButtonGroup\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          aria-label=\"Small outlined button group\"\n        >\n          {checkpoint.signed_ts ? null : (\n            <Button\n              size=\"small\"\n              color=\"secondary\"\n              onClick={() => butler.SignCheckPoint({ id: checkpoint.id }, 'merge-append')}\n            >\n              <Icon>plus_one</Icon>\n            </Button>\n          )}\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            disabled={!authToken}\n            onClick={() => {\n              window.open(`${BASE_URL}/export-checkpoint/${authToken}/${checkpoint.id}/`, '_blank')\n            }}\n          >\n            <Icon>cloud_download</Icon>\n          </Button>\n        </ButtonGroup>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n","import { ICheckPoint, EventType, IStatement, IImportBatch, IEvent } from '@src/types'\n\nexport const getEventDescription = (e: IEvent) => {\n  if (e.event_type === EventType.CHECKPOINT) {\n    const checkpoint = e as ICheckPoint\n    return checkpoint.signed_ts\n      ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n          checkpoint.signed_ts,\n        ).toLocaleDateString()}`\n      : 'Not Signed'\n  }\n  if (e.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = e as IImportBatch\n    return `${batch_import.origin}: ${batch_import.start_date} TO ${batch_import.end_date}`\n  }\n  if (e.event_type === EventType.STATEMENT_UPLOAD) {\n    const upload = e as IStatement\n    return `${upload.source}: ${upload.first_date} TO ${upload.last_date}`\n  }\n  throw new Error('not possible')\n}\nexport const getEventIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'toll'\n  }\n  if (event.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = event as IImportBatch\n    return { plaid: 'grid_on', wave: 'waves' }[batch_import.origin]\n  }\n  if (event.event_type === EventType.STATEMENT_UPLOAD) {\n    // const upload = memory as IStatement\n    return 'cloud_upload'\n  }\n  throw new Error('not possible')\n}\n\nexport const getEventButtonIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'plus_one'\n  }\n  return null\n}\n","import { List } from '@material-ui/core'\nimport * as React from 'react'\nimport { EventRow } from './EventRow'\nimport { connectButler } from '@src/utils'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { IEvent } from '@src/types'\nimport { getAuthToken } from '@src/selectors'\n\nconst TimelineComponent = (props: { events: Array<IEvent>; authToken: string }) => {\n  const butler = React.useContext(ButlerContext)\n  React.useEffect(() => {\n    butler.ListEvents({}, 'replace')\n  }, [])\n  return (\n    <div>\n      <List>\n        {props.events.map((e, index) => {\n          return <EventRow authToken={props.authToken} event={e} key={index} />\n        })}\n      </List>\n    </div>\n  )\n}\nexport const Timeline = connectButler(state => {\n  return {\n    events: state.events,\n    authToken: getAuthToken(state),\n  }\n})(TimelineComponent)\n","import * as _ from 'lodash'\nimport { Button, Grid } from '@material-ui/core'\nimport * as React from 'react'\nimport { getSelectableCategories, getVisibleTransactions } from '../selectors'\n\nimport { NewPlaidForm } from './NewPlaidForm'\nimport { NewStatementForm } from './NewStatementForm'\nimport { NewTransactionForm } from './NewTransactionForm'\nimport { TransactionListAppBar } from './TransactionListAppBar'\nimport { TransactionRow } from './TransactionRow'\nimport { IUserTransaction, ICategory } from '@src/__generated__/backendSchemas'\nimport { Timeline } from '@src/Root/Timeline'\nimport { ButlerProps, connectButler } from '@src/utils'\nimport { State as AppState } from '@src/types'\n\ninterface PropsFromStore {\n  transactions: Array<IUserTransaction>\n  selectableCategories: Array<ICategory>\n}\nconst PAGE_SIZE = 40\n\ntype Prop = ButlerProps & PropsFromStore\n\ntype FormType = 'transaction' | 'plaid' | 'statement' | 'wave'\n\nconst TransactionListContainer = (props: Prop) => {\n  console.log('rerender list')\n  const [showTimeline, setShowTimeline] = React.useState(true)\n  const [formType, setFormType] = React.useState<FormType | null>(null)\n  const [expanded, setExpanded] = React.useState<number | null>(null)\n  const loadMoreTransactions = () => {\n    const start = props.transactions.length\n    const end = start + PAGE_SIZE\n    props.butler.ListTransactions({ start, end }, 'merge-append')\n  }\n\n  React.useEffect(() => {\n    if (!props.selectableCategories.length) {\n      props.butler.ListCategories({}, 'replace')\n      loadMoreTransactions()\n    }\n  })\n\n  const showForm = (formType: FormType) => {\n    setFormType(formType)\n  }\n  return (\n    <div style={{ maxWidth: '100%' }}>\n      <TransactionListAppBar toggleTimeline={setShowTimeline} showForm={showForm} />\n      <div\n        style={{\n          height: window.innerHeight - 70,\n          overflow: 'scroll',\n        }}\n      >\n        <Grid container>\n          {showTimeline ? (\n            <Grid item sm={3}>\n              <Timeline />\n            </Grid>\n          ) : null}\n          <Grid item sm={showTimeline ? 9 : 12}>\n            <div style={{ marginBottom: '20px' }}>\n              {formType === 'transaction' ? (\n                <NewTransactionForm\n                  selectableCategories={props.selectableCategories}\n                  onClose={() => setFormType(null)}\n                />\n              ) : null}\n              {formType === 'statement' ? (\n                <NewStatementForm onClose={() => setFormType(null)} />\n              ) : null}\n              {formType === 'plaid' ? <NewPlaidForm origin=\"plaid\" /> : null}\n              {formType === 'wave' ? <NewPlaidForm origin=\"wave\" /> : null}\n            </div>\n            {props.transactions.map(t => (\n              <TransactionRow\n                expanded={expanded === t.id}\n                key={t.id}\n                transaction={t}\n                onToggleExpansion={(event, expanded) => setExpanded(t.id)}\n              />\n            ))}\n            <Button fullWidth size=\"large\" color=\"secondary\" onClick={loadMoreTransactions}>\n              ({props.transactions.length}) Click to Load More ...\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: AppState): PropsFromStore => {\n  return {\n    transactions: getVisibleTransactions(state),\n    selectableCategories: getSelectableCategories(state),\n  }\n}\n\nexport const TransactionList = connectButler(mapStateToProps)(\n  React.memo(TransactionListContainer, (last: Prop, next: Prop) => {\n    if (\n      last.selectableCategories.length === next.selectableCategories.length &&\n      _.isEqual(last.transactions, next.transactions)\n    ) {\n      return true\n    }\n    return false\n  }),\n)\n","import { Typography, Icon, ListItemIcon, Select, MenuItem } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface IIconSelect {\n  initialValue: string | null\n  onChange: (event, child) => void\n  /*\n  options: Array<{\n    value: number | string\n    label: string\n  }>\n   */\n}\nconst ICON_IDS = [\n  'attach_money',\n  'beach_access',\n  'cake',\n  'compare_arrows',\n  'free_breakfast',\n  'gavel',\n  'home',\n  'local_activity',\n  'local_bar',\n  'local_car_wash',\n  'local_gas_station',\n  'local_grocery_store',\n  'local_hospital',\n  'local_parking',\n  'local_taxi',\n  'motorcycle',\n  'movie',\n  'not_interested',\n  'perm_scan_wifi',\n  'phone_iphone',\n  'power',\n  'help',\n  'restaurant',\n  'rowing',\n  'school',\n  'settings_input_component',\n  'settings_input_hdmi',\n  'shopping_basket',\n  'subway',\n  'theaters',\n  'pets',\n]\nexport const IconSelect: React.FC<IIconSelect> = ({ initialValue, onChange }) => {\n  return (\n    <Select onChange={onChange} value={initialValue}>\n      {ICON_IDS.map(iconId => (\n        <MenuItem key={iconId} value={iconId}>\n          <ListItemIcon>\n            <Icon color=\"primary\">{iconId}</Icon>\n          </ListItemIcon>\n          <Typography style={{ float: 'right' }}>{iconId}</Typography>\n        </MenuItem>\n      ))}\n    </Select>\n  )\n}\n","import * as React from 'react'\n\nimport {\n  makeStyles,\n  TextField,\n  ListItemSecondaryAction,\n  IconButton,\n  Theme,\n  createStyles,\n  Icon,\n  ListItemIcon,\n  Collapse,\n  List,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core'\nimport { ExpandMore, ExpandLess } from '@material-ui/icons'\nimport { IconSelect } from '@src/components/IconSelect'\n\nimport { ITreeNode } from '@src/types'\n\ninterface ITreeProps {\n  node: ITreeNode\n  onSaveNode: (number, string) => void\n  onSelectIcon: (id: number, iconId: string) => void\n  level?: number\n}\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    node: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  }),\n)\n\nexport const Tree: React.FC<ITreeProps> = props => {\n  const { node, level = 0, onSelectIcon, onSaveNode } = props\n  const classes = useStyles()\n\n  const [open, setOpen] = React.useState(true)\n\n  const handleClick = () => {\n    setOpen(!open)\n  }\n  return (\n    <List component=\"nav\" className={classes.node}>\n      <ListItem button onClick={handleClick} style={{ paddingLeft: `${32 * level}px` }}>\n        <ListItemIcon>\n          <Icon color=\"secondary\">{node.mui_icon_id}</Icon>\n        </ListItemIcon>\n        <ListItemText primary={node.name}></ListItemText>\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {node.children.map(child =>\n            child.children.length ? (\n              <Tree\n                onSelectIcon={onSelectIcon}\n                onSaveNode={onSaveNode}\n                key={child.id}\n                node={child}\n                level={level + 1}\n              />\n            ) : (\n              <NodeListItem\n                onSelectIcon={onSelectIcon}\n                onSaveNode={onSaveNode}\n                key={child.id}\n                node={child}\n                level={level + 1}\n              />\n            ),\n          )}\n        </List>\n      </Collapse>\n    </List>\n  )\n}\n\nconst NodeListItem: React.FC<{\n  node: ITreeNode\n  level: number\n  onSaveNode: (number, string) => void\n  onSelectIcon: (id: number, iconId: string) => void\n}> = ({ node, level, onSaveNode, onSelectIcon }) => {\n  const [editable, setEditable] = React.useState(false)\n  const [pickingIcon, setPickingIcon] = React.useState(false)\n  const [nodeName, setNodeName] = React.useState(node.name)\n  const [iconId, setIconId] = React.useState(node.mui_icon_id)\n  return (\n    <>\n      <ListItem\n        key={node.id}\n        dense\n        button\n        role={undefined}\n        style={{ paddingLeft: `${32 * (level + 1)}px` }}\n      >\n        {editable ? (\n          <TextField\n            autoFocus={true}\n            value={nodeName}\n            onChange={event => setNodeName(event.target.value)}\n            onBlur={() => {\n              setEditable(false)\n              onSaveNode(node.id, nodeName)\n            }}\n          />\n        ) : (\n          <>\n            {pickingIcon ? (\n              <IconSelect\n                onChange={(e, child) => {\n                  onSelectIcon(node.id, e.target.value)\n                  setIconId(e.target.value)\n                  setPickingIcon(false)\n                }}\n                initialValue={iconId}\n              ></IconSelect>\n            ) : (\n              <ListItemText onClick={() => setEditable(true)} primary={nodeName}></ListItemText>\n            )}\n            <ListItemSecondaryAction>\n              <IconButton onClick={() => setPickingIcon(true)} edge=\"end\">\n                <Icon color=\"primary\">{iconId}</Icon>\n              </IconButton>\n            </ListItemSecondaryAction>\n          </>\n        )}\n      </ListItem>\n    </>\n  )\n}\n","import * as React from 'react'\nimport { Tree } from './Tree'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { ITreeNode } from '@src/__generated__/backendSchemas'\n\nexport const CategoryPage: React.FC<{}> = props => {\n  const butler = React.useContext(ButlerContext)\n  const [root, setRoot] = React.useState<ITreeNode | null>(null)\n  React.useEffect(() => {\n    if (!root) {\n      butler.TreefyCategories({}, 'replace', data => {\n        setRoot(data.root)\n      })\n    }\n  })\n  if (!root) {\n    return <div></div>\n  }\n  return (\n    <Tree\n      onSaveNode={(id: number, name: string) => butler.UpdateCategory({ id, name }, 'do-nothing')}\n      onSelectIcon={(id: number, iconId: string) =>\n        butler.UpdateCategory({ id, mui_icon_id: iconId }, 'do-nothing')\n      }\n      node={root}\n    />\n  )\n}\n","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\nexport function stringToDate(dateString: string): Date {\n  const [year, month, day] = dateString.split('-').map(v => parseInt(v))\n  const ret = new Date(year, month - 1, day)\n  return ret\n}\nexport function formatDate(d: string): string {\n  const date = new Date(d)\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC',\n  })\n}\n\nexport const getIsoDateString = (d: Date) => {\n  const year = d.getFullYear()\n  const month = d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1\n  const day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport function getToday(): string {\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth() < 9 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n  const day = today.getDate() < 10 ? '0' + today.getDate() : today.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport interface Identifiable {\n  id: string | number\n}\nexport const mergeArrays = <T extends Identifiable>(\n  existing: Array<T>,\n  incoming: Array<T>,\n  prependOrAppend: 'prepend' | 'append',\n): Array<T> => {\n  return incoming.reduce(\n    function(accumulator: Array<T>, value: T) {\n      const index = existing.findIndex(x => x.id === value.id)\n      if (index >= 0) {\n        const ret = [\n          ...accumulator.slice(0, index),\n          value,\n          ...accumulator.slice(index + 1, accumulator.length),\n        ]\n        return ret\n      } else {\n        return prependOrAppend === 'append' ? [...accumulator, value] : [value, ...accumulator]\n      }\n    },\n    [...existing],\n  )\n}\nexport interface ButlerProps {\n  butler: typeof BUTLER_ACTIONS\n}\nconst mapDispatchToProps = (dispatch): ButlerProps => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\n\nexport const connectButler = <T extends {}>(stateMapper: ((state) => T) | null) => {\n  return connect<T, ButlerProps>(\n    stateMapper,\n    mapDispatchToProps,\n  )\n}\n","import { List, ListItem, ListItemText } from '@material-ui/core'\nimport { Route, Switch } from 'react-router'\nimport { bindActionCreators } from 'redux'\nimport * as React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { connect } from 'react-redux'\nimport { StateContext, UrlStateContext, ButlerContext } from './contexts'\nimport { CategoryPage } from '@src/CategoryPage'\nimport { BUTLER_ACTIONS, State, UrlPathEnum } from '@src/types'\nimport { getPathName, pushHistory } from '@src/history'\nimport { LoginPage } from '@src/LoginPage'\nimport { TransactionChart } from '@src/TransactionChart'\nimport { parseUrlState } from '@src/selectors'\nimport { TransactionList } from '@src/TransactionList'\n\ninterface StateProps {\n  isAuthenticated: boolean\n  urlState: any\n  state: State\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = StateProps & DispatchProps\n\nclass RootComponent extends React.Component<Prop, State> {\n  render() {\n    return (\n      <div style={{ maxWidth: '100%', flex: 8 }}>\n        <StateContext.Provider value={this.props.state}>\n          <ButlerContext.Provider value={this.props.butler}>\n            <UrlStateContext.Provider value={this.props.urlState}>\n              <Body isAuthenticated={this.props.isAuthenticated} />\n            </UrlStateContext.Provider>\n          </ButlerContext.Provider>\n        </StateContext.Provider>\n      </div>\n    )\n  }\n}\n\nexport const Root = connect<StateProps, DispatchProps>(\n  (state: State, ownProps) => {\n    return {\n      isAuthenticated: !!(state.authToken || sessionStorage.getItem('authToken')),\n      urlState: parseUrlState(),\n      state,\n    }\n  },\n  dispatch => ({\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }),\n)(RootComponent)\n\nconst PageList: React.FC = () => {\n  const UrlPathsMap = {\n    TransactionList,\n    TransactionChart,\n    CategoryPage,\n  }\n  return (\n    <List>\n      {Object.keys(UrlPathsMap).map((c, index) => {\n        return (\n          <ListItem key={index} button onClick={() => pushHistory(c as UrlPathEnum)}>\n            <ListItemText primary={c} />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nclass Body extends React.Component<{ isAuthenticated: boolean }> {\n  render() {\n    if (getPathName() === UrlPathEnum.LoginPage) {\n      return <LoginPage />\n    }\n    if (!this.props.isAuthenticated) {\n      console.warn('not authenticated!!!')\n      pushHistory(UrlPathEnum.LoginPage)\n      return <div />\n    }\n    if (getPathName() === UrlPathEnum.Root) {\n      return <PageList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionList) {\n      return <TransactionList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionChart) {\n      return <TransactionChart />\n    }\n    if (getPathName() === UrlPathEnum.CategoryPage) {\n      return <CategoryPage />\n    }\n\n    throw new Error(`Invalid paths: ${getPathName()}`)\n  }\n}\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={Root} />\n  </Switch>\n))\n","import { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport * as React from 'react'\n\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { ButlerContext } from '@src/Root/contexts'\n\nexport const LoginPage = props => {\n  const butler = React.useContext(ButlerContext)\n  const [username, setUsername] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const submitLogin = () => {\n    butler.AuthenticateUser(\n      {\n        username: username,\n        password: password,\n      },\n      'replace',\n      data => {\n        sessionStorage.setItem('authToken', data.authToken)\n        // Redirect to root\n        pushHistory(UrlPathEnum.Root)\n      },\n    )\n  }\n  return (\n    <div\n      style={{\n        height: `${window.innerHeight}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <TextField label=\"Username\" onChange={e => setUsername(e.target.value)} />\n      <br />\n      <TextField\n        onChange={e => setPassword(e.target.value)}\n        type=\"password\"\n        label=\"Password\"\n        onKeyPress={e => {\n          if (e.charCode == 13) {\n            submitLogin()\n          }\n        }}\n      />\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={() => submitLogin()}>\n        Login\n      </Button>\n    </div>\n  )\n}\n","/**\n * GENERATED CODE. DO NOT EDIT !!!\"\n */\nexport interface ArchiveTransaction__Request {\n  id: number\n}\nexport interface AuthenticateUserRequest {\n  username: string\n  password: string\n}\nexport interface AuthenticateUserResponse {\n  errors: {}\n  authToken: string\n}\nexport interface CreateTransaction__Request {\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  merchant: string\n  balance_adjust?: string\n}\nexport enum EnumRoute {\n  ListTransactions = 'ListTransactions',\n  AuthenticateUser = 'AuthenticateUser',\n  ListCategories = 'ListCategories',\n  TreefyCategories = 'TreefyCategories',\n  UpdateCategory = 'UpdateCategory',\n  ListEvents = 'ListEvents',\n  GetUserBalance = 'GetUserBalance',\n  UpdateTransaction = 'UpdateTransaction',\n  GetIncomeExpenseReport = 'GetIncomeExpenseReport',\n  GetExpenseReport = 'GetExpenseReport',\n  UploadStatement = 'UploadStatement',\n  ImportFromPlaid = 'ImportFromPlaid',\n  ImportFromWave = 'ImportFromWave',\n  SignCheckPoint = 'SignCheckPoint',\n  CreateTransaction = 'CreateTransaction',\n  ArchiveTransaction = 'ArchiveTransaction',\n}\nexport interface GetExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetIncomeExpenseReportResponse {\n  chart_data: {}\n}\nexport interface GetIncomeExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetUserBalanceRequest {}\nexport interface GetUserBalanceResponse {\n  balance: string\n  user_id: number\n}\nexport interface ITreeNode {\n  id: number\n  children: Array<ITreeNode>\n  mui_icon_id: string | null\n  name: string\n}\nexport interface ImportFromPlaidRequest {\n  start_date: string\n  end_date: string\n}\nexport interface IPlaidAccount {\n  account_id: string\n  name: string\n  type: string\n  subtype: string\n  mask: string\n}\nexport interface IPlaidTransaction {\n  account_id: string\n  account: IPlaidAccount\n  amount: number\n  category: Array<string>\n  category_id: string\n  date: string\n  iso_currency_code: string\n  name: string\n  pending: boolean\n  transaction_id: string\n  transaction_type: string\n}\nexport interface IWaveTransaction {\n  anchor_account_name: string\n  date_created: string\n  direction: string\n  transaction_description: string\n  transaction_date: string\n  transaction_id: string\n  transaction_amount: string\n}\nexport interface IPrediction {\n  category_id: number\n  category_name: string\n  split: boolean\n}\nexport interface IUserTransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  lender_id: number\n  plaid_category: string | null\n  prediction: IPrediction | null\n  editable: boolean\n}\nexport interface ImportFromPlaidResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ImportFromWaveRequest {\n  start_date: string\n  end_date: string\n}\nexport interface ImportFromWaveResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ListCategoriesRequest {}\nexport interface ICategory {\n  id: number\n  description: string\n  name: string\n  parent_id: number | null\n  mui_icon_id: string\n  is_selectable: boolean\n  is_active: boolean\n}\nexport interface ListCategoriesResponse {\n  categories: Array<ICategory>\n}\nexport interface ListEventsRequest {}\nexport enum EventType {\n  CHECKPOINT = 'CHECKPOINT',\n  STATEMENT_UPLOAD = 'STATEMENT_UPLOAD',\n  BATCH_IMPORT = 'BATCH_IMPORT',\n}\nexport interface ICheckPoint {\n  id: number\n  group_id: number\n  signed_ts: string | null\n  signed_by: number | null\n  signed_balance: string | null\n  updated_ts: string\n  created_ts: string\n  created_by: number\n  event_type?: EventType\n}\nexport interface IStatement {\n  id: number\n  source: string\n  user_id: string\n  created_ts: number\n  first_date: string\n  last_date: string\n  notes: string\n  is_processed: boolean\n  event_type?: EventType\n}\nexport interface IImportBatch {\n  id: number\n  origin: string\n  user_id: string\n  created_ts: number\n  start_date: string\n  end_date: string\n  event_type?: EventType\n}\nexport interface ListEventsResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface ListTransactionsRequest {\n  start?: number\n  end?: number\n  event_id?: string\n  search_text?: string\n}\nexport interface ListTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface SignCheckPointRequest {\n  id: number\n}\nexport interface SignCheckPointResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface TreefyCategoriesRequest {}\nexport interface TreefyCategoriesResponse {\n  root: ITreeNode\n}\nexport interface UpdateCategoryRequest {\n  id: number\n  name?: string | null\n  mui_icon_id?: string | null\n}\nexport interface UpdateCategoryResponse {}\nexport interface UpdateTransactionRequest {\n  id: number\n  issued_date?: string | null\n  notes?: string | null\n  category_id?: number | null\n  balance_adjust?: string\n}\nexport interface UpdateTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport enum EnumStatementSource {\n  PC_MASTER = 'PC_MASTER',\n  SCOTIA_MASTER = 'SCOTIA_MASTER',\n  VISA = 'VISA',\n  CHEQUE = 'CHEQUE',\n}\nexport interface UploadStatementRequest {\n  source: EnumStatementSource\n  content: string\n}\nexport interface ITransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  lender_id: number\n  plaid_category: string | null\n  prediction: string | null\n}\nexport interface UploadStatementResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n  transactions: Array<ITransaction>\n  duplicates: Array<ITransaction>\n}\n\nexport type UpdateType = 'replace' | 'do-nothing' | 'merge-append' | 'remove'\nconst ListTransactions = (\n  data: ListTransactionsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListTransactions,\n      route: EnumRoute.ListTransactions,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst AuthenticateUser = (\n  data: AuthenticateUserRequest,\n  updateType: UpdateType,\n  successCallback?: (data: AuthenticateUserResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.AuthenticateUser,\n      route: EnumRoute.AuthenticateUser,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListCategories = (\n  data: ListCategoriesRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListCategoriesResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListCategories,\n      route: EnumRoute.ListCategories,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst TreefyCategories = (\n  data: TreefyCategoriesRequest,\n  updateType: UpdateType,\n  successCallback?: (data: TreefyCategoriesResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.TreefyCategories,\n      route: EnumRoute.TreefyCategories,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UpdateCategory = (\n  data: UpdateCategoryRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UpdateCategoryResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UpdateCategory,\n      route: EnumRoute.UpdateCategory,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListEvents = (\n  data: ListEventsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListEventsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListEvents,\n      route: EnumRoute.ListEvents,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetUserBalance = (\n  data: GetUserBalanceRequest,\n  updateType: UpdateType,\n  successCallback?: (data: GetUserBalanceResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetUserBalance,\n      route: EnumRoute.GetUserBalance,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UpdateTransaction = (\n  data: UpdateTransactionRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UpdateTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UpdateTransaction,\n      route: EnumRoute.UpdateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetIncomeExpenseReport = (\n  data: GetIncomeExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetIncomeExpenseReport,\n      route: EnumRoute.GetIncomeExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetExpenseReport = (\n  data: GetExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetExpenseReport,\n      route: EnumRoute.GetExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UploadStatement = (\n  data: UploadStatementRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UploadStatementResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UploadStatement,\n      route: EnumRoute.UploadStatement,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromPlaid = (\n  data: ImportFromPlaidRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromPlaidResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromPlaid,\n      route: EnumRoute.ImportFromPlaid,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromWave = (\n  data: ImportFromWaveRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromWaveResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromWave,\n      route: EnumRoute.ImportFromWave,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst SignCheckPoint = (\n  data: SignCheckPointRequest,\n  updateType: UpdateType,\n  successCallback?: (data: SignCheckPointResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.SignCheckPoint,\n      route: EnumRoute.SignCheckPoint,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst CreateTransaction = (\n  data: CreateTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.CreateTransaction,\n      route: EnumRoute.CreateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ArchiveTransaction = (\n  data: ArchiveTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ArchiveTransaction,\n      route: EnumRoute.ArchiveTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nexport const BUTLER_ACTIONS = {\n  ListTransactions,\n\n  AuthenticateUser,\n\n  ListCategories,\n\n  TreefyCategories,\n\n  UpdateCategory,\n\n  ListEvents,\n\n  GetUserBalance,\n\n  UpdateTransaction,\n\n  GetIncomeExpenseReport,\n\n  GetExpenseReport,\n\n  UploadStatement,\n\n  ImportFromPlaid,\n\n  ImportFromWave,\n\n  SignCheckPoint,\n\n  CreateTransaction,\n\n  ArchiveTransaction,\n}\n","import querystring from 'querystring'\nimport { history } from '@src/history'\nimport { IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { State } from '@src/types'\n\nexport function getSelectableCategories(state: State) {\n  return state.categories.filter(x => x.is_selectable)\n}\n\nexport function getSnack(state: State) {\n  if (!state.snacks.length) {\n    return ''\n  }\n  return state.snacks[0]\n}\n\nexport function getVisibleTransactions(state): Array<IUserTransaction> {\n  return state.transactions || []\n}\n\nexport function parseUrlState() {\n  const params = parseSearch()\n  if (params && params.urlState) {\n    return JSON.parse(params.urlState as string)\n  }\n  return {}\n}\nexport function parseSearch() {\n  return querystring.parse(history.location.search.split('?')[1])\n}\n\nexport const getAuthToken = (state: State) =>\n  state.authToken || sessionStorage.getItem('authToken') || ''\n","import { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport { apiMiddleware } from './middleware'\nimport reducers from './reducers'\n\nexport const configureStore = (initialState?) => {\n  let middleware = applyMiddleware(thunk, apiMiddleware, logger())\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware)\n  }\n  const store = createStore(reducers, initialState, middleware)\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers')\n      store.replaceReducer(nextReducer)\n    })\n  }\n  return store\n}\n","import { Middleware } from 'redux'\nimport { callButlerApi } from './actions'\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { EnumRoute } from '@src/__generated__/backendSchemas'\n\nexport const apiMiddleware: Middleware = store => next => action => {\n  if (action && EnumRoute[action.type]) {\n    callButlerApi({\n      endpoint: action.route,\n      jsonBody: action.data,\n      authToken: sessionStorage.getItem('authToken') || store.getState().authToken || '',\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          store.dispatch({\n            type: `BUTLER_ANSWERED`,\n            updateType: action.updateType,\n            response: data,\n          })\n          if (action.successCallback) {\n            action.successCallback(data)\n          }\n        })\n      } else if (response.status === 401) {\n        sessionStorage.removeItem('jwt')\n        pushHistory(UrlPathEnum.LoginPage)\n      }\n    })\n  }\n\n  return next(action)\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router'\nimport { history } from './history'\n\nimport { configureStore } from './configureStore'\nimport { App } from '@src/Root'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}