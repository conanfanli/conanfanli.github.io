{"version":3,"sources":["webpack:///./types/index.ts","webpack:///./actions.ts","webpack:///./reducers.ts","webpack:///./TransactionChart.tsx","webpack:///./TransactionList/NewPlaidForm.tsx","webpack:///./components/FileUploadButton.tsx","webpack:///./TransactionList/NewStatementForm.tsx","webpack:///./TransactionList/NewTransactionForm.tsx","webpack:///./Root/SearchBar.tsx","webpack:///./TransactionList/TransactionListAppBar.tsx","webpack:///./components/CategoryField.tsx","webpack:///./components/DebouncedTextField.tsx","webpack:///./components/icons.tsx","webpack:///./TransactionList/TransactionRow.tsx","webpack:///./Root/Timeline/EventRow.tsx","webpack:///./Root/Timeline/utils.ts","webpack:///./Root/Timeline/index.tsx","webpack:///./TransactionList/index.tsx","webpack:///./components/IconSelect.tsx","webpack:///./CategoryPage/Tree.tsx","webpack:///./CategoryPage/index.tsx","webpack:///./history.ts","webpack:///./Root/contexts.ts","webpack:///./utils.ts","webpack:///./Root/index.tsx","webpack:///./common.tsx","webpack:///./LoginPage.tsx","webpack:///./__generated__/backendSchemas.ts","webpack:///./selectors.ts","webpack:///./configureStore.tsx","webpack:///./middleware.ts","webpack:///./main.tsx","webpack:///./components/SingleSelectField.tsx"],"names":["__webpack_require__","d","__webpack_exports__","UrlPathEnum","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_0__","BASE_URL","callButlerApi","window","location","protocol","hostname","port","BASE_API_URL","request","url","endpoint","jwt","authToken","fetch","method","body","JSON","stringify","jsonBody","headers","Content-Type","X-Requested-With","Authorization","initialState","redux_actions__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","redux__WEBPACK_IMPORTED_MODULE_2__","_src_utils__WEBPACK_IMPORTED_MODULE_3__","balance","user_id","events","categories","isAuthenticated","snacks","transactions","handlers","state","action","hasOwnProperty","type","createReducer","EAT_SNACK","slice","ADD_SNACK","concat","snack","createButlerReducer","partialState","sortBy","Object","response","updateType","filter","item","find","deleted","id","ret","Error","reducers","transaction","issued_date","e","Date","created_ts","getTime","highcharts_data__WEBPACK_IMPORTED_MODULE_3___default","react_highcharts__WEBPACK_IMPORTED_MODULE_6___default","a","Highcharts","highcharts_drilldown__WEBPACK_IMPORTED_MODULE_4___default","getChartConfig","_a","chart","title","text","xAxis","yAxis","min","align","labels","overflow","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","column","allowPointSelect","click","onClickColumn","legend","layout","verticalAlign","x","y","floating","borderWidth","shadow","credits","TransactionChartComponent","_super","props","_this","call","this","onChangeReportType","showReport","target","value","config","bind","reportTitle","report_type","initialReportType","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","console","log","getReportTitle","today","threeMonthAgo","setDate","getDate","apiName","butler","start_date","_src_utils__WEBPACK_IMPORTED_MODULE_10__","end_date","res","titled","updeep__WEBPACK_IMPORTED_MODULE_9___default","assign","chart_data","setState","react__WEBPACK_IMPORTED_MODULE_5__","componentDidMount","render","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","onChange","_material_ui_core__WEBPACK_IMPORTED_MODULE_2__","TransactionChart","react_redux__WEBPACK_IMPORTED_MODULE_7__","dispatch","redux__WEBPACK_IMPORTED_MODULE_8__","_src_types__WEBPACK_IMPORTED_MODULE_11__","toISOString","NewPlaidForm_NewPlaidFormComponent","NewPlaidFormComponent","apply","arguments","importTransactions","origin","ImportFromPlaid","ImportFromWave","setStartDate","setEndDate","tslib_es6","react","Grid","container","xs","TextField","label","defaultValue","Button","onClick","style","marginTop","color","variant","NewPlaidForm","es","redux","backendSchemas","FileUploadButton_FileUploadButton","FileUploadButton","onFileInputChange","event","file","files","reader","FileReader","addEventListener","submitFileContent","result","readAsText","button","component","hidden","ref","fileInput","htmlFor","NewStatementForm_StatementFormContainer","StatementFormContainer","selectedSource","CHEQUE","onSelectType","content","length","UploadStatement","source","paddingTop","ExpansionPanel","expanded","ExpansionPanelSummary","spacing","sm","Select","map","c","MenuItem","key","Divider","ExpansionPanelActions","size","onClose","NewStatementForm","fieldConfig","required","merchant","notes","category_id","balance_adjust","total_amount","FieldInput","fieldName","updateField","instance","error","getInitialState","utils","NewTransactionForm_NewTransactionFormContainer","NewTransactionFormContainer","createTransaction","CreateTransaction","data","old","newState","isValid","t","every","Boolean","selectableCategories","SingleSelectField","choices","cat","description","mui_icon_id","instancePropNameToUpdate","changes","disabled","NewTransactionForm","selectors","types","SearchBar_SearchBarComponent","SearchBarComponent","anchorEl","debounced","lodash","newValue","ListTransactions","search_text","history_0","TransactionList","onFocus","currentTarget","handleClose","onSearch","icon","InputAdornment","position","Search","InputProps","startAdornment","Menu","open","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","suggestions","sug","index","SearchBar","ownProps","TransactionListAppBar","contexts","GetUserBalance","AppBar","Toolbar","Tooltip","IconButton","toggleTimeline","History","Typography","flex","rice_instructor","Add","showForm","ListItemIcon","AttachMoney","ListItemText","CreditCard","Waves","GridOn","sessionStorage","removeItem","href","Icon","className","CategoryField_SmartCatField","SmartCatField","prediction","onAccept","split","fontWeight","category_name","Check","declined","Close","CategoryField_CategoryField","CategoryField","onSelectCategory","UpdateTransaction","DebouncedTextField","helperText","setter","onBounce","icons_PlaidIcon","PlaidIcon","float","CategoryInfoField","category","multiplier","lender_id","parseFloat","toString","TransactionRow","onToggleExpansion","balanceAdjust","setBalanceAdjust","editable","fields","origin_payload","lib_default","shouldExpandNode","account_name","plaid_category","paddingLeft","ExpansionPanelDetails","textAlign","Fab","aria-label","ArchiveTransaction","Delete","last","next","EventRow","urlState","event_id","event_type","CHECKPOINT","CheckpointListItem","checkpoint","eventIcon","BATCH_IMPORT","plaid","wave","STATEMENT_UPLOAD","getEventIcon","eventButtonIcon","getEventButtonIcon","ListItem","selected","start","end","toLocaleDateString","signed_ts","signed_balance","batch_import","upload","first_date","last_date","getEventDescription","ListItemSecondaryAction","ButtonGroup","SignCheckPoint","actions","Timeline","ListEvents","List","showTimeline","setShowTimeline","_b","formType","setFormType","_c","setExpanded","loadMoreTransactions","ListCategories","maxWidth","height","innerHeight","marginBottom","fullWidth","ICON_IDS","IconSelect","initialValue","iconId","useStyles","makeStyles","theme","createStyles","node","width","backgroundColor","palette","background","paper","Tree","level","onSelectIcon","onSaveNode","classes","setOpen","primary","name","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","disablePadding","children","child","NodeListItem","setEditable","pickingIcon","setPickingIcon","_d","nodeName","setNodeName","_e","setIconId","dense","role","undefined","autoFocus","onBlur","edge","CategoryPage","root","setRoot","TreefyCategories","UpdateCategory","history","pushHistory","getPathName","history__WEBPACK_IMPORTED_MODULE_0__","pathname","searchString","keys","push","search","path","endsWith","UrlStateContext","ButlerContext","StateContext","react__WEBPACK_IMPORTED_MODULE_0__","_src_types__WEBPACK_IMPORTED_MODULE_1__","_src_reducers__WEBPACK_IMPORTED_MODULE_2__","formatDate","getIsoDateString","getToday","mergeArrays","connectButler","react_redux__WEBPACK_IMPORTED_MODULE_0__","redux__WEBPACK_IMPORTED_MODULE_1__","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_2__","month","day","timeZone","getFullYear","getMonth","existing","incoming","prependOrAppend","reduce","accumulator","findIndex","mapDispatchToProps","stateMapper","RootComponent","react__WEBPACK_IMPORTED_MODULE_6__","_src_common__WEBPACK_IMPORTED_MODULE_12__","_contexts__WEBPACK_IMPORTED_MODULE_10__","Provider","Body","Root","react_redux__WEBPACK_IMPORTED_MODULE_8__","getItem","_src_selectors__WEBPACK_IMPORTED_MODULE_16__","redux__WEBPACK_IMPORTED_MODULE_5__","PageList","UrlPathsMap","_src_TransactionList__WEBPACK_IMPORTED_MODULE_17__","_src_TransactionChart__WEBPACK_IMPORTED_MODULE_15__","_src_CategoryPage__WEBPACK_IMPORTED_MODULE_9__","_src_history__WEBPACK_IMPORTED_MODULE_13__","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","LoginPage","_src_LoginPage__WEBPACK_IMPORTED_MODULE_14__","warn","App","react_hot_loader__WEBPACK_IMPORTED_MODULE_7__","module","react_router__WEBPACK_IMPORTED_MODULE_4__","FlexContainer","newStyle","display","flexDirection","newProps","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","_material_ui_core__WEBPACK_IMPORTED_MODULE_0__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","_src_history__WEBPACK_IMPORTED_MODULE_3__","_src_types__WEBPACK_IMPORTED_MODULE_4__","_src_Root_contexts__WEBPACK_IMPORTED_MODULE_5__","username","setUsername","password","setPassword","submitLogin","AuthenticateUser","setItem","alignItems","justifyContent","onKeyPress","charCode","EnumRoute","EventType","EnumStatementSource","BUTLER_ACTIONS","successCallback","route","GetIncomeExpenseReport","GetExpenseReport","getSelectableCategories","getVisibleTransactions","parseUrlState","getAuthToken","querystring__WEBPACK_IMPORTED_MODULE_0__","querystring__WEBPACK_IMPORTED_MODULE_0___default","n","_src_history__WEBPACK_IMPORTED_MODULE_1__","is_selectable","params","parse","middleware","apiMiddleware","store","getState","then","ok","json","status","main_store","redux_thunk_es","react_dom","react_router","document","getElementById","getInitialOption","lodash__WEBPACK_IMPORTED_MODULE_6___default","get","option","openDialog","closeDialog","onSelectOption","selectedOption","initialOption","react__WEBPACK_IMPORTED_MODULE_7__","marginRight","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","rice_instructor__WEBPACK_IMPORTED_MODULE_8__","placeholder","options"],"mappings":"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","file":"app.js","sourcesContent":["import { ACTIONS as actionCreators } from '@src/actions'\nimport {\n  ICheckPoint,\n  IStatement,\n  IImportBatch,\n  IUserTransaction,\n  ICategory,\n} from '@src/__generated__/backendSchemas'\n\nexport * from '@src/__generated__/backendSchemas'\n\nexport type IEvent = ICheckPoint | IStatement | IImportBatch\n\nexport interface State {\n  user_id: number\n  balance: string\n  events: Array<IEvent>\n  categories: Array<ICategory>\n  authToken: string | null\n  isAuthenticated: boolean\n  transactions: Array<IUserTransaction>\n  router?: any\n  snacks: Array<string>\n}\n\nexport type ActionType = typeof actionCreators\n\nexport enum UrlPathEnum {\n  Root = '/',\n  LoginPage = '/LoginPage',\n  TransactionList = '/TransactionList',\n  TransactionChart = '/TransactionChart',\n  CategoryPage = '/CategoryPage',\n}\n","export function addSnack(message: string) {\n  return {\n    type: 'ADD_SNACK',\n    snack: message,\n  }\n}\n\nexport function eatSnack() {\n  return {\n    type: 'EAT_SNACK',\n  }\n}\n\nexport const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${\n  window.location.port ? '8000' : ''\n}`\nexport const BASE_API_URL = `${BASE_URL}/api2`\n\nexport function callButlerApi(request: { endpoint: string; jsonBody: {}; authToken: string }) {\n  const url = `${BASE_API_URL}/${request.endpoint}/`\n  const jwt = request.authToken\n\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(request.jsonBody),\n    // credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n      Authorization: jwt ? `JWT ${jwt}` : '',\n    },\n  })\n}\n\nexport const ACTIONS = {\n  eatSnack,\n  addSnack,\n}\n","import { handleAction } from 'redux-actions'\nimport * as _ from 'lodash'\nimport { combineReducers } from 'redux'\nimport { State } from '@src/types'\nimport { mergeArrays } from '@src/utils'\n\nexport const initialState: State = {\n  balance: '',\n  user_id: 0,\n  events: [],\n  categories: [],\n  authToken: null,\n  isAuthenticated: false,\n  snacks: [],\n  transactions: [],\n}\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n\nconst snacks = createReducer(initialState.snacks, {\n  EAT_SNACK: snacks => [...snacks.slice(1)],\n  ADD_SNACK: (snacks, action) => [...snacks, action.snack],\n})\n\nconst createButlerReducer = (partialState: keyof State, initialState, sortBy?: (a) => number) => {\n  return handleAction(\n    `BUTLER_ANSWERED`,\n    (state, action: any) => {\n      if (!action.response[partialState]) {\n        return state\n      }\n      if (action.updateType === 'replace') {\n        return action.response[partialState]\n      } else if (action.updateType === 'do-nothing') {\n        return state\n      } else if (action.updateType === 'remove') {\n        return [...state].filter(\n          item => !action.response[partialState].find(deleted => deleted.id === item.id),\n        )\n      } else if (action.updateType === 'merge-append') {\n        const ret = mergeArrays(state, action.response[partialState], 'append')\n        if (sortBy) {\n          return _.sortBy(ret, sortBy)\n        }\n        return ret\n      } else {\n        throw new Error('not handled')\n      }\n    },\n    initialState,\n  )\n}\n\nconst reducers = combineReducers({\n  snacks,\n  transactions: createButlerReducer('transactions', initialState.transactions, transaction => {\n    return -1 * transaction.issued_date\n  }),\n  authToken: createButlerReducer('authToken', initialState.authToken),\n  categories: createButlerReducer('categories', initialState.categories),\n  events: createButlerReducer('events', initialState.events, e => {\n    return -1 * new Date(e.created_ts).getTime()\n  }),\n  balance: createButlerReducer('balance', initialState.balance),\n  user_id: createButlerReducer('user_id', initialState.balance),\n})\n\nexport default reducers\n","import { MenuItem, Select } from '@material-ui/core'\n// import { parseUrlState } from '@src/selectors'\nimport HighchartsData from 'highcharts-data'\nimport HighchartsDrilldown from 'highcharts-drilldown'\nimport * as React from 'react'\nimport Highchart from 'react-highcharts'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport u from 'updeep'\nimport { getIsoDateString } from '@src/utils'\nimport { BUTLER_ACTIONS } from '@src/types'\n\nHighchartsData(Highchart.Highcharts)\nHighchartsDrilldown(Highchart.Highcharts)\n\ntype ReportType = 'INCOME_EXPENSE' | 'EXPENSE'\n\nconst getChartConfig = ({ onClickColumn }) => {\n  return {\n    chart: {\n      type: 'column',\n      //height: 800,\n      //width: 800\n    },\n    title: {\n      text: 'Income/Expense Report',\n    },\n    xAxis: {\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Spend',\n        align: 'high',\n      },\n      labels: {\n        overflow: 'justify',\n      },\n    },\n    tooltip: {\n      valueSuffix: ' dollars',\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true,\n        },\n      },\n      column: {\n        dataLabels: {\n          enabled: true,\n        },\n        allowPointSelect: false,\n        events: {\n          click: onClickColumn,\n        },\n      },\n    },\n    legend: {\n      enabled: true,\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      shadow: true,\n    },\n    credits: {\n      enabled: false,\n    },\n  }\n}\ninterface Prop {\n  butler: typeof BUTLER_ACTIONS\n  initialReportType: string\n}\n\ninterface State {\n  config: any\n  reportTitle: string\n  chart: any\n  report_type: ReportType\n}\n\nclass TransactionChartComponent extends React.Component<Prop, State> {\n  constructor(props) {\n    super(props)\n    const config = getChartConfig({\n      onClickColumn: this.onClickColumn.bind(this),\n    })\n    this.state = {\n      config,\n      chart: null,\n      reportTitle: '',\n      report_type: props.initialReportType,\n    }\n  }\n\n  onClickColumn(e) {\n    if (this.state.report_type === 'INCOME_EXPENSE') {\n      return console.log(e)\n    }\n  }\n\n  getReportTitle(value) {\n    return value == 'INCOME_EXPENSE' ? 'Income/Expense Report' : 'Expense Report'\n  }\n\n  onChangeReportType = e => {\n    this.showReport(e.target.value)\n  }\n\n  showReport(report_type: ReportType) {\n    const today = new Date()\n    const threeMonthAgo = new Date()\n    threeMonthAgo.setDate(threeMonthAgo.getDate() - 180)\n    const apiName = report_type === 'INCOME_EXPENSE' ? 'GetIncomeExpenseReport' : 'GetExpenseReport'\n    this.props.butler[apiName](\n      { start_date: getIsoDateString(threeMonthAgo), end_date: getIsoDateString(today) },\n      'do-nothing',\n      res => {\n        const titled = u(\n          {\n            title: {\n              text: this.getReportTitle(report_type),\n            },\n          },\n          this.state.config,\n        )\n        const config = Object.assign({}, titled, res.chart_data)\n        this.setState({ chart: <Highchart config={config} /> })\n        this.setState({ report_type, config })\n      },\n    )\n  }\n\n  componentDidMount() {\n    this.showReport(this.state.report_type)\n  }\n\n  render() {\n    if (!this.state.config) {\n      return <p>Loading ...</p>\n    }\n    return (\n      <div>\n        <Select value={this.state.report_type} onChange={this.onChangeReportType}>\n          <MenuItem value={'INCOME_EXPENSE'}>Income/Expense</MenuItem>\n          <MenuItem value={'EXPENSE'}>Expense</MenuItem>\n        </Select>\n        <p>{this.state.reportTitle}</p>\n        {this.state.chart}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const TransactionChart = connect(\n  null,\n  mapDispatchToProps,\n)(TransactionChartComponent)\n","import { Button, Grid, TextField } from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ninterface OwnProps {\n  origin: 'plaid' | 'wave'\n}\n\ntype FinalProps = OwnProps & DispatchProps\nconst today = new Date().toISOString().slice(0, 10)\n\nexport class NewPlaidFormComponent extends React.Component<\n  FinalProps,\n  { start_date: string; end_date: string }\n> {\n  state = { start_date: today, end_date: today }\n\n  importTransactions = () => {\n    if (this.props.origin === 'plaid') {\n      this.props.butler.ImportFromPlaid(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    } else {\n      this.props.butler.ImportFromWave(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  setStartDate = e => {\n    this.setState({ start_date: e.target.value })\n  }\n  setEndDate = e => {\n    this.setState({ end_date: e.target.value })\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item xs={4}>\n          <TextField\n            type=\"date\"\n            label=\"from\"\n            value={this.state.start_date}\n            onChange={this.setStartDate}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField type=\"date\" label=\"to\" defaultValue={today} onChange={this.setEndDate} />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            onClick={this.importTransactions}\n            style={{ marginTop: '10px' }}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Import\n          </Button>\n        </Grid>\n      </Grid>\n    )\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewPlaidForm = connect<{}, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(NewPlaidFormComponent)\n","import { Button } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface Prop {\n  submitFileContent: (content: string | ArrayBuffer | null) => void\n  button?: React.ReactElement<any>\n}\nexport class FileUploadButton extends React.Component<Prop, any> {\n  fileInput: any\n\n  onFileInputChange = event => {\n    const file = event.target.files[0]\n    const reader = new FileReader()\n\n    const callback = () => this.props.submitFileContent(reader.result)\n    reader.addEventListener('load', callback, false)\n    if (file) {\n      reader.readAsText(file)\n    }\n  }\n\n  render() {\n    const button = this.props.button || (\n      <Button variant=\"outlined\" component=\"span\">\n        Upload\n      </Button>\n    )\n    return (\n      <div>\n        <input\n          id=\"file-upload-form\"\n          hidden\n          ref={ref => (this.fileInput = ref)}\n          onChange={this.onFileInputChange}\n          type=\"file\"\n        />\n        <label htmlFor=\"file-upload-form\">{button}</label>\n      </div>\n    )\n  }\n}\n","import {\n  Select,\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  MenuItem,\n} from '@material-ui/core'\n\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { FileUploadButton } from '../components/FileUploadButton'\nimport { BUTLER_ACTIONS, EnumStatementSource } from '@src/__generated__/backendSchemas'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = OwnProps & DispatchProps\n\ninterface State {\n  selectedSource: EnumStatementSource\n}\n\nexport class StatementFormContainer extends React.Component<Prop, State> {\n  state = {\n    selectedSource: EnumStatementSource.CHEQUE,\n  }\n\n  onSelectType = event => {\n    this.setState({ selectedSource: event.target.value })\n  }\n\n  submitFileContent = (content: string) => {\n    console.log(content)\n    if (this.state.selectedSource.length && content) {\n      this.props.butler.UploadStatement(\n        {\n          source: this.state.selectedSource,\n          content: content,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  render() {\n    const choices = ['CHEQUE', 'PC_MASTER', 'SCOTIA_MASTER', 'VISA']\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <Select value={this.state.selectedSource} onChange={this.onSelectType}>\n                  {choices.map(c => {\n                    return (\n                      <MenuItem key={c} value={c}>\n                        {c}\n                      </MenuItem>\n                    )\n                  })}\n                </Select>\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FileUploadButton submitFileContent={this.submitFileContent} />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewStatementForm = connect<OwnProps, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(StatementFormContainer)\n","import {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  TextField,\n} from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getSelectableCategories } from '../selectors'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { BUTLER_ACTIONS, CreateTransaction__Request } from '@src/types'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport { getToday } from '@src/utils'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface PropsFromStore {\n  selectableCategories: Array<ICategory>\n}\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Prop = OwnProps & PropsFromStore & DispatchProps\n\ninterface State {\n  transaction: CreateTransaction__Request\n}\n\ntype FieldName =\n  | 'issued_date'\n  | 'merchant'\n  | 'notes'\n  | 'category_id'\n  | 'total_amount'\n  | 'balance_adjust'\n\nconst fieldConfig = {\n  issued_date: { type: 'date', required: true },\n  merchant: { type: 'text', required: true },\n  notes: { type: 'text', required: false },\n  category_id: { type: 'number', required: false },\n  balance_adjust: { type: 'number', required: false },\n  total_amount: { type: 'number', required: true },\n}\n\nconst FieldInput = (props: {\n  fieldName: FieldName\n  updateField: (fieldName) => (event) => void\n  instance: CreateTransaction__Request\n}) => {\n  const { fieldName, updateField, instance } = props\n  const config = fieldConfig[fieldName]\n  let error = false\n  if (config.required && !instance[fieldName]) {\n    error = true\n  } else if (config.required && config.type === 'number' && !instance[fieldName]) {\n    error = true\n  }\n\n  return (\n    <TextField\n      type={config.type}\n      required={config.required}\n      error={error}\n      label={fieldName}\n      value={instance[fieldName]}\n      onChange={updateField(fieldName)}\n    />\n  )\n}\nconst getInitialState = () => {\n  return {\n    transaction: {\n      issued_date: getToday(),\n      merchant: '',\n      notes: '',\n      category_id: 47,\n      total_amount: '0',\n      balance_adjust: '0',\n    },\n  }\n}\n\nclass NewTransactionFormContainer extends React.Component<Prop, State> {\n  state = getInitialState()\n\n  createTransaction = () => {\n    this.props.butler.CreateTransaction(this.state.transaction, 'merge-append', data => {\n      this.props.onClose()\n    })\n  }\n  updateField = (fieldName: FieldName) => {\n    const old = this.state.transaction\n    return event => {\n      const newState = Object.assign({}, old, {\n        [fieldName]: event.target.value,\n      })\n      this.setState({ transaction: newState })\n    }\n  }\n  isValid() {\n    const t = this.state.transaction\n    return [t.issued_date, t.merchant, +t.total_amount].every(Boolean)\n  }\n  render() {\n    const { selectableCategories } = this.props\n    const transaction = this.state.transaction\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  instance={transaction}\n                  fieldName=\"issued_date\"\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"merchant\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"total_amount\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <SingleSelectField\n                  instance={transaction}\n                  choices={selectableCategories.map(cat => {\n                    return {\n                      value: cat.id,\n                      label: cat.description,\n                      mui_icon_id: cat.mui_icon_id,\n                    }\n                  })}\n                  instancePropNameToUpdate=\"category_id\"\n                  onChange={(instance, changes) => {\n                    const newState = Object.assign({}, this.state.transaction, changes)\n                    this.setState({ transaction: newState })\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"notes\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"balance_adjust\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.setState(getInitialState())\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              size=\"small\"\n              color=\"primary\"\n              onClick={this.createTransaction}\n              disabled={!this.isValid()}\n            >\n              Save\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    balance: state.balance,\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewTransactionForm = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NewTransactionFormContainer)\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { InputAdornment, Menu, MenuItem, TextField } from '@material-ui/core'\nimport { Search } from '@material-ui/icons'\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum, BUTLER_ACTIONS, State } from '@src/types'\n\ninterface PropsFromStore {\n  suggestions: Array<any>\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Props = PropsFromStore & DispatchProps\n\nclass SearchBarComponent extends React.Component<Props, { anchorEl: JSX.Element | null }> {\n  state = { anchorEl: null }\n\n  debounced = _.debounce(\n    newValue =>\n      this.props.butler.ListTransactions({ search_text: newValue }, 'replace', data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          search_text: newValue,\n        }),\n      ),\n    500,\n  )\n\n  onFocus = event => {\n    this.setState({ anchorEl: event.currentTarget })\n  }\n  handleClose = event => {\n    this.setState({ anchorEl: null })\n  }\n  onSearch = event => {\n    this.debounced(event.target.value)\n  }\n  render() {\n    const icon = (\n      <InputAdornment position=\"start\">\n        <Search />\n      </InputAdornment>\n    )\n    return (\n      <div>\n        <TextField\n          onChange={this.onSearch}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">{icon}</InputAdornment>,\n          }}\n        />\n        <Menu\n          open={!!this.state.anchorEl}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n          getContentAnchorEl={null}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n        >\n          {this.props.suggestions.map((sug, index) => (\n            <MenuItem\n              key={index}\n              onClick={() => {\n                this.props.butler.ListTransactions({}, 'replace')\n              }}\n            >\n              {sug.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps): PropsFromStore => {\n  return { suggestions: [] }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const SearchBar = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchBarComponent)\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Add, AttachMoney, CreditCard, GridOn, History, Waves } from '@material-ui/icons'\nimport * as React from 'react'\nimport { IconMenu } from 'rice-instructor'\nimport { State as AppState } from '@src/types'\nimport { connectButler } from '@src/utils'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { SearchBar } from '@src/Root/SearchBar'\n\ninterface Prop {\n  balance: string | null\n  showForm: (formType: string) => void\n  toggleTimeline: () => void\n}\n\nconst TransactionListAppBarComponent = (props: Prop) => {\n  const showNewTransactionForm = () => {\n    props.showForm('transaction')\n  }\n\n  const showNewStatementForm = () => {\n    props.showForm('statement')\n  }\n\n  const showPlaidImportForm = () => {\n    props.showForm('plaid')\n  }\n  const showWaveImportForm = () => {\n    props.showForm('wave')\n  }\n\n  const toggleTimeline = () => {\n    props.toggleTimeline()\n  }\n\n  const butler = React.useContext(ButlerContext)\n  React.useEffect(() => {\n    if (!props.balance) {\n      butler.GetUserBalance({}, 'replace')\n    }\n  })\n  return (\n    <AppBar position=\"static\" color=\"default\">\n      <Toolbar>\n        <Tooltip title=\"Timeline\">\n          <IconButton onClick={toggleTimeline}>\n            <History />\n          </IconButton>\n        </Tooltip>\n        {props.balance ? (\n          <Typography variant=\"body1\" key=\"balance\">{`Balance: $${props.balance}`}</Typography>\n        ) : null}\n        <div style={{ flex: 1 }} />\n        <SearchBar />\n        <IconMenu icon={<Add />}>\n          <MenuItem key=\"new-transaction-menu\" onClick={showNewTransactionForm}>\n            <ListItemIcon>\n              <AttachMoney />\n            </ListItemIcon>\n            <ListItemText>Transaction</ListItemText>\n          </MenuItem>\n          <MenuItem key=\"new-statement-menu\" onClick={showNewStatementForm}>\n            <ListItemIcon>\n              <CreditCard />\n            </ListItemIcon>\n            <ListItemText>Statement</ListItemText>\n          </MenuItem>\n          <MenuItem key=\"new-wave-menu\" onClick={showWaveImportForm}>\n            <ListItemIcon>\n              <Waves color=\"primary\" />\n            </ListItemIcon>\n            <ListItemText>Wave Import</ListItemText>\n          </MenuItem>\n          <MenuItem key=\"new-plaid-menu\" onClick={showPlaidImportForm}>\n            <ListItemIcon>\n              <GridOn color=\"primary\" />\n            </ListItemIcon>\n            <ListItemText>Plaid Import</ListItemText>\n          </MenuItem>\n        </IconMenu>\n        <IconButton\n          onClick={() => {\n            sessionStorage.removeItem('authToken')\n            window.location.href = '/'\n          }}\n        >\n          <Icon className=\"material-icons\">exit_to_app</Icon>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    balance: state.balance,\n  }\n}\nexport const TransactionListAppBar = connectButler(mapStateToProps)(TransactionListAppBarComponent)\n","import * as React from 'react'\n\nimport { Grid, IconButton } from '@material-ui/core'\nimport { Check, Close } from '@material-ui/icons'\nimport { IPrediction, CreateTransaction__Request } from '../types/index'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { ICategory, BUTLER_ACTIONS, IUserTransaction } from '@src/__generated__/backendSchemas'\n\ninterface CategoryFieldProp {\n  transaction: IUserTransaction | CreateTransaction__Request\n  butler: typeof BUTLER_ACTIONS\n  selectableCategories: Array<ICategory>\n}\n\ninterface SmartCatProp {\n  prediction: IPrediction\n  onAccept: () => void\n}\nexport class SmartCatField extends React.Component<SmartCatProp, any> {\n  render() {\n    const { prediction, onAccept } = this.props\n    const split = prediction.split ? 'Split ' : ''\n    return (\n      <div style={{ color: 'rgb(0, 188, 212)', fontWeight: 'bold' }}>\n        {`${split}${prediction.category_name}?`}\n        <Grid container>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => onAccept()}>\n              <Check color=\"primary\" />\n            </IconButton>\n          </Grid>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => this.setState({ declined: true })}>\n              <Close color=\"secondary\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport class CategoryField extends React.Component<CategoryFieldProp, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      declined: false,\n    }\n  }\n\n  onSelectCategory(transaction, changes) {\n    return this.props.butler.UpdateTransaction(\n      {\n        id: transaction.id,\n        category_id: changes.category_id,\n      },\n      'merge-append',\n    )\n  }\n\n  render() {\n    const { selectableCategories, transaction } = this.props\n    if (!selectableCategories.length) return <div></div>\n    return (\n      <SingleSelectField\n        instance={transaction}\n        choices={selectableCategories.map(cat => {\n          return {\n            value: cat.id,\n            mui_icon_id: cat.mui_icon_id,\n            label: cat.description,\n          }\n        })}\n        instancePropNameToUpdate=\"category_id\"\n        onChange={this.onSelectCategory.bind(this)}\n      />\n    )\n  }\n}\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { TextField } from '@material-ui/core'\n\ninterface IDebouncedTextField {\n  helperText?: string\n  onBounce: (newValue) => void\n  setter: (newValue) => void\n  type?: string\n  value?: any\n}\n\nexport const DebouncedTextField: React.FunctionComponent<IDebouncedTextField> = ({\n  helperText,\n  setter,\n  onBounce,\n  type,\n  value,\n}) => {\n  const debounced = React.useCallback(_.debounce(onBounce, 1000), [])\n\n  return (\n    <TextField\n      helperText={helperText}\n      type={type}\n      onChange={event => {\n        setter(event.target.value)\n        debounced(event.target.value)\n      }}\n      value={value}\n    />\n  )\n}\n","import * as React from 'react'\nimport { Icon } from '@material-ui/core'\n\nexport class PlaidIcon extends React.Component<{}> {\n  render() {\n    return (\n      <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n        grid_on\n      </Icon>\n    )\n  }\n}\n","import {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Fab,\n  Grid,\n  Icon,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport * as _ from 'lodash'\nimport JSONTree from 'react-json-tree'\nimport * as React from 'react'\nimport { getSelectableCategories } from '../selectors'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { CategoryField, SmartCatField } from '@src/components/CategoryField'\nimport { DebouncedTextField } from '@src/components/DebouncedTextField'\nimport { ICategory, IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { formatDate, connectButler } from '@src/utils'\nimport { PlaidIcon } from '@src/components/icons'\n\ninterface ITransactionRowProps {\n  transaction: IUserTransaction\n  user_id: number\n  expanded: boolean\n  selectableCategories: Array<ICategory>\n  onToggleExpansion: (event, expanded) => void\n}\n\nexport const CategoryInfoField = (props: {\n  transaction: IUserTransaction\n  category: ICategory | null\n  user_id: number\n  onAccept: (arg: { id: number; category_id: number; balance_adjust: string }) => void\n}) => {\n  const { transaction, category, onAccept } = props\n  const prediction = transaction.prediction\n  const multiplier = props.user_id === transaction.lender_id ? 1 : -1\n  if (prediction) {\n    return (\n      <SmartCatField\n        prediction={prediction}\n        onAccept={() =>\n          onAccept({\n            id: transaction.id,\n            category_id: prediction.category_id,\n            balance_adjust: prediction.split\n              ? ((multiplier * parseFloat(transaction.total_amount)) / 2).toString()\n              : '0',\n          })\n        }\n      />\n    )\n  }\n  return (\n    <Grid container spacing={10}>\n      <Grid item xs={1}>\n        <Icon className=\"material-icons\">{category ? category.mui_icon_id : null}</Icon>\n      </Grid>\n      <Grid item xs>\n        {category ? <Typography color=\"textSecondary\">{category.description}</Typography> : null}\n      </Grid>\n    </Grid>\n  )\n}\n\nconst TransactionRowComponent = (props: ITransactionRowProps) => {\n  const { user_id, selectableCategories, transaction, expanded, onToggleExpansion } = props\n  const butler = React.useContext(ButlerContext)\n  console.log('render row')\n\n  const onAcceptSmartCat = (fields: {\n    id: number\n    category_id: number\n    balance_adjust: string\n  }) => {\n    butler.UpdateTransaction({ ...fields }, 'merge-append', () =>\n      fields.balance_adjust ? butler.GetUserBalance({}, 'replace') : null,\n    )\n  }\n  const getCategory = () => {\n    if (!transaction.category_id) return null\n    return selectableCategories.find(c => c.id === transaction.category_id) || null\n  }\n  const [balanceAdjust, setBalanceAdjust] = React.useState(transaction.balance_adjust)\n  return (\n    <div>\n      <ExpansionPanel\n        disabled={!transaction.editable}\n        expanded={expanded}\n        onChange={onToggleExpansion}\n      >\n        <ExpansionPanelSummary>\n          <Grid container spacing={10}>\n            <Grid item xs={3} sm={4}>\n              <Typography>{formatDate(transaction.issued_date)}</Typography>\n              {expanded ? null : (\n                <CategoryInfoField\n                  user_id={user_id}\n                  transaction={transaction}\n                  category={getCategory()}\n                  onAccept={onAcceptSmartCat}\n                />\n              )}\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              {transaction.origin_payload ? (\n                <Tooltip\n                  title={\n                    <JSONTree shouldExpandNode={() => true} data={transaction.origin_payload} />\n                  }\n                >\n                  {transaction.origin_payload['anchor_account_name'] ? (\n                    <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n                      waves\n                    </Icon>\n                  ) : (\n                    <PlaidIcon />\n                  )}\n                </Tooltip>\n              ) : null}\n              <Typography variant=\"body1\">{transaction.merchant}</Typography>\n              <div>\n                <Typography color=\"textSecondary\">{transaction.account_name}</Typography>\n                <Typography color=\"textSecondary\">{transaction.plaid_category}</Typography>\n                <Typography color=\"textSecondary\">{transaction.notes}</Typography>\n              </div>\n            </Grid>\n            <Grid item xs={3} sm={4} style={{ paddingLeft: '40px' }}>\n              <Typography>{`$${transaction.total_amount}`}</Typography>\n              {+transaction.balance_adjust && !expanded ? (\n                <Typography\n                  style={{\n                    color: +transaction.balance_adjust > 0 ? 'green' : 'red',\n                  }}\n                >\n                  {`$${transaction.balance_adjust}`}\n                </Typography>\n              ) : null}\n            </Grid>\n          </Grid>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Grid container spacing={10}>\n            <Grid item xs={6} sm={4}>\n              <DebouncedTextField\n                helperText=\"notes\"\n                setter={() => {\n                  // do nothing\n                }}\n                onBounce={newValue =>\n                  butler.UpdateTransaction({ id: transaction.id, notes: newValue }, 'merge-append')\n                }\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <CategoryField\n                {...{\n                  transaction,\n                  selectableCategories,\n                  butler,\n                }}\n              />\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <DebouncedTextField\n                type=\"number\"\n                helperText=\"Balance Adjust\"\n                value={balanceAdjust}\n                setter={setBalanceAdjust}\n                onBounce={newValue => {\n                  butler.UpdateTransaction(\n                    {\n                      id: transaction.id,\n                      balance_adjust: newValue,\n                    },\n                    'merge-append',\n                    () => butler.GetUserBalance({}, 'replace'),\n                  )\n                }}\n              />\n            </Grid>\n            <Grid item xs={6} sm={1} style={{ textAlign: 'right' }}>\n              <Fab\n                size=\"medium\"\n                color=\"secondary\"\n                aria-label=\"Delete\"\n                onClick={() =>\n                  butler.ArchiveTransaction(\n                    {\n                      id: transaction.id,\n                    },\n                    'remove',\n                  )\n                }\n              >\n                <Delete />\n              </Fab>\n            </Grid>\n          </Grid>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </div>\n  )\n}\nconst areEqual = (last: ITransactionRowProps, next: ITransactionRowProps) => {\n  if (\n    _.isEqual(last.transaction, next.transaction) &&\n    last.expanded === next.expanded &&\n    last.selectableCategories.length === next.selectableCategories.length\n  ) {\n    return true\n  }\n  return false\n}\nexport const TransactionRow = connectButler(state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    user_id: state.user_id,\n  }\n})(React.memo(TransactionRowComponent, areEqual))\n","import * as React from 'react'\nimport {\n  ListItemSecondaryAction,\n  ButtonGroup,\n  Button,\n  Tooltip,\n  Icon,\n  ListItemIcon,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core'\nimport { getEventButtonIcon, getEventIcon, getEventDescription } from './utils'\nimport { BASE_URL } from '@src/actions'\nimport { ButlerContext, UrlStateContext } from '@src/Root/contexts'\nimport { EventType, ICheckPoint, IEvent, UrlPathEnum } from '@src/types'\nimport { pushHistory } from '@src/history'\n\nexport const EventRow = (props: { authToken: string; event: IEvent }) => {\n  const urlState = React.useContext(UrlStateContext)\n  const butler = React.useContext(ButlerContext)\n\n  const { event } = props\n  const disabled = urlState.event_id === `${event.event_type}-${event.id}`\n  if (event.event_type === EventType.CHECKPOINT) {\n    return (\n      <CheckpointListItem\n        authToken={props.authToken}\n        disabled={disabled}\n        checkpoint={event as ICheckPoint}\n      />\n    )\n  }\n  const eventIcon = getEventIcon(event)\n  const onFilter = e => {\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${event.event_type}-${event.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${event.event_type}-${event.id}`,\n        }),\n    )\n  }\n  const eventButtonIcon = getEventButtonIcon(event)\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={event.event_type}>\n          <Icon color=\"primary\">{eventIcon}</Icon>\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(event.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{getEventDescription(event)}</Typography>\n      </ListItemText>\n      {eventButtonIcon ? (\n        <ListItemSecondaryAction>\n          <Button>\n            <Icon>{eventButtonIcon}</Icon>\n          </Button>\n        </ListItemSecondaryAction>\n      ) : null}\n    </ListItem>\n  )\n}\n\nexport const CheckpointListItem: React.FC<{\n  authToken: string\n  disabled: boolean\n  checkpoint: ICheckPoint\n}> = ({ authToken, checkpoint, disabled }) => {\n  const butler = React.useContext(ButlerContext)\n  const onFilter = e => {\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${checkpoint.event_type}-${checkpoint.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${checkpoint.event_type}-${checkpoint.id}`,\n        }),\n    )\n  }\n  const description = checkpoint.signed_ts\n    ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n        checkpoint.signed_ts,\n      ).toLocaleDateString()}`\n    : 'Not Signed'\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={checkpoint.event_type}>\n          {checkpoint.signed_ts ? (\n            <Icon color=\"primary\">toll</Icon>\n          ) : (\n            <Icon style={{ color: 'green' }}>fiber_new</Icon>\n          )}\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(checkpoint.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{description}</Typography>\n      </ListItemText>\n      <ListItemSecondaryAction>\n        <ButtonGroup\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          aria-label=\"Small outlined button group\"\n        >\n          {checkpoint.signed_ts ? null : (\n            <Button\n              size=\"small\"\n              color=\"secondary\"\n              onClick={() => butler.SignCheckPoint({ id: checkpoint.id }, 'merge-append')}\n            >\n              <Icon>plus_one</Icon>\n            </Button>\n          )}\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            disabled={!authToken}\n            onClick={() => {\n              window.open(`${BASE_URL}/export-checkpoint/${authToken}/${checkpoint.id}/`, '_blank')\n            }}\n          >\n            <Icon>cloud_download</Icon>\n          </Button>\n        </ButtonGroup>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n","import { ICheckPoint, EventType, IStatement, IImportBatch, IEvent } from '@src/types'\n\nexport const getEventDescription = (e: IEvent) => {\n  if (e.event_type === EventType.CHECKPOINT) {\n    const checkpoint = e as ICheckPoint\n    return checkpoint.signed_ts\n      ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n          checkpoint.signed_ts,\n        ).toLocaleDateString()}`\n      : 'Not Signed'\n  }\n  if (e.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = e as IImportBatch\n    return `${batch_import.origin}: ${batch_import.start_date} TO ${batch_import.end_date}`\n  }\n  if (e.event_type === EventType.STATEMENT_UPLOAD) {\n    const upload = e as IStatement\n    return `${upload.source}: ${upload.first_date} TO ${upload.last_date}`\n  }\n  throw new Error('not possible')\n}\nexport const getEventIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'toll'\n  }\n  if (event.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = event as IImportBatch\n    return { plaid: 'grid_on', wave: 'waves' }[batch_import.origin]\n  }\n  if (event.event_type === EventType.STATEMENT_UPLOAD) {\n    // const upload = memory as IStatement\n    return 'cloud_upload'\n  }\n  throw new Error('not possible')\n}\n\nexport const getEventButtonIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'plus_one'\n  }\n  return null\n}\n","import { List } from '@material-ui/core'\nimport * as React from 'react'\nimport { EventRow } from './EventRow'\nimport { connectButler } from '@src/utils'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { IEvent } from '@src/types'\nimport { getAuthToken } from '@src/selectors'\n\nconst TimelineComponent = (props: { events: Array<IEvent>; authToken: string }) => {\n  const butler = React.useContext(ButlerContext)\n  React.useEffect(() => {\n    butler.ListEvents({}, 'replace')\n  }, [])\n  return (\n    <div>\n      <List>\n        {props.events.map((e, index) => {\n          return <EventRow authToken={props.authToken} event={e} key={index} />\n        })}\n      </List>\n    </div>\n  )\n}\nexport const Timeline = connectButler(state => {\n  return {\n    events: state.events,\n    authToken: getAuthToken(state),\n  }\n})(TimelineComponent)\n","import * as _ from 'lodash'\nimport { Button, Grid } from '@material-ui/core'\nimport * as React from 'react'\nimport { getSelectableCategories, getVisibleTransactions } from '../selectors'\n\nimport { NewPlaidForm } from './NewPlaidForm'\nimport { NewStatementForm } from './NewStatementForm'\nimport { NewTransactionForm } from './NewTransactionForm'\nimport { TransactionListAppBar } from './TransactionListAppBar'\nimport { TransactionRow } from './TransactionRow'\nimport { IUserTransaction, ICategory } from '@src/__generated__/backendSchemas'\nimport { Timeline } from '@src/Root/Timeline'\nimport { ButlerProps, connectButler } from '@src/utils'\nimport { State as AppState } from '@src/types'\n\ninterface PropsFromStore {\n  transactions: Array<IUserTransaction>\n  selectableCategories: Array<ICategory>\n}\nconst PAGE_SIZE = 40\n\ntype Prop = ButlerProps & PropsFromStore\n\ntype FormType = 'transaction' | 'plaid' | 'statement' | 'wave'\n\nconst TransactionListContainer = (props: Prop) => {\n  console.log('rerender list')\n  const [showTimeline, setShowTimeline] = React.useState(true)\n  const [formType, setFormType] = React.useState<FormType | null>(null)\n  const [expanded, setExpanded] = React.useState<number | null>(null)\n  const loadMoreTransactions = () => {\n    const start = props.transactions.length\n    const end = start + PAGE_SIZE\n    props.butler.ListTransactions({ start, end }, 'merge-append')\n  }\n\n  React.useEffect(() => {\n    if (!props.selectableCategories.length) {\n      props.butler.ListCategories({}, 'replace')\n      loadMoreTransactions()\n    }\n  })\n\n  const showForm = (formType: FormType) => {\n    setFormType(formType)\n  }\n  return (\n    <div style={{ maxWidth: '100%' }}>\n      <TransactionListAppBar toggleTimeline={setShowTimeline} showForm={showForm} />\n      <div\n        style={{\n          height: window.innerHeight - 70,\n          overflow: 'scroll',\n        }}\n      >\n        <Grid container>\n          {showTimeline ? (\n            <Grid item sm={3}>\n              <Timeline />\n            </Grid>\n          ) : null}\n          <Grid item sm={showTimeline ? 9 : 12}>\n            <div style={{ marginBottom: '20px' }}>\n              {formType === 'transaction' ? (\n                <NewTransactionForm onClose={() => setFormType(null)} />\n              ) : null}\n              {formType === 'statement' ? (\n                <NewStatementForm onClose={() => setFormType(null)} />\n              ) : null}\n              {formType === 'plaid' ? <NewPlaidForm origin=\"plaid\" /> : null}\n              {formType === 'wave' ? <NewPlaidForm origin=\"wave\" /> : null}\n            </div>\n            {props.transactions.map(t => (\n              <TransactionRow\n                expanded={expanded === t.id}\n                key={t.id}\n                transaction={t}\n                onToggleExpansion={(event, expanded) => setExpanded(t.id)}\n              />\n            ))}\n            <Button fullWidth size=\"large\" color=\"secondary\" onClick={loadMoreTransactions}>\n              ({props.transactions.length}) Click to Load More ...\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: AppState): PropsFromStore => {\n  return {\n    transactions: getVisibleTransactions(state),\n    selectableCategories: getSelectableCategories(state),\n  }\n}\n\nexport const TransactionList = connectButler(mapStateToProps)(\n  React.memo(TransactionListContainer, (last: Prop, next: Prop) => {\n    if (\n      last.selectableCategories.length === next.selectableCategories.length &&\n      _.isEqual(last.transactions, next.transactions)\n    ) {\n      return true\n    }\n    return false\n  }),\n)\n","import { Typography, Icon, ListItemIcon, Select, MenuItem } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface IIconSelect {\n  initialValue: string | null\n  onChange: (event, child) => void\n  /*\n  options: Array<{\n    value: number | string\n    label: string\n  }>\n   */\n}\nconst ICON_IDS = [\n  'attach_money',\n  'beach_access',\n  'cake',\n  'compare_arrows',\n  'free_breakfast',\n  'gavel',\n  'home',\n  'local_activity',\n  'local_bar',\n  'local_car_wash',\n  'local_gas_station',\n  'local_grocery_store',\n  'local_hospital',\n  'local_parking',\n  'local_taxi',\n  'motorcycle',\n  'movie',\n  'not_interested',\n  'perm_scan_wifi',\n  'phone_iphone',\n  'power',\n  'question_mark',\n  'restaurant',\n  'rowing',\n  'school',\n  'settings_input_component',\n  'settings_input_hdmi',\n  'shopping_basket',\n  'subway',\n  'theaters',\n  'pets',\n]\nexport const IconSelect: React.FC<IIconSelect> = ({ initialValue, onChange }) => {\n  return (\n    <Select onChange={onChange} value={initialValue}>\n      {ICON_IDS.map(iconId => (\n        <MenuItem key={iconId} value={iconId}>\n          <ListItemIcon>\n            <Icon color=\"primary\">{iconId}</Icon>\n          </ListItemIcon>\n          <Typography style={{ float: 'right' }}>{iconId}</Typography>\n        </MenuItem>\n      ))}\n    </Select>\n  )\n}\n","import * as React from 'react'\n\nimport {\n  makeStyles,\n  TextField,\n  ListItemSecondaryAction,\n  IconButton,\n  Theme,\n  createStyles,\n  Icon,\n  ListItemIcon,\n  Collapse,\n  List,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core'\nimport { ExpandMore, ExpandLess } from '@material-ui/icons'\nimport { IconSelect } from '@src/components/IconSelect'\n\nimport { ITreeNode } from '@src/types'\n\ninterface ITreeProps {\n  node: ITreeNode\n  onSaveNode: (number, string) => void\n  onSelectIcon: (id: number, iconId: string) => void\n  level?: number\n}\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    node: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  }),\n)\n\nexport const Tree: React.FC<ITreeProps> = props => {\n  const { node, level = 0, onSelectIcon, onSaveNode } = props\n  const classes = useStyles()\n\n  const [open, setOpen] = React.useState(true)\n\n  const handleClick = () => {\n    setOpen(!open)\n  }\n  return (\n    <List component=\"nav\" className={classes.node}>\n      <ListItem button onClick={handleClick} style={{ paddingLeft: `${32 * level}px` }}>\n        <ListItemIcon>\n          <Icon color=\"secondary\">{node.mui_icon_id}</Icon>\n        </ListItemIcon>\n        <ListItemText primary={node.name}></ListItemText>\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {node.children.map(child =>\n            child.children.length ? (\n              <Tree\n                onSelectIcon={onSelectIcon}\n                onSaveNode={onSaveNode}\n                key={child.id}\n                node={child}\n                level={level + 1}\n              />\n            ) : (\n              <NodeListItem\n                onSelectIcon={onSelectIcon}\n                onSaveNode={onSaveNode}\n                key={child.id}\n                node={child}\n                level={level + 1}\n              />\n            ),\n          )}\n        </List>\n      </Collapse>\n    </List>\n  )\n}\n\nconst NodeListItem: React.FC<{\n  node: ITreeNode\n  level: number\n  onSaveNode: (number, string) => void\n  onSelectIcon: (id: number, iconId: string) => void\n}> = ({ node, level, onSaveNode, onSelectIcon }) => {\n  const [editable, setEditable] = React.useState(false)\n  const [pickingIcon, setPickingIcon] = React.useState(false)\n  const [nodeName, setNodeName] = React.useState(node.name)\n  const [iconId, setIconId] = React.useState(node.mui_icon_id)\n  return (\n    <>\n      <ListItem\n        key={node.id}\n        dense\n        button\n        role={undefined}\n        style={{ paddingLeft: `${32 * (level + 1)}px` }}\n      >\n        {editable ? (\n          <TextField\n            autoFocus={true}\n            value={nodeName}\n            onChange={event => setNodeName(event.target.value)}\n            onBlur={() => {\n              setEditable(false)\n              onSaveNode(node.id, nodeName)\n            }}\n          />\n        ) : (\n          <>\n            {pickingIcon ? (\n              <IconSelect\n                onChange={(e, child) => {\n                  onSelectIcon(node.id, e.target.value)\n                  setIconId(e.target.value)\n                  setPickingIcon(false)\n                }}\n                initialValue={iconId}\n              ></IconSelect>\n            ) : (\n              <ListItemText onClick={() => setEditable(true)} primary={nodeName}></ListItemText>\n            )}\n            <ListItemSecondaryAction>\n              <IconButton onClick={() => setPickingIcon(true)} edge=\"end\">\n                <Icon color=\"primary\">{iconId}</Icon>\n              </IconButton>\n            </ListItemSecondaryAction>\n          </>\n        )}\n      </ListItem>\n    </>\n  )\n}\n","import * as React from 'react'\nimport { Tree } from './Tree'\nimport { ButlerContext } from '@src/Root/contexts'\nimport { ITreeNode } from '@src/__generated__/backendSchemas'\n\nexport const CategoryPage: React.FC<{}> = props => {\n  const butler = React.useContext(ButlerContext)\n  const [root, setRoot] = React.useState<ITreeNode | null>(null)\n  React.useEffect(() => {\n    if (!root) {\n      butler.TreefyCategories({}, 'replace', data => {\n        setRoot(data.root)\n      })\n    }\n  })\n  if (!root) {\n    return <div></div>\n  }\n  return (\n    <Tree\n      onSaveNode={(id: number, name: string) => butler.UpdateCategory({ id, name }, 'do-nothing')}\n      onSelectIcon={(id: number, iconId: string) =>\n        butler.UpdateCategory({ id, mui_icon_id: iconId }, 'do-nothing')\n      }\n      node={root}\n    />\n  )\n}\n","import { createBrowserHistory } from 'history'\nimport { UrlPathEnum } from '@src/types'\n\nexport const history = createBrowserHistory()\nexport const pushHistory = (\n  pathname: UrlPathEnum,\n  urlState?: {} | null,\n  state: {} | null = null,\n) => {\n  const searchString =\n    urlState && urlState && Object.keys(urlState).length\n      ? '?urlState=' + JSON.stringify(urlState)\n      : ''\n  return history.push({\n    pathname,\n    search: searchString,\n    state,\n  })\n}\n\nexport const getPathName = () => {\n  const path = history.location.pathname\n  return path.endsWith('/') ? path.slice(0, path.length - 1) || '/' : path\n}\n","import * as React from 'react'\nimport { State, BUTLER_ACTIONS } from '@src/types'\nimport { initialState } from '@src/reducers'\n\nexport const UrlStateContext = React.createContext<any>({})\nexport const ButlerContext = React.createContext<typeof BUTLER_ACTIONS>(BUTLER_ACTIONS)\nexport const StateContext = React.createContext<State>(initialState)\n","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\nexport function stringToDate(dateString: string): Date {\n  const [year, month, day] = dateString.split('-').map(v => parseInt(v))\n  const ret = new Date(year, month - 1, day)\n  return ret\n}\nexport function formatDate(d: string): string {\n  const date = new Date(d)\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC',\n  })\n}\n\nexport const getIsoDateString = (d: Date) => {\n  const year = d.getFullYear()\n  const month = d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1\n  const day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport function getToday(): string {\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth() < 9 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n  const day = today.getDate() < 10 ? '0' + today.getDate() : today.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport interface Identifiable {\n  id: string | number\n}\nexport const mergeArrays = <T extends Identifiable>(\n  existing: Array<T>,\n  incoming: Array<T>,\n  prependOrAppend: 'prepend' | 'append',\n): Array<T> => {\n  return incoming.reduce(\n    function(accumulator: Array<T>, value: T) {\n      const index = existing.findIndex(x => x.id === value.id)\n      if (index >= 0) {\n        const ret = [\n          ...accumulator.slice(0, index),\n          value,\n          ...accumulator.slice(index + 1, accumulator.length),\n        ]\n        return ret\n      } else {\n        return prependOrAppend === 'append' ? [...accumulator, value] : [value, ...accumulator]\n      }\n    },\n    [...existing],\n  )\n}\nexport interface ButlerProps {\n  butler: typeof BUTLER_ACTIONS\n}\nconst mapDispatchToProps = (dispatch): ButlerProps => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\n\nexport const connectButler = <T extends {}>(stateMapper: ((state) => T) | null) => {\n  return connect<T, ButlerProps>(\n    stateMapper,\n    mapDispatchToProps,\n  )\n}\n","import { List, ListItem, ListItemText } from '@material-ui/core'\nimport { Route, Switch } from 'react-router'\nimport { bindActionCreators } from 'redux'\nimport * as React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { connect } from 'react-redux'\nimport { CategoryPage } from '@src/CategoryPage'\nimport { StateContext, UrlStateContext, ButlerContext } from './contexts'\nimport { BUTLER_ACTIONS, State, UrlPathEnum } from '@src/types'\nimport * as C from '@src/common'\nimport { getPathName, pushHistory } from '@src/history'\nimport { LoginPage } from '@src/LoginPage'\nimport { TransactionChart } from '@src/TransactionChart'\nimport { parseUrlState } from '@src/selectors'\nimport { TransactionList } from '@src/TransactionList'\n\ninterface StateProps {\n  isAuthenticated: boolean\n  urlState: any\n  state: State\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = StateProps & DispatchProps\n\nclass RootComponent extends React.Component<Prop, State> {\n  render() {\n    return (\n      <C.FlexContainer>\n        <div style={{ maxWidth: '100%', flex: 8 }}>\n          <StateContext.Provider value={this.props.state}>\n            <ButlerContext.Provider value={this.props.butler}>\n              <UrlStateContext.Provider value={this.props.urlState}>\n                <Body isAuthenticated={this.props.isAuthenticated} />\n              </UrlStateContext.Provider>\n            </ButlerContext.Provider>\n          </StateContext.Provider>\n        </div>\n      </C.FlexContainer>\n    )\n  }\n}\n\nexport const Root = connect<StateProps, DispatchProps>(\n  (state: State, ownProps) => {\n    return {\n      isAuthenticated: !!(state.authToken || sessionStorage.getItem('authToken')),\n      urlState: parseUrlState(),\n      state,\n    }\n  },\n  dispatch => ({\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }),\n)(RootComponent)\n\nconst PageList: React.FC = () => {\n  const UrlPathsMap = {\n    TransactionList,\n    TransactionChart,\n    CategoryPage,\n  }\n  return (\n    <List>\n      {Object.keys(UrlPathsMap).map((c, index) => {\n        return (\n          <ListItem key={index} button onClick={() => pushHistory(c as UrlPathEnum)}>\n            <ListItemText primary={c} />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nclass Body extends React.Component<{ isAuthenticated: boolean }> {\n  render() {\n    if (getPathName() === UrlPathEnum.LoginPage) {\n      return <LoginPage />\n    }\n    if (!this.props.isAuthenticated) {\n      console.warn('not authenticated!!!')\n      pushHistory(UrlPathEnum.LoginPage)\n      return <div />\n    }\n    if (getPathName() === UrlPathEnum.Root) {\n      return <PageList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionList) {\n      return <TransactionList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionChart) {\n      return <TransactionChart />\n    }\n    if (getPathName() === UrlPathEnum.CategoryPage) {\n      return <CategoryPage />\n    }\n\n    throw new Error(`Invalid paths: ${getPathName()}`)\n  }\n}\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={Root} />\n  </Switch>\n))\n","import React from 'react'\n\nexport { default as styled } from 'styled-components'\nexport { default as PropTypes } from 'prop-types'\n\n// Material\nexport { default as IconButton } from '@material-ui/core/IconButton'\nexport { default as TextField } from '@material-ui/core/TextField'\nexport { Card, CardActions, CardHeader, CardMedia } from '@material-ui/core'\nexport { default as LinearProgress } from '@material-ui/core/LinearProgress'\n\nimport { Table as TRC } from '@material-ui/core'\n\nexport { SingleSelectField } from './components/SingleSelectField'\n\nexport const S = {\n  secondary: 'rgb(255, 64, 129)',\n  Card: {\n    margin: '5px',\n  },\n  CardContainer: {\n    paddingBottom: '5px',\n  },\n  Toolbar: {\n    height: '56px',\n    background: '#4285f4',\n  },\n\n  SmallFont: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  filterFonts: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  Body: {\n    background: '#f2f2f2',\n  },\n}\n\nexport const isWide = () => window.screen.availWidth > 800\n\nexport const TableRowColumn = props => {\n  const style = Object.assign(\n    {},\n    {\n      whiteSpace: 'normal',\n      textOverflow: 'initial',\n    },\n    props.style,\n  )\n  return <TRC {...props} style={style} />\n}\n\nexport const FlexContainer = props => {\n  const defaultStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n  const newStyle = Object.assign({}, defaultStyle, props.style)\n  const newProps = Object.assign({}, props, { style: newStyle })\n  return <div {...newProps} />\n}\n","import { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport * as React from 'react'\n\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { ButlerContext } from '@src/Root/contexts'\n\nexport const LoginPage = props => {\n  const butler = React.useContext(ButlerContext)\n  const [username, setUsername] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const submitLogin = () => {\n    butler.AuthenticateUser(\n      {\n        username: username,\n        password: password,\n      },\n      'replace',\n      data => {\n        sessionStorage.setItem('authToken', data.authToken)\n        // Redirect to root\n        pushHistory(UrlPathEnum.Root)\n      },\n    )\n  }\n  return (\n    <div\n      style={{\n        height: `${window.innerHeight}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <TextField label=\"Username\" onChange={e => setUsername(e.target.value)} />\n      <br />\n      <TextField\n        onChange={e => setPassword(e.target.value)}\n        type=\"password\"\n        label=\"Password\"\n        onKeyPress={e => {\n          if (e.charCode == 13) {\n            submitLogin()\n          }\n        }}\n      />\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={() => submitLogin()}>\n        Login\n      </Button>\n    </div>\n  )\n}\n","/**\n * GENERATED CODE. DO NOT EDIT !!!\"\n */\nexport interface ArchiveTransaction__Request {\n  id: number\n}\nexport interface AuthenticateUserRequest {\n  username: string\n  password: string\n}\nexport interface AuthenticateUserResponse {\n  errors: {}\n  authToken: string\n}\nexport interface CreateTransaction__Request {\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  merchant: string\n  balance_adjust?: string\n}\nexport enum EnumRoute {\n  ListTransactions = 'ListTransactions',\n  AuthenticateUser = 'AuthenticateUser',\n  ListCategories = 'ListCategories',\n  TreefyCategories = 'TreefyCategories',\n  UpdateCategory = 'UpdateCategory',\n  ListEvents = 'ListEvents',\n  GetUserBalance = 'GetUserBalance',\n  UpdateTransaction = 'UpdateTransaction',\n  GetIncomeExpenseReport = 'GetIncomeExpenseReport',\n  GetExpenseReport = 'GetExpenseReport',\n  UploadStatement = 'UploadStatement',\n  ImportFromPlaid = 'ImportFromPlaid',\n  ImportFromWave = 'ImportFromWave',\n  SignCheckPoint = 'SignCheckPoint',\n  CreateTransaction = 'CreateTransaction',\n  ArchiveTransaction = 'ArchiveTransaction',\n}\nexport interface GetExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetIncomeExpenseReportResponse {\n  chart_data: {}\n}\nexport interface GetIncomeExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetUserBalanceRequest {}\nexport interface GetUserBalanceResponse {\n  balance: string\n  user_id: number\n}\nexport interface ITreeNode {\n  id: number\n  children: Array<ITreeNode>\n  mui_icon_id: string | null\n  name: string\n}\nexport interface ImportFromPlaidRequest {\n  start_date: string\n  end_date: string\n}\nexport interface IPlaidAccount {\n  account_id: string\n  name: string\n  type: string\n  subtype: string\n  mask: string\n}\nexport interface IPlaidTransaction {\n  account_id: string\n  account: IPlaidAccount\n  amount: number\n  category: Array<string>\n  category_id: string\n  date: string\n  iso_currency_code: string\n  name: string\n  pending: boolean\n  transaction_id: string\n  transaction_type: string\n}\nexport interface IWaveTransaction {\n  anchor_account_name: string\n  date_created: string\n  direction: string\n  transaction_description: string\n  transaction_date: string\n  transaction_id: string\n  transaction_amount: string\n}\nexport interface IPrediction {\n  category_id: number\n  category_name: string\n  split: boolean\n}\nexport interface IUserTransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  lender_id: number\n  plaid_category: string | null\n  editable: boolean\n  prediction: IPrediction | null\n}\nexport interface ImportFromPlaidResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ImportFromWaveRequest {\n  start_date: string\n  end_date: string\n}\nexport interface ImportFromWaveResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ListCategoriesRequest {}\nexport interface ICategory {\n  id: number\n  description: string\n  name: string\n  parent_id: number | null\n  mui_icon_id: string\n  is_selectable: boolean\n  is_active: boolean\n}\nexport interface ListCategoriesResponse {\n  categories: Array<ICategory>\n}\nexport interface ListEventsRequest {}\nexport enum EventType {\n  CHECKPOINT = 'CHECKPOINT',\n  STATEMENT_UPLOAD = 'STATEMENT_UPLOAD',\n  BATCH_IMPORT = 'BATCH_IMPORT',\n}\nexport interface ICheckPoint {\n  id: number\n  group_id: number\n  signed_ts: string | null\n  signed_by: number | null\n  signed_balance: string | null\n  updated_ts: string\n  created_ts: string\n  created_by: number\n  event_type?: EventType\n}\nexport interface IStatement {\n  id: number\n  source: string\n  user_id: string\n  created_ts: number\n  first_date: string\n  last_date: string\n  notes: string\n  is_processed: boolean\n  event_type?: EventType\n}\nexport interface IImportBatch {\n  id: number\n  origin: string\n  user_id: string\n  created_ts: number\n  start_date: string\n  end_date: string\n  event_type?: EventType\n}\nexport interface ListEventsResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface ListTransactionsRequest {\n  start?: number\n  end?: number\n  event_id?: string\n  search_text?: string\n}\nexport interface ListTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface SignCheckPointRequest {\n  id: number\n}\nexport interface SignCheckPointResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface TreefyCategoriesRequest {}\nexport interface TreefyCategoriesResponse {\n  root: ITreeNode\n}\nexport interface UpdateCategoryRequest {\n  id: number\n  name?: string | null\n  mui_icon_id?: string | null\n}\nexport interface UpdateCategoryResponse {}\nexport interface UpdateTransactionRequest {\n  id: number\n  issued_date?: string | null\n  notes?: string | null\n  category_id?: number | null\n  balance_adjust?: string\n}\nexport interface UpdateTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport enum EnumStatementSource {\n  PC_MASTER = 'PC_MASTER',\n  SCOTIA_MASTER = 'SCOTIA_MASTER',\n  VISA = 'VISA',\n  CHEQUE = 'CHEQUE',\n}\nexport interface UploadStatementRequest {\n  source: EnumStatementSource\n  content: string\n}\nexport interface ITransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  lender_id: number\n  plaid_category: string | null\n}\nexport interface UploadStatementResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n  transactions: Array<ITransaction>\n  duplicates: Array<ITransaction>\n}\n\nexport type UpdateType = 'replace' | 'do-nothing' | 'merge-append' | 'remove'\nconst ListTransactions = (\n  data: ListTransactionsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListTransactions,\n      route: EnumRoute.ListTransactions,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst AuthenticateUser = (\n  data: AuthenticateUserRequest,\n  updateType: UpdateType,\n  successCallback?: (data: AuthenticateUserResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.AuthenticateUser,\n      route: EnumRoute.AuthenticateUser,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListCategories = (\n  data: ListCategoriesRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListCategoriesResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListCategories,\n      route: EnumRoute.ListCategories,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst TreefyCategories = (\n  data: TreefyCategoriesRequest,\n  updateType: UpdateType,\n  successCallback?: (data: TreefyCategoriesResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.TreefyCategories,\n      route: EnumRoute.TreefyCategories,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UpdateCategory = (\n  data: UpdateCategoryRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UpdateCategoryResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UpdateCategory,\n      route: EnumRoute.UpdateCategory,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListEvents = (\n  data: ListEventsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListEventsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListEvents,\n      route: EnumRoute.ListEvents,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetUserBalance = (\n  data: GetUserBalanceRequest,\n  updateType: UpdateType,\n  successCallback?: (data: GetUserBalanceResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetUserBalance,\n      route: EnumRoute.GetUserBalance,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UpdateTransaction = (\n  data: UpdateTransactionRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UpdateTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UpdateTransaction,\n      route: EnumRoute.UpdateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetIncomeExpenseReport = (\n  data: GetIncomeExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetIncomeExpenseReport,\n      route: EnumRoute.GetIncomeExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetExpenseReport = (\n  data: GetExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetExpenseReport,\n      route: EnumRoute.GetExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UploadStatement = (\n  data: UploadStatementRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UploadStatementResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UploadStatement,\n      route: EnumRoute.UploadStatement,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromPlaid = (\n  data: ImportFromPlaidRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromPlaidResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromPlaid,\n      route: EnumRoute.ImportFromPlaid,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromWave = (\n  data: ImportFromWaveRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromWaveResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromWave,\n      route: EnumRoute.ImportFromWave,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst SignCheckPoint = (\n  data: SignCheckPointRequest,\n  updateType: UpdateType,\n  successCallback?: (data: SignCheckPointResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.SignCheckPoint,\n      route: EnumRoute.SignCheckPoint,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst CreateTransaction = (\n  data: CreateTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.CreateTransaction,\n      route: EnumRoute.CreateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ArchiveTransaction = (\n  data: ArchiveTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ArchiveTransaction,\n      route: EnumRoute.ArchiveTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nexport const BUTLER_ACTIONS = {\n  ListTransactions,\n\n  AuthenticateUser,\n\n  ListCategories,\n\n  TreefyCategories,\n\n  UpdateCategory,\n\n  ListEvents,\n\n  GetUserBalance,\n\n  UpdateTransaction,\n\n  GetIncomeExpenseReport,\n\n  GetExpenseReport,\n\n  UploadStatement,\n\n  ImportFromPlaid,\n\n  ImportFromWave,\n\n  SignCheckPoint,\n\n  CreateTransaction,\n\n  ArchiveTransaction,\n}\n","import querystring from 'querystring'\nimport { history } from '@src/history'\nimport { IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { State } from '@src/types'\n\nexport function getSelectableCategories(state: State) {\n  return state.categories.filter(x => x.is_selectable)\n}\n\nexport function getSnack(state: State) {\n  if (!state.snacks.length) {\n    return ''\n  }\n  return state.snacks[0]\n}\n\nexport function getVisibleTransactions(state): Array<IUserTransaction> {\n  return state.transactions || []\n}\n\nexport function parseUrlState() {\n  const params = parseSearch()\n  if (params && params.urlState) {\n    return JSON.parse(params.urlState as string)\n  }\n  return {}\n}\nexport function parseSearch() {\n  return querystring.parse(history.location.search.split('?')[1])\n}\n\nexport const getAuthToken = (state: State) =>\n  state.authToken || sessionStorage.getItem('authToken') || ''\n","import { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport { apiMiddleware } from './middleware'\nimport reducers from './reducers'\n\nexport const configureStore = (initialState?) => {\n  let middleware = applyMiddleware(thunk, apiMiddleware, logger())\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware)\n  }\n  const store = createStore(reducers, initialState, middleware)\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers')\n      store.replaceReducer(nextReducer)\n    })\n  }\n  return store\n}\n","import { Middleware } from 'redux'\nimport { callButlerApi } from './actions'\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { EnumRoute } from '@src/__generated__/backendSchemas'\n\nexport const apiMiddleware: Middleware = store => next => action => {\n  if (action && EnumRoute[action.type]) {\n    callButlerApi({\n      endpoint: action.route,\n      jsonBody: action.data,\n      authToken: sessionStorage.getItem('authToken') || store.getState().authToken || '',\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          store.dispatch({\n            type: `BUTLER_ANSWERED`,\n            updateType: action.updateType,\n            response: data,\n          })\n          if (action.successCallback) {\n            action.successCallback(data)\n          }\n        })\n      } else if (response.status === 401) {\n        sessionStorage.removeItem('jwt')\n        pushHistory(UrlPathEnum.LoginPage)\n      }\n    })\n  }\n\n  return next(action)\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router'\nimport { history } from './history'\n\nimport { configureStore } from './configureStore'\nimport { App } from '@src/Root'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n","import { Button, Dialog, DialogContent, DialogTitle, Icon } from '@material-ui/core'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { Autocomplete } from 'rice-instructor'\n\ninterface Prop {\n  instancePropNameToUpdate: string\n  choices: Array<{\n    value: string | number\n    mui_icon_id?: string\n    label: string\n  }>\n  instance: {}\n  onChange: (instance, changes) => void\n  style?: any\n  defaultValue?: string\n}\n\nexport class SingleSelectField extends React.Component<Prop, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      openDialog: false,\n    }\n  }\n\n  getInitialOption = () => {\n    const value = _.get(this.props.instance, this.props.instancePropNameToUpdate, null)\n\n    if (!value) return null\n    const option = this.props.choices.find(x => x.value === value)\n    if (!option) {\n      throw new Error(`${value} not found `)\n    }\n\n    return option\n  }\n\n  openDialog = e => {\n    this.setState({ openDialog: true })\n  }\n  closeDialog = () => {\n    this.setState({ openDialog: false })\n  }\n  onSelectOption = selectedOption => {\n    const { onChange, instance, instancePropNameToUpdate } = this.props\n    onChange(instance, {\n      [instancePropNameToUpdate]: selectedOption.value,\n    })\n    this.closeDialog()\n  }\n\n  render() {\n    const { choices } = this.props\n    const initialOption = this.getInitialOption()\n    return (\n      <div>\n        <Button onClick={this.openDialog} variant=\"outlined\" color=\"primary\">\n          {initialOption ? (\n            <Icon style={{ marginRight: '5px' }}>{initialOption.mui_icon_id}</Icon>\n          ) : null}\n          {initialOption ? initialOption.label : 'Select A Category'}\n        </Button>\n        <Dialog open={this.state.openDialog} fullWidth onClose={this.closeDialog}>\n          <DialogTitle>Select a category</DialogTitle>\n          <DialogContent>\n            <Autocomplete\n              onSelectOption={this.onSelectOption}\n              defaultValue={initialOption ? initialOption.value : undefined}\n              placeholder=\"Select a category\"\n              options={choices}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}