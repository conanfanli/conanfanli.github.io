{"version":3,"sources":["webpack:///./actions.ts","webpack:///./Root/contexts.ts","webpack:///./types/index.ts","webpack:///./TransactionChart.tsx","webpack:///./Root/Timeline/EventRow.tsx","webpack:///./Root/Timeline/utils.ts","webpack:///./Root/Timeline/index.tsx","webpack:///./TransactionList/NewPlaidForm.tsx","webpack:///./components/FileUploadButton.tsx","webpack:///./TransactionList/NewStatementForm.tsx","webpack:///./TransactionList/NewTransactionForm.tsx","webpack:///./Root/SearchBar.tsx","webpack:///./TransactionList/TransactionListAppBar.tsx","webpack:///./components/icons.tsx","webpack:///./components/CategoryField.tsx","webpack:///./TransactionList/TransactionRow.tsx","webpack:///./TransactionList/index.tsx","webpack:///./components/Tree.tsx","webpack:///./Root/CategoryListPage.tsx","webpack:///./history.ts","webpack:///./__generated__/backendSchemas.ts","webpack:///./Root/index.tsx","webpack:///./common.tsx","webpack:///./LoginPage.tsx","webpack:///./utils.ts","webpack:///./selectors.ts","webpack:///./components/SingleSelectField.tsx","webpack:///./middleware.ts","webpack:///./reducers.ts","webpack:///./main.tsx","webpack:///./configureStore.tsx"],"names":["__webpack_require__","d","__webpack_exports__","BASE_URL","callButlerApi","window","location","protocol","hostname","port","BASE_API_URL","request","url","endpoint","jwt","authToken","fetch","method","body","JSON","stringify","jsonBody","headers","Content-Type","X-Requested-With","Authorization","UrlStateContext","react__WEBPACK_IMPORTED_MODULE_0__","UrlPathEnum","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_0__","highcharts_data__WEBPACK_IMPORTED_MODULE_3___default","react_highcharts__WEBPACK_IMPORTED_MODULE_8___default","a","Highcharts","highcharts_drilldown__WEBPACK_IMPORTED_MODULE_4___default","getChartConfig","_a","chart","type","title","text","xAxis","yAxis","min","align","labels","overflow","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","column","allowPointSelect","events","click","onClickColumn","legend","layout","verticalAlign","x","y","floating","borderWidth","shadow","credits","TransactionChartComponent","_super","props","_this","call","this","onChangeReportType","e","showReport","target","value","config","bind","state","reportTitle","report_type","initialReportType","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","console","log","getReportTitle","today","Date","threeMonthAgo","setDate","getDate","apiName","butler","start_date","Object","_src_utils__WEBPACK_IMPORTED_MODULE_6__","end_date","res","titled","updeep__WEBPACK_IMPORTED_MODULE_11___default","assign","chart_data","setState","react__WEBPACK_IMPORTED_MODULE_7__","componentDidMount","render","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","onChange","_material_ui_core__WEBPACK_IMPORTED_MODULE_2__","TransactionChart","react_redux__WEBPACK_IMPORTED_MODULE_9__","dispatch","redux__WEBPACK_IMPORTED_MODULE_10__","_src_types__WEBPACK_IMPORTED_MODULE_5__","EventRow","urlState","react","contexts","event","disabled","event_id","event_type","id","types","CHECKPOINT","CheckpointListItem","checkpoint","eventIcon","BATCH_IMPORT","plaid","wave","origin","STATEMENT_UPLOAD","Error","getEventIcon","eventButtonIcon","getEventButtonIcon","ListItem","selected","button","onClick","ListTransactions","start","end","data","history_0","TransactionList","ListItemIcon","Tooltip","Icon","color","ListItemText","Typography","created_ts","toLocaleDateString","signed_ts","signed_balance","batch_import","upload","source","first_date","last_date","getEventDescription","ListItemSecondaryAction","Button","description","style","ButtonGroup","variant","size","aria-label","SignCheckPoint","open","actions","Timeline_TimelineContainer","TimelineContainer","tslib_es6","ListEvents","List","map","index","key","Timeline","es","selectors","redux","toISOString","slice","NewPlaidForm_NewPlaidFormComponent","NewPlaidFormComponent","apply","arguments","importTransactions","ImportFromPlaid","ImportFromWave","setStartDate","setEndDate","Grid","container","item","xs","TextField","label","defaultValue","marginTop","NewPlaidForm","backendSchemas","FileUploadButton_FileUploadButton","FileUploadButton","onFileInputChange","file","files","reader","FileReader","addEventListener","submitFileContent","result","readAsText","component","hidden","ref","fileInput","htmlFor","NewStatementForm_StatementFormContainer","StatementFormContainer","selectedSource","CHEQUE","onSelectType","content","length","UploadStatement","paddingTop","ExpansionPanel","expanded","ExpansionPanelSummary","spacing","sm","Select","c","MenuItem","Divider","ExpansionPanelActions","onClose","NewStatementForm","fieldConfig","issued_date","required","merchant","notes","category_id","balance_adjust","total_amount","FieldInput","fieldName","updateField","instance","error","getInitialState","transaction","utils","NewTransactionForm_NewTransactionFormContainer","NewTransactionFormContainer","createTransaction","CreateTransaction","old","newState","isValid","t","every","Boolean","selectableCategories","SingleSelectField","choices","cat","mui_icon_id","instancePropNameToUpdate","changes","NewTransactionForm","balance","SearchBar_SearchBarComponent","SearchBarComponent","anchorEl","debounced","lodash","newValue","search_text","onFocus","currentTarget","handleClose","onSearch","icon","InputAdornment","position","Search","InputProps","startAdornment","Menu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","suggestions","sug","SearchBar","ownProps","TransactionListAppBar_TransactionListAppBarComponent","TransactionListAppBarComponent","showNewTransactionForm","showForm","showNewStatementForm","showPlaidImportForm","showWaveImportForm","toggleTimeline","AppBar","Toolbar","IconButton","History","flex","rice_instructor","Add","AttachMoney","CreditCard","Waves","GridOn","sessionStorage","removeItem","href","className","TransactionListAppBar","icons_PlaidIcon","PlaidIcon","float","CategoryField_SmartCatField","SmartCatField","prediction","onAccept","split","fontWeight","category_name","Check","declined","Close","CategoryField_CategoryField","CategoryField","onSelectCategory","UpdateTransaction","CategoryInfoField","category","parseFloat","toString","TransactionRow_TransactionRowContainer","TransactionRowContainer","onAcceptSmartCat","fields","getCategory","find","shouldComponentUpdate","nextProps","lodash_default","isEqual","onToggleExpansion","editable","origin_payload","lib_default","shouldExpandNode","account_name","plaid_category","paddingLeft","ExpansionPanelDetails","helperText","textAlign","Fab","ArchiveTransaction","Delete","TransactionRow","PAGE_SIZE","TransactionList_TransactionListContainer","TransactionListContainer","expandedTransactionId","shownForm","showTimeline","loadMoreTransactions","transactions","formType","closeForm","ListCategories","GetUserBalance","maxWidth","height","innerHeight","marginBottom","fullWidth","IdentedLineItemText","ident","itemProps","Tree_Tree","Tree","root","children","child","getLevel","node","level","Checkbox","flat","CategoryListPage_CategoryList","CategoryList","categories","getCard","onSelectIcon","iconChoices","i","name","Card","display","CategoryListPage","CategoryTree","history","pushHistory","getPathName","history__WEBPACK_IMPORTED_MODULE_0__","pathname","searchString","keys","push","search","path","endsWith","EnumRoute","EventType","EnumStatementSource","BUTLER_ACTIONS","updateType","successCallback","route","AuthenticateUser","GetIncomeExpenseReport","GetExpenseReport","RootComponent","react__WEBPACK_IMPORTED_MODULE_14__","_src_common__WEBPACK_IMPORTED_MODULE_8__","_contexts__WEBPACK_IMPORTED_MODULE_17__","Provider","Body","isAuthenticated","Root","react_redux__WEBPACK_IMPORTED_MODULE_16__","getItem","_src_selectors__WEBPACK_IMPORTED_MODULE_12__","redux__WEBPACK_IMPORTED_MODULE_6__","_src_types__WEBPACK_IMPORTED_MODULE_7__","PageList","UrlPathsMap","_src_TransactionList__WEBPACK_IMPORTED_MODULE_13__","_src_TransactionChart__WEBPACK_IMPORTED_MODULE_11__","_CategoryListPage__WEBPACK_IMPORTED_MODULE_5__","_src_history__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","primary","LoginPage","_src_LoginPage__WEBPACK_IMPORTED_MODULE_10__","warn","App","react_hot_loader__WEBPACK_IMPORTED_MODULE_15__","module","react_router__WEBPACK_IMPORTED_MODULE_4__","FlexContainer","newStyle","flexDirection","newProps","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","LoginPageComponent","onUsernameChange","username","onPasswordChange","password","submitLogin","setItem","_src_history__WEBPACK_IMPORTED_MODULE_6__","react__WEBPACK_IMPORTED_MODULE_3__","alignItems","justifyContent","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_2__","onKeyPress","charCode","react_redux__WEBPACK_IMPORTED_MODULE_4__","redux__WEBPACK_IMPORTED_MODULE_5__","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_8__","formatDate","getIsoDateString","getToday","mergeArrays","connectButler","react_redux__WEBPACK_IMPORTED_MODULE_0__","redux__WEBPACK_IMPORTED_MODULE_1__","_src_generated_backendSchemas__WEBPACK_IMPORTED_MODULE_2__","month","day","timeZone","getFullYear","getMonth","existing","incoming","prependOrAppend","reduce","accumulator","findIndex","concat","mapDispatchToProps","stateMapper","getSelectableCategories","getVisibleTransactions","parseUrlState","getAuthToken","_src_history__WEBPACK_IMPORTED_MODULE_0__","querystring__WEBPACK_IMPORTED_MODULE_1__","querystring__WEBPACK_IMPORTED_MODULE_1___default","n","filter","is_selectable","params","parse","getInitialOption","lodash__WEBPACK_IMPORTED_MODULE_6___default","get","option","openDialog","closeDialog","onSelectOption","selectedOption","_b","initialOption","marginRight","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","rice_instructor__WEBPACK_IMPORTED_MODULE_8__","undefined","placeholder","options","apiMiddleware","store","next","action","getState","then","response","ok","json","status","reducers_initialState","initialState","handlers","snacks","EAT_SNACK","ADD_SNACK","snack","hasOwnProperty","createButlerReducer","partialState","sortBy","handleAction","deleted","ret","reducers_0","getTime","main_store","middleware","redux_thunk_es","configureStore","react_dom","react_router","document","getElementById"],"mappings":"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","file":"app.js","sourcesContent":["export function addSnack(message: string) {\n  return {\n    type: 'ADD_SNACK',\n    snack: message,\n  }\n}\n\nexport function eatSnack() {\n  return {\n    type: 'EAT_SNACK',\n  }\n}\n\nexport const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${\n  window.location.port ? '8000' : ''\n}`\nexport const BASE_API_URL = `${BASE_URL}/api2`\n\nexport function callButlerApi(request: { endpoint: string; jsonBody: {}; authToken: string }) {\n  const url = `${BASE_API_URL}/${request.endpoint}/`\n  const jwt = request.authToken\n\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(request.jsonBody),\n    // credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n      Authorization: jwt ? `JWT ${jwt}` : '',\n    },\n  })\n}\n\nexport const ACTIONS = {\n  eatSnack,\n  addSnack,\n}\n","import * as React from 'react'\n\nexport const UrlStateContext = React.createContext<any>({})\n","import { ACTIONS as actionCreators } from '@src/actions'\nimport {\n  ICheckPoint,\n  IStatement,\n  IImportBatch,\n  IUserTransaction,\n  ICategory,\n} from '@src/__generated__/backendSchemas'\nexport * from '@src/__generated__/backendSchemas'\n\nexport type IEvent = ICheckPoint | IStatement | IImportBatch\n\nexport interface State {\n  balance: string\n  events: Array<IEvent>\n  categories: Array<ICategory>\n  authToken: string | null\n  isAuthenticated: boolean\n  transactions: Array<IUserTransaction>\n  router?: any\n  snacks: Array<string>\n}\n\nexport type ActionType = typeof actionCreators\n\nexport enum UrlPathEnum {\n  Root = '/',\n  LoginPage = '/LoginPage',\n  TransactionList = '/TransactionList',\n  TransactionChart = '/TransactionChart',\n  CategoryListPage = '/CategoryListPage',\n}\n","import { MenuItem, Select } from '@material-ui/core'\n// import { parseUrlState } from '@src/selectors'\nimport HighchartsData from 'highcharts-data'\nimport HighchartsDrilldown from 'highcharts-drilldown'\nimport { BUTLER_ACTIONS } from '@src/types'\nimport { getIsoDateString } from '@src/utils'\nimport * as React from 'react'\nimport Highchart from 'react-highcharts'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport u from 'updeep'\n\nHighchartsData(Highchart.Highcharts)\nHighchartsDrilldown(Highchart.Highcharts)\n\ntype ReportType = 'INCOME_EXPENSE' | 'EXPENSE'\n\nconst getChartConfig = ({ onClickColumn }) => {\n  return {\n    chart: {\n      type: 'column',\n      //height: 800,\n      //width: 800\n    },\n    title: {\n      text: 'Income/Expense Report',\n    },\n    xAxis: {\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Spend',\n        align: 'high',\n      },\n      labels: {\n        overflow: 'justify',\n      },\n    },\n    tooltip: {\n      valueSuffix: ' dollars',\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true,\n        },\n      },\n      column: {\n        dataLabels: {\n          enabled: true,\n        },\n        allowPointSelect: false,\n        events: {\n          click: onClickColumn,\n        },\n      },\n    },\n    legend: {\n      enabled: true,\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      shadow: true,\n    },\n    credits: {\n      enabled: false,\n    },\n  }\n}\ninterface Prop {\n  butler: typeof BUTLER_ACTIONS\n  initialReportType: string\n}\n\ninterface State {\n  config: any\n  reportTitle: string\n  chart: any\n  report_type: ReportType\n}\n\nclass TransactionChartComponent extends React.Component<Prop, State> {\n  constructor(props) {\n    super(props)\n    const config = getChartConfig({\n      onClickColumn: this.onClickColumn.bind(this),\n    })\n    this.state = {\n      config,\n      chart: null,\n      reportTitle: '',\n      report_type: props.initialReportType,\n    }\n  }\n\n  onClickColumn(e) {\n    if (this.state.report_type === 'INCOME_EXPENSE') {\n      return console.log(e)\n    }\n  }\n\n  getReportTitle(value) {\n    return value == 'INCOME_EXPENSE' ? 'Income/Expense Report' : 'Expense Report'\n  }\n\n  onChangeReportType = e => {\n    this.showReport(e.target.value)\n  }\n\n  showReport(report_type: ReportType) {\n    const today = new Date()\n    let threeMonthAgo = new Date()\n    threeMonthAgo.setDate(threeMonthAgo.getDate() - 180)\n    const apiName = report_type === 'INCOME_EXPENSE' ? 'GetIncomeExpenseReport' : 'GetExpenseReport'\n    this.props.butler[apiName](\n      { start_date: getIsoDateString(threeMonthAgo), end_date: getIsoDateString(today) },\n      'do-nothing',\n      res => {\n        const titled = u(\n          {\n            title: {\n              text: this.getReportTitle(report_type),\n            },\n          },\n          this.state.config,\n        )\n        const config = Object.assign({}, titled, res.chart_data)\n        this.setState({ chart: <Highchart config={config} /> })\n        this.setState({ report_type, config })\n      },\n    )\n  }\n\n  componentDidMount() {\n    this.showReport(this.state.report_type)\n  }\n\n  render() {\n    if (!this.state.config) {\n      return <p>Loading ...</p>\n    }\n    return (\n      <div>\n        <Select value={this.state.report_type} onChange={this.onChangeReportType}>\n          <MenuItem value={'INCOME_EXPENSE'}>Income/Expense</MenuItem>\n          <MenuItem value={'EXPENSE'}>Expense</MenuItem>\n        </Select>\n        <p>{this.state.reportTitle}</p>\n        {this.state.chart}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const TransactionChart = connect(\n  null,\n  mapDispatchToProps,\n)(TransactionChartComponent)\n","import * as React from 'react'\nimport {\n  // IconButton,\n  ListItemSecondaryAction,\n  ButtonGroup,\n  Button,\n  //Fab,\n  Tooltip,\n  Icon,\n  ListItemIcon,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core'\nimport { BASE_URL } from '@src/actions'\nimport { BUTLER_ACTIONS } from '@src/types'\nimport { EventType, ICheckPoint, IEvent, UrlPathEnum } from '@src/types'\nimport { pushHistory } from '@src/history'\nimport { getEventButtonIcon, getEventIcon, getEventDescription } from './utils'\nimport { UrlStateContext } from '@src/Root/contexts'\n\nexport const EventRow = (props: {\n  authToken: string\n  event: IEvent\n  butler: typeof BUTLER_ACTIONS\n}) => {\n  const urlState = React.useContext(UrlStateContext)\n\n  const { event } = props\n  const disabled = urlState.event_id === `${event.event_type}-${event.id}`\n  if (event.event_type === EventType.CHECKPOINT) {\n    return (\n      <CheckpointListItem\n        authToken={props.authToken}\n        disabled={disabled}\n        butler={props.butler}\n        checkpoint={event as ICheckPoint}\n      />\n    )\n  }\n  const eventIcon = getEventIcon(event)\n  const onFilter = event => {\n    if (!event.event_type) {\n      throw new Error('not possible')\n    }\n\n    props.butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${event.event_type}-${event.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${event.event_type}-${event.id}`,\n        }),\n    )\n  }\n  const eventButtonIcon = getEventButtonIcon(event)\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={event.event_type}>\n          <Icon color=\"primary\">{eventIcon}</Icon>\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(event.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{getEventDescription(event)}</Typography>\n      </ListItemText>\n      {eventButtonIcon ? (\n        <ListItemSecondaryAction>\n          <Button>\n            <Icon>{eventButtonIcon}</Icon>\n          </Button>\n        </ListItemSecondaryAction>\n      ) : null}\n    </ListItem>\n  )\n}\n\nexport const CheckpointListItem: React.FC<{\n  authToken: string\n  disabled: boolean\n  checkpoint: ICheckPoint\n  butler: typeof BUTLER_ACTIONS\n}> = ({ authToken, checkpoint, disabled, butler }) => {\n  const onFilter = event => {\n    if (!event.event_type) {\n      throw new Error('not possible')\n    }\n\n    butler.ListTransactions(\n      { start: 0, end: 40, event_id: `${event.event_type}-${event.id}` },\n      'replace',\n      data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          event_id: `${event.event_type}-${event.id}`,\n        }),\n    )\n  }\n  const description = checkpoint.signed_ts\n    ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n        checkpoint.signed_ts,\n      ).toLocaleDateString()}`\n    : 'Not Signed'\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={checkpoint.event_type}>\n          {checkpoint.signed_ts ? (\n            <Icon color=\"primary\">toll</Icon>\n          ) : (\n            <Icon style={{ color: 'green' }}>fiber_new</Icon>\n          )}\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(checkpoint.created_ts).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{description}</Typography>\n      </ListItemText>\n      <ListItemSecondaryAction>\n        <ButtonGroup\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          aria-label=\"Small outlined button group\"\n        >\n          {checkpoint.signed_ts ? null : (\n            <Button\n              size=\"small\"\n              color=\"secondary\"\n              onClick={() => butler.SignCheckPoint({ id: checkpoint.id }, 'merge-append')}\n            >\n              <Icon>plus_one</Icon>\n            </Button>\n          )}\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            disabled={!authToken}\n            onClick={() => {\n              window.open(`${BASE_URL}/export-checkpoint/${authToken}/${checkpoint.id}/`, '_blank')\n            }}\n          >\n            <Icon>cloud_download</Icon>\n          </Button>\n        </ButtonGroup>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n","import { ICheckPoint, EventType, IStatement, IImportBatch, IEvent } from '@src/types'\n\nexport const getEventDescription = (e: IEvent) => {\n  if (e.event_type === EventType.CHECKPOINT) {\n    const checkpoint = e as ICheckPoint\n    return checkpoint.signed_ts\n      ? `balance: ${checkpoint.signed_balance}  Signed at ${new Date(\n          checkpoint.signed_ts,\n        ).toLocaleDateString()}`\n      : 'Not Signed'\n  }\n  if (e.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = e as IImportBatch\n    return `${batch_import.origin}: ${batch_import.start_date} TO ${batch_import.end_date}`\n  }\n  if (e.event_type === EventType.STATEMENT_UPLOAD) {\n    const upload = e as IStatement\n    return `${upload.source}: ${upload.first_date} TO ${upload.last_date}`\n  }\n  throw new Error('not possible')\n}\nexport const getEventIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'toll'\n  }\n  if (event.event_type === EventType.BATCH_IMPORT) {\n    const batch_import = event as IImportBatch\n    return { plaid: 'grid_on', wave: 'waves' }[batch_import.origin]\n  }\n  if (event.event_type === EventType.STATEMENT_UPLOAD) {\n    // const upload = memory as IStatement\n    return 'cloud_upload'\n  }\n  throw new Error('not possible')\n}\n\nexport const getEventButtonIcon = (event: IEvent) => {\n  if (event.event_type === EventType.CHECKPOINT) {\n    return 'plus_one'\n  }\n  return null\n}\n","import { List } from '@material-ui/core'\nimport { IEvent, State as AppState } from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/types'\nimport { EventRow } from './EventRow'\nimport { getAuthToken } from '@src/selectors'\n\ninterface OwnProps {}\ninterface StateProps {\n  events: Array<IEvent>\n  authToken: string\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = OwnProps & StateProps & DispatchProps\n\ninterface State {}\n\nclass TimelineContainer extends React.Component<Prop, State> {\n  componentDidMount() {\n    this.props.butler.ListEvents({}, 'replace')\n  }\n  render() {\n    return (\n      <div>\n        <List>\n          {this.props.events.map((e, index) => {\n            return (\n              <EventRow\n                authToken={this.props.authToken}\n                butler={this.props.butler}\n                event={e}\n                key={index}\n              />\n            )\n          })}\n        </List>\n      </div>\n    )\n  }\n}\n\nexport const Timeline = connect<StateProps, DispatchProps>(\n  (state: AppState): StateProps => {\n    return {\n      events: state.events,\n      authToken: getAuthToken(state),\n    }\n  },\n  (dispatch): DispatchProps => {\n    return {\n      butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n    }\n  },\n)(TimelineContainer)\n","import { Button, Grid, TextField } from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ninterface OwnProps {\n  origin: 'plaid' | 'wave'\n}\n\ntype FinalProps = OwnProps & DispatchProps\nconst today = new Date().toISOString().slice(0, 10)\n\nexport class NewPlaidFormComponent extends React.Component<\n  FinalProps,\n  { start_date: string; end_date: string }\n> {\n  state = { start_date: today, end_date: today }\n\n  importTransactions = () => {\n    if (this.props.origin === 'plaid') {\n      this.props.butler.ImportFromPlaid(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    } else {\n      this.props.butler.ImportFromWave(\n        {\n          start_date: this.state.start_date,\n          end_date: this.state.end_date,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  setStartDate = e => {\n    this.setState({ start_date: e.target.value })\n  }\n  setEndDate = e => {\n    this.setState({ end_date: e.target.value })\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item xs={4}>\n          <TextField\n            type=\"date\"\n            label=\"from\"\n            value={this.state.start_date}\n            onChange={this.setStartDate}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField type=\"date\" label=\"to\" defaultValue={today} onChange={this.setEndDate} />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            onClick={this.importTransactions}\n            style={{ marginTop: '10px' }}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Import\n          </Button>\n        </Grid>\n      </Grid>\n    )\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewPlaidForm = connect<{}, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(NewPlaidFormComponent)\n","import { Button } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface Prop {\n  submitFileContent: (content: string | ArrayBuffer | null) => void\n  button?: React.ReactElement<any>\n}\nexport class FileUploadButton extends React.Component<Prop, any> {\n  fileInput: any\n\n  onFileInputChange = event => {\n    const file = event.target.files[0]\n    var reader = new FileReader()\n\n    const callback = () => this.props.submitFileContent(reader.result)\n    reader.addEventListener('load', callback, false)\n    if (file) {\n      reader.readAsText(file)\n    }\n  }\n\n  render() {\n    const button = this.props.button || (\n      <Button variant=\"outlined\" component=\"span\">\n        Upload\n      </Button>\n    )\n    return (\n      <div>\n        <input\n          id=\"file-upload-form\"\n          hidden\n          ref={ref => (this.fileInput = ref)}\n          onChange={this.onFileInputChange}\n          type=\"file\"\n        />\n        <label htmlFor=\"file-upload-form\">{button}</label>\n      </div>\n    )\n  }\n}\n","import { Select } from '@material-ui/core'\nimport {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  MenuItem,\n} from '@material-ui/core'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { FileUploadButton } from '../components/FileUploadButton'\nimport { BUTLER_ACTIONS, EnumStatementSource } from '@src/__generated__/backendSchemas'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = OwnProps & DispatchProps\n\ninterface State {\n  selectedSource: EnumStatementSource\n}\n\nexport class StatementFormContainer extends React.Component<Prop, State> {\n  state = {\n    selectedSource: EnumStatementSource.CHEQUE,\n  }\n\n  onSelectType = event => {\n    this.setState({ selectedSource: event.target.value })\n  }\n\n  submitFileContent = (content: string) => {\n    console.log(content)\n    if (this.state.selectedSource.length && content) {\n      this.props.butler.UploadStatement(\n        {\n          source: this.state.selectedSource,\n          content: content,\n        },\n        'merge-append',\n      )\n    }\n  }\n\n  render() {\n    const choices = ['CHEQUE', 'PC_MASTER', 'SCOTIA_MASTER', 'VISA']\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <Select value={this.state.selectedSource} onChange={this.onSelectType}>\n                  {choices.map(c => {\n                    return (\n                      <MenuItem key={c} value={c}>\n                        {c}\n                      </MenuItem>\n                    )\n                  })}\n                </Select>\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FileUploadButton submitFileContent={this.submitFileContent} />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewStatementForm = connect<OwnProps, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(StatementFormContainer)\n","import {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  TextField,\n} from '@material-ui/core'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { BUTLER_ACTIONS, CreateTransaction__Request } from '@src/types'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport { getToday } from '@src/utils'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getSelectableCategories } from '../selectors'\n\ninterface OwnProps {\n  onClose: () => void\n}\ninterface PropsFromStore {\n  selectableCategories: Array<ICategory>\n}\n\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Prop = OwnProps & PropsFromStore & DispatchProps\n\ninterface State {\n  transaction: CreateTransaction__Request\n}\n\ntype FieldName =\n  | 'issued_date'\n  | 'merchant'\n  | 'notes'\n  | 'category_id'\n  | 'total_amount'\n  | 'balance_adjust'\n\nconst fieldConfig = {\n  issued_date: { type: 'date', required: true },\n  merchant: { type: 'text', required: true },\n  notes: { type: 'text', required: false },\n  category_id: { type: 'number', required: false },\n  balance_adjust: { type: 'number', required: false },\n  total_amount: { type: 'number', required: true },\n}\n\nconst FieldInput = (props: {\n  fieldName: FieldName\n  updateField: (fieldName) => (event) => void\n  instance: CreateTransaction__Request\n}) => {\n  const { fieldName, updateField, instance } = props\n  const config = fieldConfig[fieldName]\n  let error = false\n  if (config.required && !instance[fieldName]) {\n    error = true\n  } else if (config.required && config.type === 'number' && !instance[fieldName]) {\n    error = true\n  }\n\n  return (\n    <TextField\n      type={config.type}\n      required={config.required}\n      error={error}\n      label={fieldName}\n      value={instance[fieldName]}\n      onChange={updateField(fieldName)}\n    />\n  )\n}\nconst getInitialState = () => {\n  return {\n    transaction: {\n      issued_date: getToday(),\n      merchant: '',\n      notes: '',\n      category_id: 47,\n      total_amount: '0',\n      balance_adjust: '0',\n    },\n  }\n}\n\nclass NewTransactionFormContainer extends React.Component<Prop, State> {\n  state = getInitialState()\n\n  createTransaction = () => {\n    this.props.butler.CreateTransaction(this.state.transaction, 'merge-append', data => {\n      this.props.onClose()\n    })\n  }\n  updateField = (fieldName: FieldName) => {\n    const old = this.state.transaction\n    return event => {\n      const newState = Object.assign({}, old, {\n        [fieldName]: event.target.value,\n      })\n      this.setState({ transaction: newState })\n    }\n  }\n  isValid() {\n    const t = this.state.transaction\n    return [t.issued_date, t.merchant, +t.total_amount].every(Boolean)\n  }\n  render() {\n    const { selectableCategories } = this.props\n    const transaction = this.state.transaction\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  instance={transaction}\n                  fieldName=\"issued_date\"\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"merchant\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"total_amount\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <SingleSelectField\n                  instance={transaction}\n                  choices={selectableCategories.map(cat => {\n                    return {\n                      value: cat.id,\n                      label: cat.description,\n                      mui_icon_id: cat.mui_icon_id,\n                    }\n                  })}\n                  instancePropNameToUpdate=\"category_id\"\n                  onChange={(instance, changes) => {\n                    const newState = Object.assign({}, this.state.transaction, changes)\n                    this.setState({ transaction: newState })\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"notes\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"balance_adjust\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.setState(getInitialState())\n                this.props.onClose()\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              size=\"small\"\n              color=\"primary\"\n              onClick={this.createTransaction}\n              disabled={!this.isValid()}\n            >\n              Save\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    balance: state.balance,\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const NewTransactionForm = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NewTransactionFormContainer)\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\n\nimport { InputAdornment, Menu, MenuItem, TextField } from '@material-ui/core'\nimport { BUTLER_ACTIONS } from '@src/types'\nimport { Search } from '@material-ui/icons'\nimport { State } from '@src/types'\n\ninterface PropsFromStore {\n  suggestions: Array<any>\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Props = PropsFromStore & DispatchProps\n\nclass SearchBarComponent extends React.Component<Props, { anchorEl: JSX.Element | null }> {\n  state = { anchorEl: null }\n\n  debounced = _.debounce(\n    newValue =>\n      this.props.butler.ListTransactions({ search_text: newValue }, 'replace', data =>\n        pushHistory(UrlPathEnum.TransactionList, {\n          search_text: newValue,\n        }),\n      ),\n    500,\n  )\n\n  onFocus = event => {\n    this.setState({ anchorEl: event.currentTarget })\n  }\n  handleClose = event => {\n    this.setState({ anchorEl: null })\n  }\n  onSearch = event => {\n    this.debounced(event.target.value)\n  }\n  render() {\n    const icon = (\n      <InputAdornment position=\"start\">\n        <Search />\n      </InputAdornment>\n    )\n    return (\n      <div>\n        <TextField\n          onChange={this.onSearch}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">{icon}</InputAdornment>,\n          }}\n        />\n        <Menu\n          open={!!this.state.anchorEl}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n          getContentAnchorEl={null}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n        >\n          {this.props.suggestions.map((sug, index) => (\n            <MenuItem\n              key={index}\n              onClick={() => {\n                this.props.butler.ListTransactions({}, 'replace')\n              }}\n            >\n              {sug.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps): PropsFromStore => {\n  return { suggestions: [] }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const SearchBar = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchBarComponent)\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Add, AttachMoney, CreditCard, GridOn, History, Waves } from '@material-ui/icons'\nimport { SearchBar } from '@src/Root/SearchBar'\nimport { State as AppState } from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { IconMenu } from 'rice-instructor'\n\ninterface OwnProps {\n  showForm: (formType: string) => void\n  toggleTimeline: () => void\n}\n\ninterface StateProps {\n  balance: string | null\n}\ninterface DispatchProps {}\n\ntype FinalProps = OwnProps & StateProps & DispatchProps\n\nclass TransactionListAppBarComponent extends React.Component<FinalProps> {\n  showNewTransactionForm = () => {\n    this.props.showForm('transaction')\n  }\n\n  showNewStatementForm = () => {\n    this.props.showForm('statement')\n  }\n\n  showPlaidImportForm = () => {\n    this.props.showForm('plaid')\n  }\n  showWaveImportForm = () => {\n    this.props.showForm('wave')\n  }\n\n  toggleTimeline = () => {\n    this.props.toggleTimeline()\n  }\n\n  render() {\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Tooltip title=\"Timeline\">\n            <IconButton onClick={this.toggleTimeline}>\n              <History />\n            </IconButton>\n          </Tooltip>\n          {this.props.balance ? (\n            <Typography\n              variant=\"body1\"\n              key=\"balance\"\n            >{`Balance: $${this.props.balance}`}</Typography>\n          ) : null}\n          <div style={{ flex: 1 }} />\n          <SearchBar />\n          <IconMenu icon={<Add />}>\n            <MenuItem key=\"new-transaction-menu\" onClick={this.showNewTransactionForm}>\n              <ListItemIcon>\n                <AttachMoney />\n              </ListItemIcon>\n              <ListItemText>Transaction</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-statement-menu\" onClick={this.showNewStatementForm}>\n              <ListItemIcon>\n                <CreditCard />\n              </ListItemIcon>\n              <ListItemText>Statement</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-wave-menu\" onClick={this.showWaveImportForm}>\n              <ListItemIcon>\n                <Waves color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText>Wave Import</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-plaid-menu\" onClick={this.showPlaidImportForm}>\n              <ListItemIcon>\n                <GridOn color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText>Plaid Import</ListItemText>\n            </MenuItem>\n          </IconMenu>\n          <IconButton\n            onClick={() => {\n              sessionStorage.removeItem('authToken')\n              window.location.href = '/'\n            }}\n          >\n            <Icon className=\"material-icons\">exit_to_app</Icon>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    )\n  }\n}\nconst mapStateToProps = (state: AppState, ownProps) => {\n  return {\n    balance: state.balance,\n  }\n}\nexport const TransactionListAppBar = connect<StateProps, {}>(\n  mapStateToProps,\n  () => ({}),\n)(TransactionListAppBarComponent)\n","import * as React from 'react'\nimport { Icon } from '@material-ui/core'\n\nexport class PlaidIcon extends React.Component<{}> {\n  render() {\n    return (\n      <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n        grid_on\n      </Icon>\n    )\n  }\n}\n","import * as React from 'react'\n\nimport { Grid, IconButton } from '@material-ui/core'\nimport { Check, Close } from '@material-ui/icons'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport { IPrediction, CreateTransaction__Request } from '../types/index'\nimport { BUTLER_ACTIONS, IUserTransaction } from '@src/__generated__/backendSchemas'\n\ninterface CategoryFieldProp {\n  transaction: IUserTransaction | CreateTransaction__Request\n  butler: typeof BUTLER_ACTIONS\n  selectableCategories: Array<ICategory>\n}\n\ninterface SmartCatProp {\n  prediction: IPrediction\n  onAccept: () => void\n}\nexport class SmartCatField extends React.Component<SmartCatProp, any> {\n  render() {\n    const { prediction, onAccept } = this.props\n    const split = prediction.split ? 'Split ' : ''\n    return (\n      <div style={{ color: 'rgb(0, 188, 212)', fontWeight: 'bold' }}>\n        {`${split}${prediction.category_name}?`}\n        <Grid container>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => onAccept()}>\n              <Check color=\"primary\" />\n            </IconButton>\n          </Grid>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => this.setState({ declined: true })}>\n              <Close color=\"secondary\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport class CategoryField extends React.Component<CategoryFieldProp, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      declined: false,\n    }\n  }\n\n  onSelectCategory(transaction, changes) {\n    return this.props.butler.UpdateTransaction(\n      {\n        id: transaction.id,\n        category_id: changes.category_id,\n      },\n      'merge-append',\n    )\n  }\n\n  render() {\n    const { selectableCategories, transaction } = this.props\n    return (\n      <SingleSelectField\n        instance={transaction}\n        choices={selectableCategories.map(cat => {\n          return {\n            value: cat.id,\n            mui_icon_id: cat.mui_icon_id,\n            label: cat.description,\n          }\n        })}\n        instancePropNameToUpdate=\"category_id\"\n        onChange={this.onSelectCategory.bind(this)}\n      />\n    )\n  }\n}\n","import { PlaidIcon } from '@src/components/icons'\nimport {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Fab,\n  Grid,\n  Icon,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport JSONTree from 'react-json-tree'\n\nimport { CategoryField, SmartCatField } from '@src/components/CategoryField'\nimport { ICategory, IUserTransaction, BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\nimport { formatDate } from '@src/utils'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getSelectableCategories } from '../selectors'\n\ninterface OwnProps {\n  transaction: IUserTransaction\n  expanded: boolean\n  onToggleExpansion: (event, expanded) => void\n}\ninterface PropsFromStore {\n  selectableCategories: Array<ICategory>\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\ntype Prop = OwnProps & DispatchProps & PropsFromStore\n\nexport const CategoryInfoField = (props: {\n  transaction: IUserTransaction\n  category: ICategory | null\n  onAccept: (arg: { id: number; category_id: number; balance_adjust: string }) => void\n}) => {\n  const { transaction, category, onAccept } = props\n  const prediction = transaction.prediction\n  if (prediction) {\n    return (\n      <SmartCatField\n        prediction={prediction}\n        onAccept={() =>\n          onAccept({\n            id: transaction.id,\n            category_id: prediction.category_id,\n            balance_adjust: prediction.split\n              ? (parseFloat(transaction.total_amount) / 2).toString()\n              : '0',\n          })\n        }\n      />\n    )\n  }\n  return (\n    <Grid container spacing={10}>\n      <Grid item xs={1}>\n        <Icon className=\"material-icons\">{category ? category.mui_icon_id : null}</Icon>\n      </Grid>\n      <Grid item xs>\n        {category ? <Typography color=\"textSecondary\">{category.description}</Typography> : null}\n      </Grid>\n    </Grid>\n  )\n}\n\nclass TransactionRowContainer extends React.Component<Prop, any> {\n  getCategory() {\n    const { transaction, selectableCategories } = this.props\n    if (!transaction.category_id) return null\n    return selectableCategories.find(c => c.id === transaction.category_id) || null\n  }\n  shouldComponentUpdate(nextProps) {\n    const result = !(\n      _.isEqual(nextProps.transaction, this.props.transaction) &&\n      nextProps.expanded === this.props.expanded\n    )\n    return result\n  }\n  onAcceptSmartCat = (fields: { id: number; category_id: number; balance_adjust: string }) => {\n    this.props.butler.UpdateTransaction({ ...fields }, 'merge-append')\n  }\n  render() {\n    const { transaction, selectableCategories, expanded, onToggleExpansion, butler } = this.props\n    const category = this.getCategory()\n    return (\n      <div>\n        <ExpansionPanel\n          disabled={!transaction.editable}\n          expanded={expanded}\n          onChange={onToggleExpansion}\n        >\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={3} sm={4}>\n                <Typography>{formatDate(transaction.issued_date)}</Typography>\n                {expanded ? null : (\n                  <CategoryInfoField\n                    transaction={transaction}\n                    category={category}\n                    onAccept={this.onAcceptSmartCat}\n                  />\n                )}\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                {transaction.origin_payload ? (\n                  <Tooltip\n                    title={\n                      <JSONTree shouldExpandNode={() => true} data={transaction.origin_payload} />\n                    }\n                  >\n                    {transaction.origin_payload['anchor_account_name'] ? (\n                      <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n                        waves\n                      </Icon>\n                    ) : (\n                      <PlaidIcon />\n                    )}\n                  </Tooltip>\n                ) : null}\n                <Typography variant=\"body1\">{transaction.merchant}</Typography>\n                <div>\n                  <Typography color=\"textSecondary\">{transaction.account_name}</Typography>\n                  <Typography color=\"textSecondary\">{transaction.plaid_category}</Typography>\n                  <Typography color=\"textSecondary\">{transaction.notes}</Typography>\n                </div>\n              </Grid>\n              <Grid item xs={3} sm={4} style={{ paddingLeft: '40px' }}>\n                <Typography>{`$${transaction.total_amount}`}</Typography>\n                {+transaction.balance_adjust && !expanded ? (\n                  <Typography\n                    style={{\n                      color: +transaction.balance_adjust > 0 ? 'green' : 'red',\n                    }}\n                  >\n                    {`$${transaction.balance_adjust}`}\n                  </Typography>\n                ) : null}\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <TextField\n                  defaultValue={transaction.notes}\n                  helperText=\"notes\"\n                  onChange={event =>\n                    butler.UpdateTransaction(\n                      { id: transaction.id, notes: event.target.value },\n                      'merge-append',\n                    )\n                  }\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <CategoryField\n                  {...{\n                    transaction,\n                    selectableCategories,\n                    butler,\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6} sm={3}>\n                <TextField\n                  helperText=\"Balance Adjust\"\n                  type=\"number\"\n                  defaultValue={transaction.balance_adjust}\n                  onChange={event =>\n                    butler.UpdateTransaction(\n                      {\n                        id: transaction.id,\n                        balance_adjust: event.target.value,\n                      },\n                      'merge-append',\n                    )\n                  }\n                />\n              </Grid>\n              <Grid item xs={6} sm={1} style={{ textAlign: 'right' }}>\n                <Fab\n                  size=\"medium\"\n                  color=\"secondary\"\n                  aria-label=\"Delete\"\n                  onClick={() =>\n                    this.props.butler.ArchiveTransaction(\n                      {\n                        id: transaction.id,\n                      },\n                      'remove',\n                    )\n                  }\n                >\n                  <Delete />\n                </Fab>\n              </Grid>\n            </Grid>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    balance: state.balance,\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const TransactionRow = connect<PropsFromStore, DispatchProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TransactionRowContainer)\n","import { Button, Grid } from '@material-ui/core'\nimport { State as AppState } from '@src/types'\nimport * as React from 'react'\nimport { getSelectableCategories, getVisibleTransactions } from '../selectors'\nimport { ButlerProps, connectButler } from '@src/utils'\n\nimport { Timeline } from '@src/Root/Timeline'\nimport { NewPlaidForm } from './NewPlaidForm'\nimport { NewStatementForm } from './NewStatementForm'\nimport { IUserTransaction, ICategory } from '@src/__generated__/backendSchemas'\nimport { NewTransactionForm } from './NewTransactionForm'\nimport { TransactionListAppBar } from './TransactionListAppBar'\nimport { TransactionRow } from './TransactionRow'\n\ninterface OwnProps {}\ninterface PropsFromStore {\n  transactions: Array<IUserTransaction>\n  selectableCategories: Array<ICategory>\n}\nconst PAGE_SIZE = 40\n\ntype Prop = OwnProps & ButlerProps & PropsFromStore\n\ntype FormType = 'transaction' | 'plaid' | 'statement' | 'wave'\n\ninterface State {\n  expandedTransactionId: number | null\n  shownForm: FormType | null\n  showTimeline: boolean\n}\n\nclass TransactionListContainer extends React.Component<Prop, State> {\n  state: State = {\n    expandedTransactionId: null,\n    shownForm: null,\n    showTimeline: true,\n  }\n\n  toggleTimeline = () => this.setState({ showTimeline: !this.state.showTimeline })\n  loadMoreTransactions = () => {\n    const start = this.props.transactions.length\n    const end = start + PAGE_SIZE\n    this.props.butler.ListTransactions({ start, end }, 'merge-append')\n  }\n  showForm = (formType: FormType) => {\n    this.setState({ shownForm: formType })\n  }\n\n  componentDidMount() {\n    if (!this.props.selectableCategories.length) {\n      this.props.butler.ListCategories({}, 'replace')\n    }\n    this.props.butler.GetUserBalance({}, 'replace')\n    this.loadMoreTransactions()\n  }\n  onToggleExpansion(id: number) {\n    if (id === this.state.expandedTransactionId) {\n      this.setState({ expandedTransactionId: null })\n    } else {\n      this.setState({ expandedTransactionId: id })\n    }\n  }\n  closeForm = () => this.setState({ shownForm: null })\n\n  render() {\n    const { selectableCategories } = this.props\n    const { showTimeline } = this.state\n    if (!selectableCategories || !selectableCategories.length) {\n      return null\n    }\n    return (\n      <div style={{ maxWidth: '100%' }}>\n        <TransactionListAppBar toggleTimeline={this.toggleTimeline} showForm={this.showForm} />\n        <div\n          style={{\n            height: window.innerHeight - 70,\n            overflow: 'scroll',\n          }}\n        >\n          <Grid container>\n            {showTimeline ? (\n              <Grid item sm={3}>\n                <Timeline />\n              </Grid>\n            ) : null}\n            <Grid item sm={showTimeline ? 9 : 12}>\n              <div style={{ marginBottom: '20px' }}>\n                {this.state.shownForm === 'transaction' ? (\n                  <NewTransactionForm onClose={this.closeForm} />\n                ) : null}\n                {this.state.shownForm === 'statement' ? (\n                  <NewStatementForm onClose={this.closeForm} />\n                ) : null}\n                {this.state.shownForm === 'plaid' ? <NewPlaidForm origin=\"plaid\" /> : null}\n                {this.state.shownForm === 'wave' ? <NewPlaidForm origin=\"wave\" /> : null}\n              </div>\n              {this.props.transactions.map(t => (\n                <TransactionRow\n                  expanded={this.state.expandedTransactionId === t.id}\n                  key={t.id}\n                  transaction={t}\n                  onToggleExpansion={(event, expanded) => this.onToggleExpansion(t.id)}\n                />\n              ))}\n              <Button fullWidth size=\"large\" color=\"secondary\" onClick={this.loadMoreTransactions}>\n                ({this.props.transactions.length}) Click to Load More ...\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppState): PropsFromStore => {\n  return {\n    transactions: getVisibleTransactions(state),\n    selectableCategories: getSelectableCategories(state),\n  }\n}\n\nexport const TransactionList = connectButler(mapStateToProps)(TransactionListContainer)\n","import * as React from 'react'\n\nimport { Checkbox } from '@material-ui/core'\nimport { List, ListItem, ListItemText } from '@material-ui/core'\nimport { ITreeNode } from '@src/types'\n\ninterface TreeProps {\n  root: ITreeNode\n}\nconst IdentedLineItemText: React.SFC<{ ident: number }> = props => {\n  const { ident, ...itemProps } = props\n  if (ident) {\n    return <ListItemText {...itemProps} style={{ paddingLeft: `${56 * ident}px` }} />\n  }\n  return <ListItemText {...itemProps} />\n}\n\nfunction getLevel(node: ITreeNode, level: number) {\n  return [\n    <ListItem key={node.id}>\n      <IdentedLineItemText ident={level}>\n        <Checkbox />\n        {node.id}\n      </IdentedLineItemText>\n    </ListItem>,\n    ...node.children.map(child => getLevel(child, level + 1)),\n  ]\n}\nexport class Tree extends React.Component<TreeProps> {\n  render() {\n    return (\n      <List>{(this.props.root.children.map(child => getLevel(child, 0)) as any).flat(1000)}</List>\n    )\n  }\n}\n","import { Card, Typography } from '@material-ui/core'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { Tree } from '@src/components/Tree'\nimport { ICategory } from '@src/__generated__/backendSchemas'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\n\ninterface StateProps {\n  categories: Array<ICategory>\n  iconChoices: Array<{\n    name: string\n    value: string\n  }>\n  CategoryTree: {}\n}\ninterface DispatchProps {}\ntype CategoryListProps = StateProps & DispatchProps\n\nclass CategoryList extends React.Component<CategoryListProps> {\n  render() {\n    return (\n      <div>\n        <Tree root={{ id: '1', children: [] }} />\n        <div>{this.props.categories.map(cat => this.getCard(cat))}</div>\n      </div>\n    )\n  }\n  onSelectIcon(category: ICategory, changes) {\n    /*\n    return this.props.actions.CategoryUpdate({\n      id: category.id,\n      mui_icon_id: changes.mui_icon_id,\n    })\n     */\n  }\n\n  getCard(cat: ICategory) {\n    const choices = this.props.iconChoices.map(i => {\n      return {\n        value: i.name,\n        mui_icon_id: i.value,\n        label: i.name,\n      }\n    })\n    return (\n      <Card key={cat.id}>\n        <Typography style={{ display: 'flex' }}>{cat.description}</Typography>\n        <SingleSelectField\n          style={{ flex: 1 }}\n          instance={cat}\n          choices={choices}\n          instancePropNameToUpdate=\"mui_icon_id\"\n          onChange={this.onSelectIcon.bind(this)}\n        />\n      </Card>\n    )\n  }\n}\n\nconst mapStateToProps = (state): StateProps => {\n  return {\n    categories: state.categories,\n    iconChoices: [],\n    CategoryTree: {},\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {}\n}\nexport const CategoryListPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CategoryList)\n","import { UrlPathEnum } from '@src/types'\nimport { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory()\nexport const pushHistory = (\n  pathname: UrlPathEnum,\n  urlState?: {} | null,\n  state: {} | null = null,\n) => {\n  const searchString =\n    urlState && urlState && Object.keys(urlState).length\n      ? '?urlState=' + JSON.stringify(urlState)\n      : ''\n  return history.push({\n    pathname,\n    search: searchString,\n    state,\n  })\n}\n\nexport const getPathName = () => {\n  const path = history.location.pathname\n  return path.endsWith('/') ? path.slice(0, path.length - 1) || '/' : path\n}\n","/**\n * GENERATED CODE. DO NOT EDIT !!!\"\n */\nexport interface ArchiveTransaction__Request {\n  id: number\n}\nexport interface AuthenticateUserRequest {\n  username: string\n  password: string\n}\nexport interface AuthenticateUserResponse {\n  errors: {}\n  authToken: string\n}\nexport interface CreateTransaction__Request {\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  merchant: string\n  balance_adjust?: string\n}\nexport enum EnumRoute {\n  ListTransactions = 'ListTransactions',\n  AuthenticateUser = 'AuthenticateUser',\n  ListCategories = 'ListCategories',\n  ListEvents = 'ListEvents',\n  GetUserBalance = 'GetUserBalance',\n  UpdateTransaction = 'UpdateTransaction',\n  GetIncomeExpenseReport = 'GetIncomeExpenseReport',\n  GetExpenseReport = 'GetExpenseReport',\n  UploadStatement = 'UploadStatement',\n  ImportFromPlaid = 'ImportFromPlaid',\n  ImportFromWave = 'ImportFromWave',\n  SignCheckPoint = 'SignCheckPoint',\n  CreateTransaction = 'CreateTransaction',\n  ArchiveTransaction = 'ArchiveTransaction',\n}\nexport interface GetExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetIncomeExpenseReportResponse {\n  chart_data: {}\n}\nexport interface GetIncomeExpenseReport__Request {\n  start_date: string\n  end_date: string\n}\nexport interface GetUserBalanceRequest {}\nexport interface GetUserBalanceResponse {\n  balance: string\n}\nexport interface ITreeNode {\n  id: string\n  children: Array<ITreeNode>\n}\nexport interface ImportFromPlaidRequest {\n  start_date: string\n  end_date: string\n}\nexport interface IPlaidAccount {\n  account_id: string\n  name: string\n  type: string\n  subtype: string\n  mask: string\n}\nexport interface IPlaidTransaction {\n  account_id: string\n  account: IPlaidAccount\n  amount: number\n  category: Array<string>\n  category_id: string\n  date: string\n  iso_currency_code: string\n  name: string\n  pending: boolean\n  transaction_id: string\n  transaction_type: string\n}\nexport interface IWaveTransaction {\n  anchor_account_name: string\n  date_created: string\n  direction: string\n  transaction_description: string\n  transaction_date: string\n  transaction_id: string\n  transaction_amount: string\n}\nexport interface IPrediction {\n  category_id: number\n  category_name: string\n  split: boolean\n}\nexport interface IUserTransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  plaid_category: string | null\n  editable: boolean\n  prediction: IPrediction | null\n}\nexport interface ImportFromPlaidResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ImportFromWaveRequest {\n  start_date: string\n  end_date: string\n}\nexport interface ImportFromWaveResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface ListCategoriesRequest {}\nexport interface ICategory {\n  id: number\n  description: string\n  name: string\n  parent_id: number | null\n  mui_icon_id: string\n  is_selectable: boolean\n}\nexport interface ListCategoriesResponse {\n  categories: Array<ICategory>\n}\nexport interface ListEventsRequest {}\nexport enum EventType {\n  CHECKPOINT = 'CHECKPOINT',\n  STATEMENT_UPLOAD = 'STATEMENT_UPLOAD',\n  BATCH_IMPORT = 'BATCH_IMPORT',\n}\nexport interface ICheckPoint {\n  id: number\n  group_id: number\n  signed_ts: string | null\n  signed_by: number | null\n  signed_balance: string | null\n  updated_ts: string\n  created_ts: string\n  created_by: number\n  event_type?: EventType\n}\nexport interface IStatement {\n  id: number\n  source: string\n  user_id: string\n  created_ts: number\n  first_date: string\n  last_date: string\n  notes: string\n  is_processed: boolean\n  event_type?: EventType\n}\nexport interface IImportBatch {\n  id: number\n  origin: string\n  user_id: string\n  created_ts: number\n  start_date: string\n  end_date: string\n  event_type?: EventType\n}\nexport interface ListEventsResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface ListTransactionsRequest {\n  start?: number\n  end?: number\n  event_id?: string\n  search_text?: string\n}\nexport interface ListTransactionsResponse {\n  transactions: Array<IUserTransaction>\n}\nexport interface SignCheckPointRequest {\n  id: number\n}\nexport interface SignCheckPointResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n}\nexport interface UpdateTransactionRequest {\n  id: number\n  issued_date?: string | null\n  notes?: string | null\n  category_id?: number | null\n  balance_adjust?: string\n}\nexport interface UpdateTransactionsResponse {\n  transactions: Array<IUserTransaction>\n  balance: string\n}\nexport enum EnumStatementSource {\n  PC_MASTER = 'PC_MASTER',\n  SCOTIA_MASTER = 'SCOTIA_MASTER',\n  VISA = 'VISA',\n  CHEQUE = 'CHEQUE',\n}\nexport interface UploadStatementRequest {\n  source: EnumStatementSource\n  content: string\n}\nexport interface ITransaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  balance_adjust: string\n  created_by_id: number\n  origin_payload: IPlaidTransaction | IWaveTransaction | null\n  account_name: string\n  plaid_category: string | null\n}\nexport interface UploadStatementResponse {\n  events: Array<ICheckPoint | IStatement | IImportBatch>\n  transactions: Array<ITransaction>\n  duplicates: Array<ITransaction>\n}\n\nexport type UpdateType = 'replace' | 'do-nothing' | 'merge-append' | 'remove'\nconst ListTransactions = (\n  data: ListTransactionsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListTransactions,\n      route: EnumRoute.ListTransactions,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst AuthenticateUser = (\n  data: AuthenticateUserRequest,\n  updateType: UpdateType,\n  successCallback?: (data: AuthenticateUserResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.AuthenticateUser,\n      route: EnumRoute.AuthenticateUser,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListCategories = (\n  data: ListCategoriesRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListCategoriesResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListCategories,\n      route: EnumRoute.ListCategories,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ListEvents = (\n  data: ListEventsRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ListEventsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ListEvents,\n      route: EnumRoute.ListEvents,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetUserBalance = (\n  data: GetUserBalanceRequest,\n  updateType: UpdateType,\n  successCallback?: (data: GetUserBalanceResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetUserBalance,\n      route: EnumRoute.GetUserBalance,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UpdateTransaction = (\n  data: UpdateTransactionRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UpdateTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UpdateTransaction,\n      route: EnumRoute.UpdateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetIncomeExpenseReport = (\n  data: GetIncomeExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetIncomeExpenseReport,\n      route: EnumRoute.GetIncomeExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst GetExpenseReport = (\n  data: GetExpenseReport__Request,\n  updateType: UpdateType,\n  successCallback?: (data: GetIncomeExpenseReportResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.GetExpenseReport,\n      route: EnumRoute.GetExpenseReport,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst UploadStatement = (\n  data: UploadStatementRequest,\n  updateType: UpdateType,\n  successCallback?: (data: UploadStatementResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.UploadStatement,\n      route: EnumRoute.UploadStatement,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromPlaid = (\n  data: ImportFromPlaidRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromPlaidResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromPlaid,\n      route: EnumRoute.ImportFromPlaid,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ImportFromWave = (\n  data: ImportFromWaveRequest,\n  updateType: UpdateType,\n  successCallback?: (data: ImportFromWaveResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ImportFromWave,\n      route: EnumRoute.ImportFromWave,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst SignCheckPoint = (\n  data: SignCheckPointRequest,\n  updateType: UpdateType,\n  successCallback?: (data: SignCheckPointResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.SignCheckPoint,\n      route: EnumRoute.SignCheckPoint,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst CreateTransaction = (\n  data: CreateTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.CreateTransaction,\n      route: EnumRoute.CreateTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nconst ArchiveTransaction = (\n  data: ArchiveTransaction__Request,\n  updateType: UpdateType,\n  successCallback?: (data: ListTransactionsResponse) => void,\n) => {\n  return dispatch =>\n    dispatch({\n      type: EnumRoute.ArchiveTransaction,\n      route: EnumRoute.ArchiveTransaction,\n      data,\n      updateType,\n      successCallback,\n    })\n}\n\nexport const BUTLER_ACTIONS = {\n  ListTransactions,\n\n  AuthenticateUser,\n\n  ListCategories,\n\n  ListEvents,\n\n  GetUserBalance,\n\n  UpdateTransaction,\n\n  GetIncomeExpenseReport,\n\n  GetExpenseReport,\n\n  UploadStatement,\n\n  ImportFromPlaid,\n\n  ImportFromWave,\n\n  SignCheckPoint,\n\n  CreateTransaction,\n\n  ArchiveTransaction,\n}\n","import { List, ListItem, ListItemText } from '@material-ui/core'\nimport { Route, Switch } from 'react-router'\nimport { CategoryListPage } from './CategoryListPage'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/types'\nimport * as C from '@src/common'\nimport { getPathName, pushHistory } from '@src/history'\nimport { LoginPage } from '@src/LoginPage'\nimport { TransactionChart } from '@src/TransactionChart'\nimport { parseUrlState } from '@src/selectors'\nimport { TransactionList } from '@src/TransactionList'\nimport * as React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { connect } from 'react-redux'\nimport { UrlStateContext } from './contexts'\n\nimport { State, UrlPathEnum } from '@src/types'\n\ninterface StateProps {\n  isAuthenticated: boolean\n  urlState: any\n}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\ntype Prop = StateProps & DispatchProps\n\nclass RootComponent extends React.Component<Prop, State> {\n  render() {\n    return (\n      <C.FlexContainer>\n        <div style={{ maxWidth: '100%', flex: 8 }}>\n          <UrlStateContext.Provider value={this.props.urlState}>\n            <Body isAuthenticated={this.props.isAuthenticated} />\n          </UrlStateContext.Provider>\n        </div>\n      </C.FlexContainer>\n    )\n  }\n}\n\nexport const Root = connect<StateProps, DispatchProps>(\n  (state: State, ownProps) => {\n    return {\n      isAuthenticated: !!(state.authToken || sessionStorage.getItem('authToken')),\n      urlState: parseUrlState(),\n    }\n  },\n  dispatch => ({\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }),\n)(RootComponent)\n\nconst PageList: React.FC = () => {\n  const UrlPathsMap = {\n    TransactionList,\n    TransactionChart,\n    CategoryListPage,\n  }\n  return (\n    <List>\n      {Object.keys(UrlPathsMap).map((c, index) => {\n        return (\n          <ListItem key={index} button onClick={() => pushHistory(c as UrlPathEnum)}>\n            <ListItemText primary={c} />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nclass Body extends React.Component<{ isAuthenticated: boolean }> {\n  render() {\n    if (getPathName() === UrlPathEnum.LoginPage) {\n      return <LoginPage />\n    }\n    if (!this.props.isAuthenticated) {\n      console.warn('not authenticated!!!')\n      pushHistory(UrlPathEnum.LoginPage)\n      return <div />\n    }\n    if (getPathName() === UrlPathEnum.Root) {\n      return <PageList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionList) {\n      return <TransactionList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionChart) {\n      return <TransactionChart />\n    }\n    if (getPathName() === UrlPathEnum.CategoryListPage) {\n      return <CategoryListPage />\n    }\n\n    throw new Error(`Invalid paths: ${getPathName()}`)\n  }\n}\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={Root} />\n  </Switch>\n))\n","import React from 'react'\nexport { default as styled } from 'styled-components'\nexport { default as PropTypes } from 'prop-types'\n\n// Material\nexport { default as IconButton } from '@material-ui/core/IconButton'\nexport { default as TextField } from '@material-ui/core/TextField'\nexport { Card, CardActions, CardHeader, CardMedia } from '@material-ui/core'\nexport { default as LinearProgress } from '@material-ui/core/LinearProgress'\n\nimport { Table as TRC } from '@material-ui/core'\n\nexport { SingleSelectField } from './components/SingleSelectField'\n\nexport const S = {\n  secondary: 'rgb(255, 64, 129)',\n  Card: {\n    margin: '5px',\n  },\n  CardContainer: {\n    paddingBottom: '5px',\n  },\n  Toolbar: {\n    height: '56px',\n    background: '#4285f4',\n  },\n\n  SmallFont: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  filterFonts: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  Body: {\n    background: '#f2f2f2',\n  },\n}\n\nexport const isWide = () => window.screen.availWidth > 800\n\nexport const TableRowColumn = props => {\n  const style = Object.assign(\n    {},\n    {\n      whiteSpace: 'normal',\n      textOverflow: 'initial',\n    },\n    props.style,\n  )\n  return <TRC {...props} style={style} />\n}\n\nexport const FlexContainer = props => {\n  const defaultStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n  const newStyle = Object.assign({}, defaultStyle, props.style)\n  const newProps = Object.assign({}, props, { style: newStyle })\n  return <div {...newProps} />\n}\n","import { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\ninterface StoreProps {}\ninterface DispatchProps {\n  butler: typeof BUTLER_ACTIONS\n}\n\nclass LoginPageComponent extends React.Component<StoreProps & DispatchProps, any> {\n  onUsernameChange(event) {\n    this.setState({ username: event.target.value })\n  }\n  onPasswordChange(event) {\n    this.setState({ password: event.target.value })\n  }\n  submitLogin() {\n    const butler = this.props.butler\n    butler.AuthenticateUser(\n      {\n        username: this.state.username,\n        password: this.state.password,\n      },\n      'replace',\n      data => {\n        sessionStorage.setItem('authToken', data.authToken)\n        // Redirect to root\n        pushHistory(UrlPathEnum.Root)\n      },\n    )\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          height: `${window.innerHeight}px`,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        <TextField label=\"Username\" onChange={this.onUsernameChange.bind(this)} />\n        <br />\n        <TextField\n          onChange={this.onPasswordChange.bind(this)}\n          type=\"password\"\n          label=\"Password\"\n          onKeyPress={e => {\n            if (e.charCode == 13) {\n              this.submitLogin()\n            }\n          }}\n        />\n        <br />\n        <Button variant=\"contained\" color=\"primary\" onClick={() => this.submitLogin()}>\n          Login\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\nexport const LoginPage = connect<StoreProps, DispatchProps>(\n  null,\n  mapDispatchToProps,\n)(LoginPageComponent)\n","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { BUTLER_ACTIONS } from '@src/__generated__/backendSchemas'\n\nexport function stringToDate(dateString: string): Date {\n  const [year, month, day] = dateString.split('-').map(v => parseInt(v))\n  const ret = new Date(year, month - 1, day)\n  return ret\n}\nexport function formatDate(d: string): string {\n  const date = new Date(d)\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC',\n  })\n}\n\nexport const getIsoDateString = (d: Date) => {\n  const year = d.getFullYear()\n  const month = d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1\n  const day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport function getToday(): string {\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth() < 9 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n  const day = today.getDate() < 10 ? '0' + today.getDate() : today.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport interface Identifiable {\n  id: string | number\n}\nexport const mergeArrays = <T extends Identifiable>(\n  existing: Array<T>,\n  incoming: Array<T>,\n  prependOrAppend: 'prepend' | 'append',\n): Array<T> => {\n  return incoming.reduce(\n    function(accumulator: Array<T>, value: T) {\n      const index = existing.findIndex(x => x.id === value.id)\n      if (index >= 0) {\n        const ret = [\n          ...accumulator.slice(0, index),\n          value,\n          ...accumulator.slice(index + 1, accumulator.length),\n        ]\n        return ret\n      } else {\n        return prependOrAppend === 'append' ? [...accumulator, value] : [value, ...accumulator]\n      }\n    },\n    [...existing],\n  )\n}\nexport interface ButlerProps {\n  butler: typeof BUTLER_ACTIONS\n}\nconst mapDispatchToProps = (dispatch): ButlerProps => {\n  return {\n    butler: bindActionCreators(BUTLER_ACTIONS, dispatch),\n  }\n}\n\nexport const connectButler = <T extends {}>(stateMapper: (state) => T) => {\n  return connect<T, ButlerProps>(\n    stateMapper,\n    mapDispatchToProps,\n  )\n}\n","import { history } from '@src/history'\nimport { IUserTransaction } from '@src/__generated__/backendSchemas'\nimport { State } from '@src/types'\nimport _ from 'lodash'\nimport querystring from 'querystring'\n\nexport function getSelectableCategories(state: State) {\n  return state.categories.filter(x => x.is_selectable)\n}\n\nexport function getSnack(state: State) {\n  if (!state.snacks.length) {\n    return ''\n  }\n  return state.snacks[0]\n}\n\nexport function getVisibleTransactions(state): Array<IUserTransaction> {\n  return state.transactions || []\n}\n\nexport function parseUrlState() {\n  const params = parseSearch()\n  if (params && params.urlState) {\n    return JSON.parse(params.urlState as string)\n  }\n  return {}\n}\nexport function parseSearch() {\n  return querystring.parse(history.location.search.split('?')[1])\n}\n\nexport const getAuthToken = (state: State) =>\n  state.authToken || sessionStorage.getItem('authToken') || ''\n","import { Button, Dialog, DialogContent, DialogTitle, Icon } from '@material-ui/core'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { Autocomplete, OptionType } from 'rice-instructor'\n\ninterface Prop {\n  instancePropNameToUpdate: string\n  choices: Array<{\n    value: string | number\n    mui_icon_id?: string\n    label: string\n  }>\n  instance: {}\n  onChange: (instance, changes) => void\n  style?: any\n  defaultValue?: string\n}\n\nexport class SingleSelectField extends React.Component<Prop, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      openDialog: false,\n    }\n  }\n\n  getInitialOption = () => {\n    const value = _.get(this.props.instance, this.props.instancePropNameToUpdate, null)\n\n    if (!value) return null\n    const option = this.props.choices.find(x => x.value === value)\n    if (!option) {\n      throw new Error(`${value} not found `)\n    }\n\n    return option\n  }\n\n  openDialog = e => {\n    this.setState({ openDialog: true })\n  }\n  closeDialog = () => {\n    this.setState({ openDialog: false })\n  }\n  onSelectOption = (selectedOption: OptionType) => {\n    const self = this,\n      { onChange, instance, instancePropNameToUpdate } = self.props\n    onChange(instance, {\n      [instancePropNameToUpdate]: selectedOption.value,\n    })\n    this.closeDialog()\n  }\n\n  render() {\n    const { choices } = this.props\n    const initialOption = this.getInitialOption()\n    return (\n      <div>\n        <Button onClick={this.openDialog} variant=\"outlined\" color=\"primary\">\n          {initialOption ? (\n            <Icon style={{ marginRight: '5px' }}>{initialOption.mui_icon_id}</Icon>\n          ) : null}\n          {initialOption ? initialOption.label : 'Select A Category'}\n        </Button>\n        <Dialog open={this.state.openDialog} fullWidth onClose={this.closeDialog}>\n          <DialogTitle>Select a category</DialogTitle>\n          <DialogContent>\n            <Autocomplete\n              onSelectOption={this.onSelectOption}\n              defaultValue={initialOption ? initialOption.value : undefined}\n              placeholder=\"Select a category\"\n              options={choices}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    )\n  }\n}\n","import { pushHistory } from '@src/history'\nimport { UrlPathEnum } from '@src/types'\nimport { Middleware } from 'redux'\nimport { callButlerApi } from './actions'\nimport { EnumRoute } from '@src/__generated__/backendSchemas'\n\nexport const apiMiddleware: Middleware = store => next => action => {\n  if (action && EnumRoute[action.type]) {\n    callButlerApi({\n      endpoint: action.route,\n      jsonBody: action.data,\n      authToken: sessionStorage.getItem('authToken') || store.getState().authToken || '',\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          store.dispatch({\n            type: `BUTLER_ANSWERED`,\n            updateType: action.updateType,\n            response: data,\n          })\n          if (action.successCallback) {\n            action.successCallback(data)\n          }\n        })\n      } else if (response.status === 401) {\n        sessionStorage.removeItem('jwt')\n        pushHistory(UrlPathEnum.LoginPage)\n      }\n    })\n  }\n\n  return next(action)\n}\n","import { handleAction } from 'redux-actions'\nimport { State } from '@src/types'\nimport * as _ from 'lodash'\nimport { mergeArrays } from '@src/utils'\nimport { combineReducers } from 'redux'\n\nexport const initialState: State = {\n  balance: '',\n  events: [],\n  categories: [],\n  authToken: null,\n  isAuthenticated: false,\n  snacks: [],\n  transactions: [],\n}\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n\nconst snacks = createReducer(initialState.snacks, {\n  EAT_SNACK: snacks => [...snacks.slice(1)],\n  ADD_SNACK: (snacks, action) => [...snacks, action.snack],\n})\n\nconst createButlerReducer = (partialState: keyof State, initialState, sortBy?: (a) => number) => {\n  return handleAction(\n    `BUTLER_ANSWERED`,\n    (state, action: any) => {\n      if (!action.response[partialState]) {\n        return state\n      }\n      if (action.updateType === 'replace') {\n        return action.response[partialState]\n      } else if (action.updateType === 'do-nothing') {\n        return state\n      } else if (action.updateType === 'remove') {\n        return [...state].filter(\n          item => !action.response[partialState].find(deleted => deleted.id === item.id),\n        )\n      } else if (action.updateType === 'merge-append') {\n        let ret = mergeArrays(state, action.response[partialState], 'append')\n        if (sortBy) {\n          return _.sortBy(ret, sortBy)\n        }\n        return ret\n      } else {\n        throw new Error('not handled')\n      }\n    },\n    initialState,\n  )\n}\n\nconst reducers = combineReducers({\n  snacks,\n  transactions: createButlerReducer('transactions', initialState.transactions, transaction => {\n    return -1 * transaction.issued_date\n  }),\n  authToken: createButlerReducer('authToken', initialState.authToken),\n  categories: createButlerReducer('categories', initialState.categories),\n  events: createButlerReducer('events', initialState.events, e => {\n    return -1 * new Date(e.created_ts).getTime()\n  }),\n  balance: createButlerReducer('balance', initialState.balance),\n})\n\nexport default reducers\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router'\nimport { history } from './history'\n\nimport { App } from '@src/Root'\nimport { configureStore } from './configureStore'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n","import { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport { apiMiddleware } from './middleware'\nimport reducers from './reducers'\n\nexport const configureStore = (initialState?) => {\n  let middleware = applyMiddleware(thunk, apiMiddleware, logger())\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware)\n  }\n  const store = createStore(reducers, initialState, middleware)\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers')\n      store.replaceReducer(nextReducer)\n    })\n  }\n  return store\n}\n"],"sourceRoot":""}