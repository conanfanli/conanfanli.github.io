{"version":3,"sources":["webpack:///./selectors.ts","webpack:///./LoginPage.tsx","webpack:///./TransactionChart.tsx","webpack:///./Root/ActivityStream.tsx","webpack:///./TransactionList/NewPlaidForm.tsx","webpack:///./components/FileUploadButton.tsx","webpack:///./TransactionList/NewStatementForm.tsx","webpack:///./utils.ts","webpack:///./TransactionList/NewTransactionForm.tsx","webpack:///./Root/SearchBar.tsx","webpack:///./TransactionList/TransactionListAppBar.tsx","webpack:///./components/CategoryField.tsx","webpack:///./TransactionList/TransactionRow.tsx","webpack:///./TransactionList/index.tsx","webpack:///./actions.ts","webpack:///./components/Tree.tsx","webpack:///./CategoryListPage.tsx","webpack:///./history.ts","webpack:///./Root/index.tsx","webpack:///./common.tsx","webpack:///./types/index.ts","webpack:///./components/SingleSelectField.tsx","webpack:///./services/dracarys.ts","webpack:///./middleware.ts","webpack:///./reducers.ts","webpack:///./configureStore.tsx","webpack:///./main.tsx","webpack:///./generated_types.ts"],"names":["__webpack_require__","d","__webpack_exports__","getIconChoices","getCategories","getSelectableCategories","getActivities","getSuggestions","getBalance","getVisibleTransactions","parseUrlState","getUsers","_src_history__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_1__","lodash__WEBPACK_IMPORTED_MODULE_1___default","n","querystring__WEBPACK_IMPORTED_MODULE_2__","querystring__WEBPACK_IMPORTED_MODULE_2___default","state","dragonState","IconChoice","a","get","filter","is_selectable","current_user_balance","params","parse","location","search","split","urlState","JSON","current_user","network_accounts","user_1","map","isMe","id","name","username","description","LoginPageComponent","_super","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","onUsernameChange","event","this","setState","target","value","onPasswordChange","password","submitLogin","props","actions","LoginApp","response","sessionStorage","setItem","operations","target_value","Object","_src_history__WEBPACK_IMPORTED_MODULE_7__","_src_types__WEBPACK_IMPORTED_MODULE_8__","TransactionList","render","_this","react__WEBPACK_IMPORTED_MODULE_3__","style","height","window","innerHeight","display","alignItems","justifyContent","flexDirection","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_2__","label","onChange","bind","type","onKeyPress","e","charCode","_material_ui_core__WEBPACK_IMPORTED_MODULE_1__","variant","color","onClick","LoginPage","react_redux__WEBPACK_IMPORTED_MODULE_4__","authToken","jwt_auth_token","dispatch","redux__WEBPACK_IMPORTED_MODULE_5__","_src_actions__WEBPACK_IMPORTED_MODULE_6__","highcharts_data__WEBPACK_IMPORTED_MODULE_5___default","react_highcharts__WEBPACK_IMPORTED_MODULE_8___default","Highcharts","highcharts_drilldown__WEBPACK_IMPORTED_MODULE_6___default","getChartConfig","_a","chart","title","text","xAxis","yAxis","min","align","labels","overflow","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","column","allowPointSelect","events","click","onClickColumn","legend","layout","verticalAlign","x","y","floating","borderWidth","shadow","credits","TransactionChartComponent","call","onChangeReportType","draw","config","reportTitle","report_type","initialReportType","console","log","getReportTitle","TransactionChart","then","res","titled","updeep__WEBPACK_IMPORTED_MODULE_11___default","assign","react__WEBPACK_IMPORTED_MODULE_7__","componentWillMount","_material_ui_core__WEBPACK_IMPORTED_MODULE_2__","react_redux__WEBPACK_IMPORTED_MODULE_9__","_src_selectors__WEBPACK_IMPORTED_MODULE_4__","redux__WEBPACK_IMPORTED_MODULE_10__","_src_actions__WEBPACK_IMPORTED_MODULE_3__","InteractionMenu","interactions","react","rice_instructor","interaction","index","MenuItem","disabled","key","endpoint_name","endpoint_args","ActivityRow","activity","filterInteraction","find","i","toUpperCase","ListItem","dense","button","ListItemIcon","needs_attention","ErrorOutline","Icon","className","ListItemText","Typography","date","subtitles","sub","length","ListItemSecondaryAction","ActivityStream_ActivityStreamContainer","ActivityStreamContainer","tslib_es6","List","showActivityStream","event_id","ActivityStream","es","selectors","redux","actions_0","today","Date","toISOString","slice","NewPlaidForm_NewPlaidFormComponent","NewPlaidFormComponent","apply","arguments","start_date","end_date","importFromPlaid","ImportFromPlaid","setStartDate","setEndDate","Grid","container","item","xs","TextField","defaultValue","Button","marginTop","NewPlaidForm","FileUploadButton_FileUploadButton","FileUploadButton","onFileInputChange","file","files","reader","FileReader","addEventListener","submitFileContent","result","readAsText","component","hidden","ref","fileInput","htmlFor","NewStatementForm_StatementFormContainer","StatementFormContainer","selectedSource","types","CHEQUE","onSelectType","content","StatementUpload","source","reload","addSnack","errors","paddingTop","ExpansionPanel","expanded","ExpansionPanelSummary","spacing","sm","Select","c","Divider","ExpansionPanelActions","size","hideNewCard","NewStatementForm","getToday","getFullYear","getMonth","getDate","fieldConfig","issued_date","required","merchant","notes","category_id","loan_amount","total_amount","FieldInput","fieldName","updateField","instance","error","getInitialState","transaction","NewTransactionForm_NewTransactionFormContainer","NewTransactionFormContainer","createTransaction","TransactionCreate","old","newState","isValid","t","every","Boolean","selectableCategories","SingleSelectField","choices","instancePropNameToUpdate","changes","NewTransactionForm","accounts","currentUser","balance","SearchBar_SearchBarComponent","SearchBarComponent","anchorEl","onFocus","currentTarget","SuggestionLoad","handleClose","icon","InputAdornment","position","Search","ExecuteSearch","full_text","InputProps","startAdornment","Menu","open","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","suggestions","sug","SearchBar","ownProps","Suggestion","TransactionListAppBar_TransactionListAppBarComponent","TransactionListAppBarComponent","showNewTransactionForm","showForm","showNewStatementForm","showPlaidImportForm","toggleActivityStream","AppBar","Toolbar","Tooltip","IconButton","History","flex","Add","AttachMoney","CreditCard","GridOn","logout","TransactionListAppBar","CategoryField_SmartCatField","SmartCatField","prediction","onAccept","fontWeight","category_name","Check","declined","Close","CategoryField_CategoryField","CategoryField","onSelectCategory","TransactionUpdate","CategoryInfoField","category","mui_icon_id","TransactionRow_TransactionRowContainer","TransactionRowContainer","getCategory","shouldComponentUpdate","nextProps","lodash_default","isEqual","onToggleExpansion","editable","toLocaleDateString","month","day","timeZone","TransactionAccept","origin_payload","lib_default","shouldExpandNode","data","float","account_name","plaid_category","paddingLeft","contribution","ExpansionPanelDetails","textAlign","Fab","aria-label","TransactionDelete","Delete","TransactionRow","TransactionList_TransactionListContainer","TransactionListContainer","expandedTransactionId","shownForm","formType","componentDidMount","CategoryList","loadMoreTransactions","maxWidth","marginBottom","transactions","fullWidth","message","snack","ACTIONS","_src_generated_types__WEBPACK_IMPORTED_MODULE_1__","reset","getState","_selectors__WEBPACK_IMPORTED_MODULE_2__","page","Math","ceil","eatSnack","login","toggleTimeline","Activity","removeItem","IdentedLineItemText","ident","itemProps","Tree_Tree","Tree","root","children","child","getLevel","node","level","Checkbox","flat","CategoryListPage_CategoryList","CategoryTree","categories","cat","getCard","onSelectIcon","CategoryUpdate","iconChoices","Card","CategoryListPage","history","pushHistory","getPathName","history__WEBPACK_IMPORTED_MODULE_0__","pathname","searchString","keys","stringify","push","path","endsWith","RootComponent","getItem","InitApp","react__WEBPACK_IMPORTED_MODULE_12__","_src_common__WEBPACK_IMPORTED_MODULE_7__","Body","Root","react_redux__WEBPACK_IMPORTED_MODULE_14__","redux__WEBPACK_IMPORTED_MODULE_15__","_src_actions__WEBPACK_IMPORTED_MODULE_5__","UrlPathsMap","_src_TransactionList__WEBPACK_IMPORTED_MODULE_11__","_src_TransactionChart__WEBPACK_IMPORTED_MODULE_10__","_src_CategoryListPage__WEBPACK_IMPORTED_MODULE_6__","_src_LoginPage__WEBPACK_IMPORTED_MODULE_9__","PageList","_src_history__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core__WEBPACK_IMPORTED_MODULE_3__","primary","_src_types__WEBPACK_IMPORTED_MODULE_16__","Error","App","react_hot_loader__WEBPACK_IMPORTED_MODULE_13__","module","react_router__WEBPACK_IMPORTED_MODULE_4__","FlexContainer","newStyle","newProps","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","UrlPathEnum","_src_generated_types__WEBPACK_IMPORTED_MODULE_0__","getInitialOption","lodash__WEBPACK_IMPORTED_MODULE_6___default","option","openDialog","closeDialog","onSelectOption","selectedOption","_b","initialOption","marginRight","_material_ui_core__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core__WEBPACK_IMPORTED_MODULE_5__","rice_instructor__WEBPACK_IMPORTED_MODULE_8__","undefined","placeholder","options","BASE_URL","protocol","hostname","port","applyOperation","operation","targetValue","verb","dist","entity_type","merged","dracarysReducer","handleAction","action","ret","lodash","Statement","Category","Transaction","is_authenticated","apiMiddleware","store","next","request","url","jwt","isApiAction","endpoint","jsonBody","requestBody","fetch","method","body","headers","Content-Type","X-Requested-With","Authorization","ok","json","success","status","history_0","reducers_initialState","createReducer","initialState","handlers","hasOwnProperty","middleware","snacks","EAT_SNACK","ADD_SNACK","concat","showTimeline","TOGGLE_TIMELINE","TOGGLE_ACTIVITY_STREAM","reducers_0","main_store","redux_thunk_es","react_dom","react_router","document","getElementById","StatementSource","reject","TransactionLoad","ActivityLoad","GENERATED_ACTION_CREATORS","CheckpointExport","CheckpointSign","CheckpointUnsign","ListEntityMetas","SaveEntityMeta"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAAL,EAAAC,EAAAC,EAAA,sBAAAI,IAAAN,EAAAC,EAAAC,EAAA,sBAAAK,IAAAP,EAAAC,EAAAC,EAAA,sBAAAM,IAAAR,EAAAC,EAAAC,EAAA,sBAAAO,IAAAT,EAAAC,EAAAC,EAAA,sBAAAQ,IAAAV,EAAAC,EAAAC,EAAA,sBAAAS,IAAA,IAAAC,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,IAAAc,EAAAd,EAAAe,EAAAF,GAAAG,EAAAhB,EAAA,KAAAiB,EAAAjB,EAAAe,EAAAC,GAMO,SAASb,EAAee,GAC7B,OAAOA,EAAMC,YAAYC,WAKpB,SAAShB,EAAcc,GAC5B,OAAOJ,EAAAO,EAAEC,IAAIJ,EAAO,wBAGf,SAASb,EAAwBa,GACtC,OAAOJ,EAAAO,EAAEE,OAAOnB,EAAcc,GAAQ,CAAEM,eAAe,IAUlD,SAASlB,EAAcY,GAC5B,OAAOJ,EAAAO,EAAEC,IAAIJ,EAAO,yBAA2B,GAG1C,SAASX,EAAeW,GAC7B,OAAOJ,EAAAO,EAAEC,IAAIJ,EAAO,2BAA6B,GAG5C,SAASV,EAAWU,GACzB,OAAOA,EAAMC,YAAYM,qBAGpB,SAAShB,EAAuBS,GACrC,OAAOJ,EAAAO,EAAEC,IAAIJ,EAAO,4BAA8B,GAG7C,SAASR,IACd,IAAMgB,EAOCT,EAAAI,EAAYM,MAAMf,EAAA,EAAQgB,SAASC,OAAOC,MAAM,KAAK,IAN5D,OAAIJ,GAAUA,EAAOK,SACZC,KAAKL,MAAMD,EAAOK,UAEpB,GAMF,SAASpB,EAASO,GACvB,GAAIA,EAAMC,YAAYc,cAAgBf,EAAMC,YAAYe,iBAAkB,CACxE,IAAMC,EAAOjB,EAAMC,YAAYc,aAC/B,OAAOf,EAAMC,YAAYe,iBAAiBE,IAAI,SAAAf,GAC5C,IAAMgB,EAAOhB,EAAEiB,IAAMH,EAAKG,GAC1B,MAAO,CACLA,GAAIjB,EAAEiB,GACNC,KAAMlB,EAAEmB,SACRC,YAAapB,EAAEmB,UAAYH,EAAO,QAAU,OAIlD,MAAO,kJCjDTK,EAAA,SAAAC,GAAA,SAAAD,mDAoDA,OApDiCE,EAAA,EAAAF,EAAAC,GAC/BD,EAAAG,UAAAC,iBAAA,SAAiBC,GACfC,KAAKC,SAAS,CAAET,SAAUO,EAAMG,OAAOC,SAEzCT,EAAAG,UAAAO,iBAAA,SAAiBL,GACfC,KAAKC,SAAS,CAAEI,SAAUN,EAAMG,OAAOC,SAEzCT,EAAAG,UAAAS,YAAA,WACkBN,KAAKO,MAAMC,QAEnBC,SACN,CACEjB,SAAUQ,KAAK9B,MAAMsB,SACrBa,SAAUL,KAAK9B,MAAMmC,UAEvB,SAAAK,GACEC,eAAeC,QAAQ,MAAOF,EAASG,WAAW,GAAGC,cACrDC,OAAAC,EAAA,EAAAD,CAAYE,EAAA,EAAYC,oBAK9BxB,EAAAG,UAAAsB,OAAA,eAAAC,EAAApB,KACE,OACEqB,EAAA,qBACEC,MAAO,CACLC,OAAWC,OAAOC,YAAW,KAC7BC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,cAAe,WAGjBR,EAAA,cAACS,EAAA,EAAS,CAACC,MAAM,WAAWC,SAAUhC,KAAKF,iBAAiBmC,KAAKjC,QACjEqB,EAAA,yBACAA,EAAA,cAACS,EAAA,EAAS,CACRE,SAAUhC,KAAKI,iBAAiB6B,KAAKjC,MACrCkC,KAAK,WACLH,MAAM,WACNI,WAAY,SAAAC,GACQ,IAAdA,EAAEC,UACJjB,EAAKd,iBAIXe,EAAA,yBACAA,EAAA,cAACiB,EAAA,EAAM,CAACC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,WAAM,OAAArB,EAAKd,gBAAa,WAMrFZ,EApDA,CAAiC2B,EAAA,WA8DpBqB,EAAY3B,OAAA4B,EAAA,EAAA5B,CARD,SAAC7C,GACvB,MAAO,CAAE0E,UAAW1E,EAAMC,YAAY0E,iBAEb,SAAAC,GACzB,MAAO,CACLtC,QAASO,OAAAgC,EAAA,mBAAAhC,CAAmBiC,EAAA,EAAgBF,KAGvB/B,CAGvBrB,gNCtEFuD,IAAeC,EAAA7E,EAAU8E,YACzBC,IAAoBF,EAAA7E,EAAU8E,YAE9B,IAAME,EAAiB,SAACC,GACtB,MAAO,CACLC,MAAO,CACLrB,KAAM,UAIRsB,MAAO,CACLC,KAAM,yBAERC,MAAO,CACLxB,KAAM,YAERyB,MAAO,CACLC,IAAK,EACLJ,MAAO,CACLC,KAAM,QACNI,MAAO,QAETC,OAAQ,CACNC,SAAU,YAGdC,QAAS,CACPC,YAAa,YAEfC,YAAa,CACXC,IAAK,CACHC,WAAY,CACVC,SAAS,IAGbC,OAAQ,CACNF,WAAY,CACVC,SAAS,GAEXE,kBAAkB,EAClBC,OAAQ,CACNC,MAtCgBnB,EAAAoB,iBA0CtBC,OAAQ,CACNN,SAAS,EACTO,OAAQ,WACRf,MAAO,QACPgB,cAAe,MACfC,GAAI,GACJC,EAAG,GACHC,UAAU,EACVC,YAAa,EACbC,QAAQ,GAEVC,QAAS,CACPd,SAAS,KAgBfe,EAAA,SAAAzF,GACE,SAAAyF,EAAY7E,GAAZ,IAAAa,EACEzB,EAAA0F,KAAArF,KAAMO,IAAMP,KAsBdoB,EAAAkE,mBAAqB,SAAAlD,GACnBhB,EAAKmE,KAAKnD,EAAElC,OAAOC,QAtBnB,IAAMqF,EAASnC,EAAe,CAC5BqB,cAAetD,EAAKsD,cAAczC,KAAKb,YAEzCA,EAAKlD,MAAQ,CACXsH,OAAMA,EACNjC,MAAO,KACPkC,YAAa,GACbC,YAAanF,EAAMoF,qBAqDzB,OA/DwC/F,EAAA,EAAAwF,EAAAzF,GActCyF,EAAAvF,UAAA6E,cAAA,SAActC,GACZ,GAA+B,mBAA3BpC,KAAK9B,MAAMwH,YACb,OAAOE,QAAQC,IAAIzD,IAIvBgD,EAAAvF,UAAAiG,eAAA,SAAe3F,GACb,MAAgB,kBAATA,EAA4B,wBAA0B,kBAO/DiF,EAAAvF,UAAA0F,KAAA,SAAKG,GAAL,IAAAtE,EAAApB,KACEA,KAAKO,MAAMC,QAAQuF,iBAAiB,CAAEL,YAAWA,IAAIM,KAAK,SAAAC,GACxD,IAAMC,EAASC,IACb,CACE3C,MAAO,CACLC,KAAMrC,EAAK0E,eAAeJ,KAG9BtE,EAAKlD,MAAMsH,QAEPA,EAASzE,OAAOqF,OAAO,GAAIF,EAAQD,GACzC7E,EAAKnB,SAAS,CAAEsD,MAAO8C,EAAA,cAACnD,EAAA7E,EAAS,CAACmH,OAAQA,MAC1CpE,EAAKnB,SAAS,CAAEyF,YAAWA,EAAEF,OAAMA,OAIvCJ,EAAAvF,UAAAyG,mBAAA,WACEtG,KAAKuF,KAAKvF,KAAK9B,MAAMwH,cAGvBN,EAAAvF,UAAAsB,OAAA,WACE,OAAKnB,KAAK9B,MAAMsH,OAIda,EAAA,yBACEA,EAAA,cAAC/D,EAAA,EAAM,CAACnC,MAAOH,KAAK9B,MAAMwH,YAAa1D,SAAUhC,KAAKsF,oBACpDe,EAAA,cAACE,EAAA,EAAQ,CAACpG,MAAO,kBAAgB,kBACjCkG,EAAA,cAACE,EAAA,EAAQ,CAACpG,MAAO,WAAS,YAE5BkG,EAAA,uBAAIrG,KAAK9B,MAAMuH,aACdzF,KAAK9B,MAAMqF,OATP8C,EAAA,uCAabjB,EA/DA,CAAwCiB,EAAA,WA2E3BN,EAAmBhF,OAAAyF,EAAA,EAAAzF,CAVR,SAAA7C,GACtB,MAAO,CACLyH,kBAAmB5E,OAAA0F,EAAA,EAAA1F,GAAgB2E,aAAe,mBAG3B,SAAA5C,GACzB,MAAO,CACLtC,QAASO,OAAA2F,EAAA,mBAAA3F,CAAmB4F,EAAA,EAAgB7D,KAGhB/B,CAG9BqE,iMC7HIwB,EAAkB,SAACrG,GACf,IAAAsG,EAAAtG,EAAAsG,aACR,OACEC,EAAA,yBACEA,EAAA,cAACC,EAAA,EAAQ,KACNF,EAAazH,IAAI,SAAC4H,EAAaC,GAC9B,OACEH,EAAA,cAACI,EAAA,EAAQ,CACPC,UAAWH,EAAY3C,QACvB+C,IAAKH,EACLxE,QAAS,SAAA1C,GACPQ,EAAMC,QAAQwG,EAAYK,eAAeL,EAAYM,iBAGtDN,EAAYjF,YASrBwF,EAAc,SAAChH,GACX,IAAAiH,EAAAjH,EAAAiH,SAAUL,EAAA5G,EAAA4G,SACZM,EAAoBD,EAASX,aAAaa,KAAK,SAAAC,GAAK,MAA0B,WAA1BA,EAAE5F,MAAM6F,gBAM5Df,EAAeW,EAASX,aAAatI,OAAO,SAAAoJ,GAAK,MAA0B,WAA1BA,EAAE5F,MAAM6F,gBAC/D,OACEd,EAAA,cAACe,EAAA,EAAQ,CAACC,OAAO,EAAMX,SAAUA,EAAUY,QAAM,EAACtF,QAPnC,SAAA1C,GACX0H,GACFlH,EAAMC,QAAQiH,EAAkBJ,eAAeI,EAAkBH,iBAMjER,EAAA,cAACkB,EAAA,EAAY,CAAC1G,MAAO,CAAEkB,MAAOgF,EAASS,gBAAkB,MAAQ,UAC9DT,EAASS,gBACRnB,EAAA,cAACoB,EAAA,EAAY,MAEbpB,EAAA,cAACqB,EAAA,EAAI,CAACC,UAAU,kBAAgB,yBAGpCtB,EAAA,cAACuB,EAAA,EAAY,KACXvB,EAAA,cAACwB,EAAA,EAAU,KAAKd,EAASe,KAAI,IAAIf,EAASzF,OACzCyF,EAASgB,UAAUpJ,IAAI,SAACqJ,EAAKxB,GAAU,OACtCH,EAAA,cAACwB,EAAA,EAAU,CAAClB,IAAKH,EAAOzE,MAAM,iBAC3BiG,MAIN5B,EAAa6B,OACZ5B,EAAA,cAAC6B,EAAA,EAAuB,KACtB7B,EAAA,cAACF,EAAe,CAACC,aAAcA,EAAcrG,QAASD,EAAMC,WAE5D,OAKVoI,EAAA,SAAAjJ,GAAA,SAAAkJ,mDAqBA,OArBsCC,EAAA,EAAAD,EAAAlJ,GACpCkJ,EAAAhJ,UAAAsB,OAAA,eAAAC,EAAApB,KACE,OACE8G,EAAA,yBACEA,EAAA,cAACiC,EAAA,EAAI,KACF/I,KAAKO,MAAMyI,mBACRhJ,KAAKO,MAAMiE,OAAOpF,IAAI,SAAAgD,GACpB,OACE0E,EAAA,cAACS,EAAW,CACV/G,QAASY,EAAKb,MAAMC,QACpBgH,SAAUpF,EACVgF,IAAKhF,EAAE9C,GACP6H,SAAU/F,EAAKb,MAAMxB,SAASkK,WAAa7G,EAAE9C,OAInD,QAKduJ,EArBA,CAAsC/B,EAAA,WAmCzBoC,EAAiBnI,OAAAoI,EAAA,EAAApI,CAZN,SAAC7C,GACvB,MAAO,CACLsG,OAAQzD,OAAAqI,EAAA,EAAArI,CAAc7C,GACtB8K,mBAAoB9K,EAAM8K,mBAC1BjK,SAAUgC,OAAAqI,EAAA,EAAArI,KAGa,SAAA+B,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBuI,EAAA,EAAgBxG,KAGlB/B,CAG5B6H,YC1HIW,GAAQ,IAAIC,MAAOC,cAAcC,MAAM,EAAG,IAEhDC,EAAA,SAAAhK,GAAA,SAAAiK,IAAA,IAAAxI,EAAA,OAAAzB,KAAAkK,MAAA7J,KAAA8J,YAAA9J,YAIEoB,EAAAlD,MAAQ,CAAE6L,WAAYR,EAAOS,SAAUT,GAEvCnI,EAAA6I,gBAAkB,WAChB7I,EAAKb,MAAMC,QAAQ0J,gBAAgB,CACjCH,WAAY3I,EAAKlD,MAAM6L,WACvBC,SAAU5I,EAAKlD,MAAM8L,YAIzB5I,EAAA+I,aAAe,SAAA/H,GACbhB,EAAKnB,SAAS,CAAE8J,WAAY3H,EAAElC,OAAOC,SAEvCiB,EAAAgJ,WAAa,SAAAhI,GACXhB,EAAKnB,SAAS,CAAE+J,SAAU5H,EAAElC,OAAOC,WA8BvC,OA/C2C2I,EAAA,EAAAc,EAAAjK,GAoBzCiK,EAAA/J,UAAAsB,OAAA,WACE,OACE2F,EAAA,cAACuD,EAAA,EAAI,CAACC,WAAS,GACbxD,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GACb1D,EAAA,cAAC2D,EAAA,EAAS,CACRvI,KAAK,OACLH,MAAM,OACN5B,MAAOH,KAAK9B,MAAM6L,WAClB/H,SAAUhC,KAAKmK,gBAGnBrD,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GACb1D,EAAA,cAAC2D,EAAA,EAAS,CAACvI,KAAK,OAAOH,MAAM,KAAK2I,aAAcnB,EAAOvH,SAAUhC,KAAKoK,cAExEtD,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GACb1D,EAAA,cAAC6D,EAAA,EAAM,CACLlI,QAASzC,KAAKiK,gBACd3I,MAAO,CAAEsJ,UAAW,QACpBpI,MAAM,UACND,QAAQ,aAAW,aAQ/BqH,EA/CA,CAA2C9C,EAAA,WAwD9B+D,EAAe9J,OAAAoI,EAAA,EAAApI,CARJ,SAAC7C,GACvB,MAAO,IAEkB,SAAA4E,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBuI,EAAA,EAAgBxG,KAGpB/B,CAG1B4I,wDClEFmB,EAAA,SAAAnL,GAAA,SAAAoL,IAAA,IAAA3J,EAAA,OAAAzB,KAAAkK,MAAA7J,KAAA8J,YAAA9J,YAGEoB,EAAA4J,kBAAoB,SAAAjL,GAClB,IAAMkL,EAAOlL,EAAMG,OAAOgL,MAAM,GAC5BC,EAAS,IAAIC,WAGjBD,EAAOE,iBAAiB,OADP,WAAM,OAAAjK,EAAKb,MAAM+K,kBAAkBH,EAAOI,UACjB,GACtCN,GACFE,EAAOK,WAAWP,MAuBxB,OAjCsCnC,EAAA,EAAAiC,EAAApL,GAcpCoL,EAAAlL,UAAAsB,OAAA,eAAAC,EAAApB,KACQ+H,EAAS/H,KAAKO,MAAMwH,QACxBjB,EAAA,cAAC6D,EAAA,EAAM,CAACpI,QAAQ,WAAWkJ,UAAU,QAAM,UAI7C,OACE3E,EAAA,yBACEA,EAAA,uBACExH,GAAG,mBACHoM,QAAM,EACNC,IAAK,SAAAA,GAAO,OAACvK,EAAKwK,UAAYD,GAC9B3J,SAAUhC,KAAKgL,kBACf9I,KAAK,SAEP4E,EAAA,uBAAO+E,QAAQ,oBAAoB9D,KAI3CgD,EAjCA,CAAsCjE,EAAA,WCoBtCgF,EAAA,SAAAnM,GAAA,SAAAoM,IAAA,IAAA3K,EAAA,OAAAzB,KAAAkK,MAAA7J,KAAA8J,YAAA9J,YACEoB,EAAAlD,MAAQ,CACN8N,eAAgBC,EAAA,EAAgBC,QAGlC9K,EAAA+K,aAAe,SAAApM,GACbqB,EAAKnB,SAAS,CAAE+L,eAAgBjM,EAAMG,OAAOC,SAG/CiB,EAAAkK,kBAAoB,SAACc,GAEnB,GADAxG,QAAQC,IAAIuG,GACRhL,EAAKlD,MAAM8N,eAAetD,QAAU0D,EACtC,OAAOhL,EAAKb,MAAMC,QAAQ6L,gBACxB,CACEC,OAAQlL,EAAKlD,MAAM8N,eACnBI,QAASA,GAEX,SAAAnG,GACEzE,OAAO5C,SAAS2N,UAElB,SAAAtG,GAAO,OAAA7E,EAAKb,MAAMC,QAAQgM,SAASvG,EAAIwG,QAAU,sBA2CzD,OA/D4C3D,EAAA,EAAAiD,EAAApM,GAyB1CoM,EAAAlM,UAAAsB,OAAA,eAAAC,EAAApB,KAEE,OACE8G,EAAA,qBAAKxF,MAAO,CAAEoL,WAAY,SACxB5F,EAAA,cAAC6F,EAAA,EAAc,CAACC,UAAU,GACxB9F,EAAA,cAAC+F,EAAA,EAAqB,KACpB/F,EAAA,cAACuD,EAAA,EAAI,CAACC,WAAS,EAACwC,QAAS,IACvBhG,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACkG,EAAA,EAAM,CAAC7M,MAAOH,KAAK9B,MAAM8N,eAAgBhK,SAAUhC,KAAKmM,cAPrD,CAAC,SAAU,YAAa,gBAAiB,QAQlC/M,IAAI,SAAA6N,GACX,OACEnG,EAAA,cAACI,EAAA,EAAQ,CAACE,IAAK6F,EAAG9M,MAAO8M,GACtBA,OAMXnG,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACgE,EAAgB,CAACQ,kBAAmBtL,KAAKsL,uBAIhDxE,EAAA,cAACoG,EAAA,EAAO,MACRpG,EAAA,cAACqG,EAAA,EAAqB,KACpBrG,EAAA,cAAC6D,EAAA,EAAM,CACLyC,KAAK,QACL3K,QAAS,WACPrB,EAAKb,MAAMC,QAAQ6M,gBACpB,cASftB,EA/DA,CAA4CjF,EAAA,WAyE/BwG,EAAmBvM,OAAAoI,EAAA,EAAApI,CARR,SAAC7C,GACvB,MAAO,IAEkB,SAAA4E,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBuI,EAAA,EAAgBxG,KAGhB/B,CAG9B+K,WCzFK,SAASyB,IACd,IAAMhE,EAAQ,IAAIC,KAIlB,OAHaD,EAAMiE,cAGL,KAFAjE,EAAMkE,WAAa,EAAI,KAAOlE,EAAMkE,WAAa,GAAKlE,EAAMkE,WAAa,GAEhE,KADXlE,EAAMmE,UAAY,GAAK,IAAMnE,EAAMmE,UAAYnE,EAAMmE,WCsBnE,IAAMC,EAAc,CAClBC,YAAa,CAAE1L,KAAM,OAAQ2L,UAAU,GACvCC,SAAU,CAAE5L,KAAM,OAAQ2L,UAAU,GACpCE,MAAO,CAAE7L,KAAM,OAAQ2L,UAAU,GACjCG,YAAa,CAAE9L,KAAM,SAAU2L,UAAU,GACzCI,YAAa,CAAE/L,KAAM,SAAU2L,UAAU,GACzCK,aAAc,CAAEhM,KAAM,SAAU2L,UAAU,IAGtCM,EAAa,SAAC5N,GAKV,IAAA6N,EAAA7N,EAAA6N,UAAWC,EAAA9N,EAAA8N,YAAaC,EAAA/N,EAAA+N,SAC1B9I,EAASmI,EAAYS,GACvBG,GAAQ,EAOZ,OANI/I,EAAOqI,WAAaS,EAASF,GAC/BG,GAAQ,EACC/I,EAAOqI,UAA4B,WAAhBrI,EAAOtD,QAAuBoM,EAASF,KACnEG,GAAQ,GAIRzH,EAAA,cAAC2D,EAAA,EAAS,CACRvI,KAAMsD,EAAOtD,KACb2L,SAAUrI,EAAOqI,SACjBU,MAAOA,EACPxM,MAAOqM,EACPjO,MAAOmO,EAASF,GAChBpM,SAAUqM,EAAYD,MAI5B,SAASI,IACP,MAAO,CACLC,YAAa,CACXb,YAAaL,IACbO,SAAU,GACVC,MAAO,GACPC,YAAa,GACbE,aAAc,IACdD,YAAa,MAKnB,IAAAS,EAAA,SAAA/O,GAAA,SAAAgP,IAAA,IAAAvN,EAAA,OAAAzB,KAAAkK,MAAA7J,KAAA8J,YAAA9J,YACEoB,EAAAlD,MAAQsQ,IAERpN,EAAAwN,kBAAoB,WAClBxN,EAAKb,MAAMC,QACRqO,kBAAkBzN,EAAKlD,MAAMuQ,aAC7BzI,KAAK,SAAAC,GAAO,OAAA7E,EAAKb,MAAMC,QAAQ6M,iBAEpCjM,EAAAiN,YAAc,SAACD,GACb,IAAMU,EAAM1N,EAAKlD,MAAMuQ,YACvB,OAAO,SAAA1O,SACCgP,EAAWhO,OAAOqF,OAAO,GAAI0I,IAAGxL,EAAA,IACnC8K,GAAYrO,EAAMG,OAAOC,UAE5BiB,EAAKnB,SAAS,CAAEwO,YAAaM,QAuFnC,OArG0CjG,EAAA,EAAA6F,EAAAhP,GAiBxCgP,EAAA9O,UAAAmP,QAAA,WACE,IAAMC,EAAIjP,KAAK9B,MAAMuQ,YACrB,MAAO,CAACQ,EAAErB,YAAaqB,EAAEnB,UAAWmB,EAAEf,cAAcgB,MAAMC,UAE5DR,EAAA9O,UAAAsB,OAAA,eAAAC,EAAApB,KACUoP,EAAApP,KAAAO,MAAA6O,qBACFX,EAAczO,KAAK9B,MAAMuQ,YAC/B,OACE3H,EAAA,qBAAKxF,MAAO,CAAEoL,WAAY,SACxB5F,EAAA,cAAC6F,EAAA,EAAc,CAACC,UAAU,GACxB9F,EAAA,cAAC+F,EAAA,EAAqB,KACpB/F,EAAA,cAACuD,EAAA,EAAI,CAACC,WAAS,EAACwC,QAAS,IACvBhG,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACqH,EAAU,CACTG,SAAUG,EACVL,UAAU,cACVC,YAAarO,KAAKqO,eAGtBvH,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACqH,EAAU,CACTC,UAAU,WACVE,SAAUG,EACVJ,YAAarO,KAAKqO,eAGtBvH,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACqH,EAAU,CACTC,UAAU,eACVE,SAAUG,EACVJ,YAAarO,KAAKqO,eAGtBvH,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACuI,EAAA,EAAiB,CAChBf,SAAUG,EACVa,QAASF,EACTG,yBAAyB,cACzBvN,SAAU,SAACsM,EAAUkB,GACnB,IAAMT,EAAWhO,OAAOqF,OAAO,GAAIhF,EAAKlD,MAAMuQ,YAAae,GAC3DpO,EAAKnB,SAAS,CAAEwO,YAAaM,QAInCjI,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACqH,EAAU,CACTC,UAAU,QACVE,SAAUG,EACVJ,YAAarO,KAAKqO,eAGtBvH,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACqH,EAAU,CACTC,UAAU,cACVE,SAAUG,EACVJ,YAAarO,KAAKqO,iBAK1BvH,EAAA,cAACoG,EAAA,EAAO,MACRpG,EAAA,cAACqG,EAAA,EAAqB,KACpBrG,EAAA,cAAC6D,EAAA,EAAM,CACLyC,KAAK,QACL3K,QAAS,WACPrB,EAAKnB,SAASuO,KACdpN,EAAKb,MAAMC,QAAQ6M,gBACpB,UAIHvG,EAAA,cAAC6D,EAAA,EAAM,CACLyC,KAAK,QACL5K,MAAM,UACNC,QAASzC,KAAK4O,kBACdzH,UAAWnH,KAAKgP,WAAS,YASvCL,EArGA,CAA0C7H,EAAA,WAoH7B2I,EAAqB1O,OAAAoI,EAAA,EAAApI,CAbV,SAAA7C,GACtB,MAAO,CACLkR,qBAAsBrO,OAAAqI,EAAA,EAAArI,CAAwB7C,GAC9CwR,SAAU3O,OAAAqI,EAAA,EAAArI,CAAS7C,GACnByR,YAAazR,EAAMC,YAAYc,aAC/B2Q,QAAS7O,OAAAqI,EAAA,EAAArI,CAAW7C,KAGG,SAAA4E,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBuI,EAAA,EAAgBxG,KAGd/B,CAGhC2N,kHC7LFmB,GAAA,SAAAlQ,GAAA,SAAAmQ,IAAA,IAAA1O,EAAA,OAAAzB,KAAAkK,MAAA7J,KAAA8J,YAAA9J,YACEoB,EAAAlD,MAAQ,CAAE6R,SAAU,MACpB3O,EAAA4O,QAAU,SAAAjQ,GACRqB,EAAKnB,SAAS,CAAE8P,SAAUhQ,EAAMkQ,gBAChC7O,EAAKb,MAAMC,QAAQ0P,eAAe,KAEpC9O,EAAA+O,YAAc,SAAApQ,GACZqB,EAAKnB,SAAS,CAAE8P,SAAU,UA2D9B,OAlEiCjH,EAAA,EAAAgH,EAAAnQ,GAS/BmQ,EAAAjQ,UAAAsB,OAAA,eAAAC,EAAApB,KACQoQ,EACJtJ,EAAA,cAACuJ,GAAA,EAAc,CAACC,SAAS,SACvBxJ,EAAA,cAACyJ,GAAA,EAAM,OAYX,OACEzJ,EAAA,yBACEA,EAAA,cAAC2D,EAAA,EAAS,CACRzI,SAAU,SAAAjC,GACR,OAAAqB,EAAKb,MAAMC,QAAQgQ,cAAc,CAC/BzR,SAAU,CAAE0R,UAAW1Q,EAAMG,OAAOC,UAGxCuQ,WAAY,CACVC,eAAgB7J,EAAA,cAACuJ,GAAA,EAAc,CAACC,SAAS,SAASF,MAGtDtJ,EAAA,cAAC8J,GAAA,EAAI,CACHC,OAAQ7Q,KAAK9B,MAAM6R,SACnBA,SAAU/P,KAAK9B,MAAM6R,SACrBe,QAAS9Q,KAAKmQ,YACdY,mBAAoB,KACpBC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,UAGblR,KAAKO,MAAM6Q,YAAYhS,IAAI,SAACiS,EAAKpK,GAAU,OAC1CH,EAAA,cAACI,EAAA,EAAQ,CACPE,IAAKH,EACLxE,QAAS,WACPrB,EAAKb,MAAMC,QAAQgQ,cAAc,CAC/BzR,SAAUsS,EAAItS,aAIjBsS,EAAItP,YAOnB+N,EAlEA,CAAiChJ,EAAA,WA6EpBwK,GAAYvQ,OAAAoI,EAAA,EAAApI,CATD,SAAC7C,EAAcqT,GACrC,MAAO,CAAEH,YAAalT,EAAMC,YAAYqT,aAGf,SAAA1O,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBuI,EAAA,EAAgBxG,KAGvB/B,CAGvB8O,IC9DF4B,GAAA,SAAA9R,GAAA,SAAA+R,IAAA,IAAAtQ,EAAA,OAAAzB,KAAAkK,MAAA7J,KAAA8J,YAAA9J,YACEoB,EAAAuQ,uBAAyB,WACvBvQ,EAAKb,MAAMqR,SAAS,gBAGtBxQ,EAAAyQ,qBAAuB,WACrBzQ,EAAKb,MAAMqR,SAAS,cAGtBxQ,EAAA0Q,oBAAsB,WACpB1Q,EAAKb,MAAMqR,SAAS,UAGtBxQ,EAAA2Q,qBAAuB,WACrB3Q,EAAKb,MAAMC,QAAQuR,0BA+CvB,OA7D6CjJ,EAAA,EAAA4I,EAAA/R,GAiB3C+R,EAAA7R,UAAAsB,OAAA,WACE,OACE2F,EAAA,cAACkL,EAAA,EAAM,CAAC1B,SAAS,SAAS9N,MAAM,WAC9BsE,EAAA,cAACmL,EAAA,EAAO,KACNnL,EAAA,cAACoL,EAAA,EAAO,CAAC1O,MAAM,kBACbsD,EAAA,cAACqL,EAAA,EAAU,CAAC1P,QAASzC,KAAK+R,sBACxBjL,EAAA,cAACsL,EAAA,EAAO,QAGXpS,KAAKO,MAAMqP,QACV9I,EAAA,cAACwB,EAAA,EAAU,CACT/F,QAAQ,QACR6E,IAAI,WACJ,aAAapH,KAAKO,MAAMqP,SACxB,KACJ9I,EAAA,qBAAKxF,MAAO,CAAE+Q,KAAM,KACpBvL,EAAA,cAACwK,GAAS,MACVxK,EAAA,cAACC,EAAA,EAAQ,CAACqJ,KAAMtJ,EAAA,cAACwL,EAAA,EAAG,OAClBxL,EAAA,cAACI,EAAA,EAAQ,CAACE,IAAI,uBAAuB3E,QAASzC,KAAK2R,wBACjD7K,EAAA,cAACkB,EAAA,EAAY,KACXlB,EAAA,cAACyL,EAAA,EAAW,OAEdzL,EAAA,cAACuB,EAAA,EAAY,qBAEfvB,EAAA,cAACI,EAAA,EAAQ,CAACE,IAAI,qBAAqB3E,QAASzC,KAAK6R,sBAC/C/K,EAAA,cAACkB,EAAA,EAAY,KACXlB,EAAA,cAAC0L,EAAA,EAAU,OAEb1L,EAAA,cAACuB,EAAA,EAAY,mBAEfvB,EAAA,cAACI,EAAA,EAAQ,CAACE,IAAI,iBAAiB3E,QAASzC,KAAK8R,qBAC3ChL,EAAA,cAACkB,EAAA,EAAY,KACXlB,EAAA,cAAC2L,EAAA,EAAM,OAET3L,EAAA,cAACuB,EAAA,EAAY,uBAGjBvB,EAAA,cAACqL,EAAA,EAAU,CAAC1P,QAASzC,KAAKO,MAAMC,QAAQkS,QACtC5L,EAAA,cAACqB,EAAA,EAAI,CAACC,UAAU,kBAAgB,mBAM5CsJ,EA7DA,CAA6C5K,EAAA,WAyEhC6L,GAAwB5R,OAAAoI,EAAA,EAAApI,CAXb,SAAC7C,EAAiBqT,GACxC,MAAO,CACLH,YAAarQ,OAAAqI,EAAA,EAAArI,CAAe7C,GAC5B0R,QAAS7O,OAAAqI,EAAA,EAAArI,CAAW7C,KAGG,SAAA4E,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBuI,EAAA,EAAgBxG,KAGX/B,CAGnC0Q,2ECxFFmB,GAAA,SAAAjT,GAAA,SAAAkT,mDAsBA,OAtBmC/J,EAAA,EAAA+J,EAAAlT,GACjCkT,EAAAhT,UAAAsB,OAAA,eAAAC,EAAApB,KACQsD,EAAAtD,KAAAO,MAAEuS,EAAAxP,EAAAwP,WAAYC,EAAAzP,EAAAyP,SACdjU,EAAQgU,EAAWhU,MAAQ,SAAW,GAC5C,OACEgI,EAAA,qBAAKxF,MAAO,CAAEkB,MAAO,mBAAoBwQ,WAAY,SAClD,GAAGlU,EAAQgU,EAAWG,cAAa,IACpCnM,EAAA,cAACuD,EAAA,EAAI,CAACC,WAAS,GACbxD,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIuC,GAAI,GACrBjG,EAAA,cAACqL,EAAA,EAAU,CAAC1P,QAAS,WAAM,OAAAsQ,MACzBjM,EAAA,cAACoM,GAAA,EAAK,CAAC1Q,MAAM,cAGjBsE,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIuC,GAAI,GACrBjG,EAAA,cAACqL,EAAA,EAAU,CAAC1P,QAAS,WAAM,OAAArB,EAAKnB,SAAS,CAAEkT,UAAU,MACnDrM,EAAA,cAACsM,GAAA,EAAK,CAAC5Q,MAAM,mBAO3BqQ,EAtBA,CAAmC/L,EAAA,WAwBnCuM,GAAA,SAAA1T,GACE,SAAA2T,EAAY/S,GAAZ,IAAAa,EACEzB,EAAA0F,KAAArF,KAAMO,IAAMP,YACZoB,EAAKlD,MAAQ,CACXiV,UAAU,KAsBhB,OA1BmCrK,EAAA,EAAAwK,EAAA3T,GAQjC2T,EAAAzT,UAAA0T,iBAAA,SAAiB9E,EAAae,GAC5B,OAAOxP,KAAKO,MAAMC,QAAQgT,kBAAkB,CAC1ClU,GAAImP,EAAYnP,GAChB0O,YAAawB,EAAQxB,eAIzBsF,EAAAzT,UAAAsB,OAAA,WACQ,IAAAmC,EAAAtD,KAAAO,MAAE6O,EAAA9L,EAAA8L,qBAAsBX,EAAAnL,EAAAmL,YAC9B,OACE3H,EAAA,cAACuI,EAAA,EAAiB,CAChBf,SAAUG,EACVa,QAASF,EACTG,yBAAyB,cACzBvN,SAAUhC,KAAKuT,iBAAiBtR,KAAKjC,SAI7CsT,EA1BA,CAAmCxM,EAAA,+BCXtB2M,GAAoB,SAAClT,GAKxB,IAAAkO,EAAAlO,EAAAkO,YAAaiF,EAAAnT,EAAAmT,SAAUX,EAAAxS,EAAAwS,SAC/B,OAAItE,EAAYqE,WAEZhM,EAAA,cAAC8L,GAAa,CACZE,WAAYrE,EAAYqE,WACxBC,SAAU,WACR,OAAAA,EAASjK,EAAA,GACPxJ,GAAImP,EAAYnP,IACbmP,EAAYqE,gBAOvBhM,EAAA,cAACuD,EAAA,EAAI,CAACC,WAAS,EAACwC,QAAS,IACvBhG,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GACb1D,EAAA,cAACqB,EAAA,EAAI,CAACC,UAAU,kBAAkBsL,EAAWA,EAASC,YAAc,OAEtE7M,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,IAAE,GACVkJ,EAAW5M,EAAA,cAACwB,EAAA,EAAU,CAAC9F,MAAM,iBAAiBkR,EAAS3R,OAAsB,QAMtF6R,GAAA,SAAAjU,GAAA,SAAAkU,mDAuHA,OAvHsC/K,EAAA,EAAA+K,EAAAlU,GACpCkU,EAAAhU,UAAAiU,YAAA,WACQ,IAAAxQ,EAAAtD,KAAAO,MAAEkO,EAAAnL,EAAAmL,YAAaW,EAAA9L,EAAA8L,qBACrB,OAAKX,EAAYT,aACVoB,EAAqB1H,KAAK,SAAAuF,GAAK,OAAAA,EAAE9M,QAAUsO,EAAYT,eADzB,MAGvC6F,EAAAhU,UAAAkU,sBAAA,SAAsBC,GAKpB,QAHEC,GAAA5V,EAAE6V,QAAQF,EAAUvF,YAAazO,KAAKO,MAAMkO,cAC5CuF,EAAUpH,WAAa5M,KAAKO,MAAMqM,WAItCiH,EAAAhU,UAAAsB,OAAA,eL3EyBlE,EK2EzBmE,EAAApB,KACQsD,EAAAtD,KAAAO,MAAEkO,EAAAnL,EAAAmL,YAAaW,EAAA9L,EAAA8L,qBAAsB5O,EAAA8C,EAAA9C,QAASoM,EAAAtJ,EAAAsJ,SAAUuH,EAAA7Q,EAAA6Q,kBACxDT,EAAW1T,KAAK8T,cACtB,OACEhN,EAAA,yBACEA,EAAA,cAAC6F,EAAA,EAAc,CACbxF,UAAWsH,EAAY2F,SACvBxH,SAAUA,EACV5K,SAAUmS,GAEVrN,EAAA,cAAC+F,EAAA,EAAqB,KACpB/F,EAAA,cAACuD,EAAA,EAAI,CAACC,WAAS,EAACwC,QAAS,IACvBhG,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACwB,EAAA,EAAU,MLxFArL,EKwFawR,EAAYb,YLvFrC,IAAIpE,KAAKvM,GACVoX,mBAAmB,QAAS,CACtCC,MAAO,QACPC,IAAK,UACLC,SAAU,UKoFG5H,EAAW,KACV9F,EAAA,cAAC2M,GAAiB,CAChBhF,YAAaA,EACbiF,SAAUA,EACVX,SAAU/S,KAAKO,MAAMC,QAAQiU,kBAAkBxS,KAAKjC,SAI1D8G,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACnB0B,EAAYiG,eACX5N,EAAA,cAACoL,EAAA,EAAO,CACN1O,MACEsD,EAAA,cAAC6N,GAAAtW,EAAQ,CAACuW,iBAAkB,WAAM,UAAMC,KAAMpG,EAAYiG,kBAG5D5N,EAAA,cAACqB,EAAA,EAAI,CAAC7G,MAAO,CAAEkB,MAAO,OAAQsS,MAAO,QAAU1M,UAAU,kBAAgB,YAIzE,KACJtB,EAAA,cAACwB,EAAA,EAAU,CAAC/F,QAAQ,SAASkM,EAAYX,UACzChH,EAAA,yBACEA,EAAA,cAACwB,EAAA,EAAU,CAAC9F,MAAM,iBAAiBiM,EAAYsG,cAC/CjO,EAAA,cAACwB,EAAA,EAAU,CAAC9F,MAAM,iBAAiBiM,EAAYuG,gBAC/ClO,EAAA,cAACwB,EAAA,EAAU,CAAC9F,MAAM,iBAAiBiM,EAAYV,SAGnDjH,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,EAAGzL,MAAO,CAAE2T,YAAa,SAC7CnO,EAAA,cAACwB,EAAA,EAAU,KAAE,IAAImG,EAAYP,eAC3BO,EAAYyG,eAAiBtI,EAC7B9F,EAAA,cAACwB,EAAA,EAAU,CACThH,MAAO,CACLkB,OAAQiM,EAAYyG,aAAe,EAAI,QAAU,QAGlD,IAAIzG,EAAYyG,cAEjB,QAIVpO,EAAA,cAACqO,GAAA,EAAqB,KACpBrO,EAAA,cAACuD,EAAA,EAAI,CAACC,WAAS,EAACwC,QAAS,IACvBhG,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAAC2D,EAAA,EAAS,CACRzI,SAAU,SAAAjC,GACR,OAAAS,EAAQgT,kBAAkB,CACxBlU,GAAImP,EAAYnP,GAChByO,MAAOhO,EAAMG,OAAOC,YAK5B2G,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAACuM,GAAavK,EAAA,KACR,CACF2F,YAAWA,EACXW,qBAAoBA,EACpB5O,QAAOA,MAIbsG,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,GACpBjG,EAAA,cAAC2D,EAAA,EAAS,CACRzI,SAAU,SAAAjC,GACR,OAAAS,EAAQgT,kBAAkB,CACxBlU,GAAImP,EAAYnP,GAChB4V,aAAcnV,EAAMG,OAAOC,YAKnC2G,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,EAAGuC,GAAI,EAAGzL,MAAO,CAAE8T,UAAW,UAC3CtO,EAAA,cAACuO,GAAA,EAAG,CACFjI,KAAK,SACL5K,MAAM,YAAW8S,aACN,SACX7S,QAAS,WACP,OAAArB,EAAKb,MAAMC,QAAQ+U,kBAAkB,CACnCjW,GAAImP,EAAYnP,OAIpBwH,EAAA,cAAC0O,GAAA,EAAM,aASzB3B,EAvHA,CAAsC/M,EAAA,WAsIzB2O,GAAiB1U,OAAAoI,EAAA,EAAApI,CAbN,SAAA7C,GACtB,MAAO,CACLkR,qBAAsBrO,OAAAqI,EAAA,EAAArI,CAAwB7C,GAC9CwR,SAAU3O,OAAAqI,EAAA,EAAArI,CAAS7C,GACnByR,YAAazR,EAAMC,YAAYc,aAC/B2Q,QAAS7O,OAAAqI,EAAA,EAAArI,CAAW7C,KAGG,SAAA4E,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBuI,EAAA,EAAgBxG,KAGlB/B,CAG5B6S,qCCzKF,IAAA8B,GAAA,SAAA/V,GAAA,SAAAgW,IAAA,IAAAvU,EAAA,OAAAzB,KAAAkK,MAAA7J,KAAA8J,YAAA9J,YACEoB,EAAAlD,MAAQ,CACN0X,sBAAuB,KACvBC,UAAW,MAGbzU,EAAAwQ,SAAW,SAACkE,GACV1U,EAAKnB,SAAS,CAAE4V,UAAWC,OAmE/B,OA1EuChN,EAAA,EAAA6M,EAAAhW,GAUrCgW,EAAA9V,UAAAkW,kBAAA,WACO/V,KAAKO,MAAM6O,qBAAqB1G,QACnC1I,KAAKO,MAAMC,QAAQwV,aAAa,IAElChW,KAAKO,MAAMC,QAAQyV,sBAAqB,IAE1CN,EAAA9V,UAAAsU,kBAAA,SAAkB7U,GACZA,IAAOU,KAAK9B,MAAM0X,sBACpB5V,KAAKC,SAAS,CAAE2V,sBAAuB,OAEvC5V,KAAKC,SAAS,CAAE2V,sBAAuBtW,KAI3CqW,EAAA9V,UAAAsB,OAAA,eAAAC,EAAApB,KACQsD,EAAAtD,KAAAO,MAAE6O,EAAA9L,EAAA8L,qBAAsBpG,EAAA1F,EAAA0F,mBAC9B,OAAKoG,GAAyBA,EAAqB1G,OAIjD5B,EAAA,qBAAKxF,MAAO,CAAE4U,SAAU,SACtBpP,EAAA,cAAC6L,GAAqB,CAACf,SAAU5R,KAAK4R,WACtC9K,EAAA,qBACExF,MAAO,CACLC,OAAQC,OAAOC,YAAc,GAC7BsC,SAAU,WAGZ+C,EAAA,cAACuD,EAAA,EAAI,CAACC,WAAS,GACZtB,EACClC,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACwC,GAAI,GACbjG,EAAA,cAACoC,EAAc,OAEf,KACJpC,EAAA,cAACuD,EAAA,EAAI,CAACE,MAAI,EAACwC,GAAI/D,EAAqB,EAAI,IACtClC,EAAA,qBAAKxF,MAAO,CAAE6U,aAAc,SACA,gBAAzBnW,KAAK9B,MAAM2X,UAA8B/O,EAAA,cAAC2I,EAAkB,MAAM,KACzC,cAAzBzP,KAAK9B,MAAM2X,UAA4B/O,EAAA,cAACwG,EAAgB,MAAM,KACrC,UAAzBtN,KAAK9B,MAAM2X,UACV/O,EAAA,cAAC+D,EAAY,MACX,MAEL7K,KAAKO,MAAM6V,aAAahX,IAAI,SAAA6P,GAAK,OAChCnI,EAAA,cAAC2O,GAAc,CACb7I,SAAUxL,EAAKlD,MAAM0X,wBAA0B3G,EAAE3P,GACjD8H,IAAK6H,EAAE3P,GACPmP,YAAaQ,EACbkF,kBAAmB,SAACpU,EAAO6M,GAAa,OAAAxL,EAAK+S,kBAAkBlF,EAAE3P,SAGrEwH,EAAA,cAAC6D,EAAA,EAAM,CACL0L,WAAS,EACTjJ,KAAK,QACL5K,MAAM,YACNC,QAAS,WAAM,OAAArB,EAAKb,MAAMC,QAAQyV,6BAEhCjW,KAAKO,MAAM6V,aAAa1N,uCAvC7B,MA+CbiN,EA1EA,CAAuC7O,EAAA,WA0F1B5F,GAAkBH,OAAAoI,EAAA,EAAApI,CAdP,SAAC7C,GACvB,MAAO,CACLkY,aAAcrV,OAAAqI,EAAA,EAAArI,CAAuB7C,GACrCkR,qBAAsBrO,OAAAqI,EAAA,EAAArI,CAAwB7C,GAC9CwR,SAAU3O,OAAAqI,EAAA,EAAArI,CAAS7C,GACnByR,YAAazR,EAAMC,YAAYc,aAC/B+J,mBAAoB9K,EAAM8K,qBAGH,SAAAlG,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBuI,EAAA,EAAgBxG,KAGjB/B,CAG7B2U,gGCvHK,SAASlJ,EAAS8J,GACvB,MAAO,CACLpU,KAAM,YACNqU,MAAOD,GAgFJ,IAAME,EAAU5W,EAAA,KAClB6W,EAAA,EAAyB,CAC5BR,qBAzBK,SAA8BS,GACnC,YADmC,IAAAA,OAAA,GAC5B,SAAC5T,EAAU6T,GAChB,IAAMzY,EAAQyY,IACRP,EAAerV,OAAA6V,EAAA,EAAA7V,CAAuB7C,GACtCa,EAAWgC,OAAA6V,EAAA,EAAA7V,GAEb8V,EAAO,EAOX,OALIT,EAAa1N,SAEfmO,EADoBC,KAAKC,KAAKX,EAAa1N,OAF5B,IAGM,GAGhB5F,EACL/B,OAAA0V,EAAA,EAAA1V,CAAgB,CACd2V,MAAKA,EACL3X,SAAQA,EACR8X,KAAIA,OASVxJ,YA7CK,WACL,MAAO,CACLnL,KAAM,kBA4CR8U,SA3DK,WACL,MAAO,CACL9U,KAAM,cA0DRsK,SAAQA,EACRyK,MA5EK,SAAezX,EAAkBa,GACtC,OAAO,SAACyC,EAAU6T,GAChB,OAAO7T,EAAS/B,OAAA0V,EAAA,EAAA1V,CAAS,CAAEvB,SAAQA,EAAEa,SAAQA,KAAK2F,KAAK,SAAAtF,GACjDA,EAAS+L,OACX3J,EAAS0J,EAAS9L,EAAS+L,SAClBkK,IAAWxY,YAAY0E,gBAChClC,eAAeC,QAAQ,MAAO+V,IAAWxY,YAAY0E,gBACrDrB,OAAO5C,SAAS2N,UAEhBzJ,EAAS0J,EAAS,sBAoExB0K,eAxDK,SAAwB7S,GAC7B,MAAO,CACLnC,KAAM,kBACNmC,QAAOA,IAsDT0N,qBA5CK,WACL,OAAO,SAACjP,EAAU6T,GAChB,IAAMzY,EAAQyY,IACRtS,GAAWnG,EAAM8K,mBAKvB,GAJAlG,EAAS,CACPZ,KAAM,yBACNmC,QAAOA,IAELA,IAAYnG,EAAMC,YAAYgZ,SAASzO,OACzC,OAAO5F,EAAS/B,OAAA0V,EAAA,EAAA1V,CAAa,OAoCjC2R,OAtFK,WACL,OAAO,SAAC5P,EAAU6T,GAChBhW,eAAeyW,WAAW,OAC1B5V,OAAO5C,SAAS2N,sICTd8K,EAAoD,SAAA9W,GAChD,IAAA+W,EAAA/W,EAAA+W,MAAOC,EAAAzO,EAAA,EAAAvI,EAAA,WACf,OAAI+W,EACKxQ,EAAA,cAACuB,EAAA,EAAYS,EAAA,KAAKyO,EAAS,CAAEjW,MAAO,CAAE2T,YAAgB,GAAKqC,EAAK,SAElExQ,EAAA,cAACuB,EAAA,EAAYS,EAAA,KAAKyO,KAc3B,IAAAC,EAAA,SAAA7X,GAAA,SAAA8X,mDAMA,OAN0B3O,EAAA,EAAA2O,EAAA9X,GACxB8X,EAAA5X,UAAAsB,OAAA,WACE,OACE2F,EAAA,cAACiC,EAAA,EAAI,KAAG/I,KAAKO,MAAMmX,KAAKC,SAASvY,IAAI,SAAAwY,GAAS,OAdpD,SAASC,EAASC,EAAgBC,GAChC,OACEjR,EAAA,cAACe,EAAA,EAAQ,CAACT,IAAK0Q,EAAKxY,IAClBwH,EAAA,cAACuQ,EAAmB,CAACC,MAAOS,GAC1BjR,EAAA,cAACkR,EAAA,EAAQ,MACRF,EAAKxY,aAGPwY,EAAKH,SAASvY,IAAI,SAAAwY,GAAS,OAAAC,EAASD,EAAOG,EAAQ,MAMNF,CAASD,EAAO,KAAYK,KAAK,OAGrFR,EANA,CAA0B3Q,EAAA,mECL1B,IAAAoR,EAAA,SAAAvY,GAAA,SAAAqW,mDAqCA,OArC2BlN,EAAA,EAAAkN,EAAArW,GACzBqW,EAAAnW,UAAAsB,OAAA,eAAAC,EAAApB,KACE,OACE8G,EAAA,yBACEA,EAAA,cAAC0Q,EAAI,CAACE,KAAM1X,KAAKO,MAAM4X,eACvBrR,EAAA,yBAAM9G,KAAKO,MAAM6X,WAAWhZ,IAAI,SAAAiZ,GAAO,OAAAjX,EAAKkX,QAAQD,QAI1DrC,EAAAnW,UAAA0Y,aAAA,SAAa7E,EAAoBlE,GAC/B,OAAOxP,KAAKO,MAAMC,QAAQgY,eAAe,CACvClZ,GAAIoU,EAASvT,MACbwT,YAAanE,EAAQmE,eAIzBqC,EAAAnW,UAAAyY,QAAA,SAAQD,GACN,IAAM/I,EAAUtP,KAAKO,MAAMkY,YAAYrZ,IAAI,SAAAuI,GACzC,MAAO,CACLxH,MAAOwH,EAAEpI,KACToU,YAAahM,EAAExH,MACf4B,MAAO4F,EAAEpI,QAGb,OACEuH,EAAA,cAAC4R,EAAA,EAAI,CAACtR,IAAKiR,EAAIlY,OACb2G,EAAA,cAACwB,EAAA,EAAU,CAAChH,MAAO,CAAEI,QAAS,SAAW2W,EAAItW,OAC7C+E,EAAA,cAACuI,EAAA,EAAiB,CAChB/N,MAAO,CAAE+Q,KAAM,GACf/D,SAAU+J,EACV/I,QAASA,EACTC,yBAAyB,cACzBvN,SAAUhC,KAAKuY,aAAatW,KAAKjC,UAK3CgW,EArCA,CAA2BlP,EAAA,WAmDd6R,EAAmB5X,OAAAoI,EAAA,EAAApI,CAZR,SAAC7C,GACvB,MAAO,CACLka,WAAYrX,OAAAqI,EAAA,EAAArI,CAAc7C,GAC1Bua,YAAa1X,OAAAqI,EAAA,EAAArI,CAAe7C,GAC5Bia,aAAcja,EAAMC,YAAYga,eAGT,SAAArV,GACzB,MAAO,CACLtC,QAASO,OAAAsI,EAAA,mBAAAtI,CAAmBP,EAAA,EAAgBsC,KAGhB/B,CAG9BmX,oCC5EFlb,EAAAC,EAAAC,EAAA,sBAAA0b,IAAA5b,EAAAC,EAAAC,EAAA,sBAAA2b,IAAA7b,EAAAC,EAAAC,EAAA,sBAAA4b,IAAA,IAAAC,EAAA/b,EAAA,IAEa4b,EAAU7X,OAAAgY,EAAA,EAAAhY,GACV8X,EAAc,SACzBG,EACAja,EACAb,QAAA,IAAAA,MAAA,MAEA,IAAM+a,EACJla,GAAYA,GAAYgC,OAAOmY,KAAKna,GAAU2J,OAC1C,aAAe1J,KAAKma,UAAUpa,GAC9B,GACN,OAAO6Z,EAAQQ,KAAK,CAClBJ,SAAQA,EACRna,OAAQoa,EACR/a,MAAKA,KAII4a,EAAc,WACzB,IAAMO,EAAOT,EAAQha,SAASoa,SAC9B,OAAOK,EAAKC,SAAS,KAAOD,EAAK3P,MAAM,EAAG2P,EAAK3Q,OAAS,IAAM,IAAM2Q,qOCDtEE,EAAA,SAAA5Z,GAAA,SAAA4Z,mDAaA,OAb4B3Z,EAAA,EAAA2Z,EAAA5Z,GAC1B4Z,EAAA1Z,UAAAkW,kBAAA,WACMpV,eAAe6Y,QAAQ,QACzBxZ,KAAKO,MAAMC,QAAQiZ,QAAQ,KAG/BF,EAAA1Z,UAAAsB,OAAA,WACE,OACEuY,EAAA,cAACC,EAAA,EAAe,KACdD,EAAA,qBAAKpY,MAAO,CAAE4U,SAAU,OAAQ7D,KAAM,IAAMqH,EAAA,cAACE,EAAI,SAIzDL,EAbA,CAA4BG,EAAA,WAefG,EAAO9Y,OAAA+Y,EAAA,EAAA/Y,CAClB,WAAM,UACN,SAAA+B,GAAY,OAAGtC,QAASO,OAAAgZ,EAAA,mBAAAhZ,CAAmBiZ,EAAA,EAAgBlX,KAFzC/B,CAGlBwY,GAEIU,EAAc,CAClB/Y,gBAAegZ,EAAA,EACfnU,iBAAgBoU,EAAA,EAChBxB,iBAAgByB,EAAA,EAChB1X,UAAS2X,EAAA,GAGLC,EAAW,WACf,OACEZ,EAAA,cAACpX,EAAA,EAAI,KACFvB,OAAOmY,KAAKe,GAAa7a,IAAI,SAAC6N,EAAGhG,GAChC,OACEyS,EAAA,cAACnT,EAAA,EAAQ,CAACa,IAAKH,EAAOc,QAAM,EAACtF,QAAS,WAAM,OAAA1B,OAAAwZ,EAAA,EAAAxZ,CAAYkM,KACtDyM,EAAA,cAACc,EAAA,EAAY,CAACC,QAASxN,SAQnC2M,EAAA,SAAAja,GAAA,SAAAia,mDAoBA,OApBmBha,EAAA,EAAAga,EAAAja,GACjBia,EAAA/Z,UAAAsB,OAAA,WACE,GAAIJ,OAAAwZ,EAAA,EAAAxZ,KAAkB2Z,EAAA,EAAYb,KAChC,OAAOH,EAAA,cAACY,EAAQ,MAElB,GAAIvZ,OAAAwZ,EAAA,EAAAxZ,KAAkB2Z,EAAA,EAAYxZ,gBAChC,OAAOwY,EAAA,cAACQ,EAAA,EAAe,MAEzB,GAAInZ,OAAAwZ,EAAA,EAAAxZ,KAAkB2Z,EAAA,EAAY3U,iBAChC,OAAO2T,EAAA,cAACS,EAAA,EAAgB,MAE1B,GAAIpZ,OAAAwZ,EAAA,EAAAxZ,KAAkB2Z,EAAA,EAAY/B,iBAChC,OAAOe,EAAA,cAACU,EAAA,EAAgB,MAE1B,GAAIrZ,OAAAwZ,EAAA,EAAAxZ,KAAkB2Z,EAAA,EAAYhY,UAChC,OAAOgX,EAAA,cAACW,EAAA,EAAS,MAGnB,MAAM,IAAIM,MAAM,kBAAkB5Z,OAAAwZ,EAAA,EAAAxZ,KAEtC6Y,EApBA,CAAmBF,EAAA,WAqBNkB,EAAM7Z,OAAA8Z,EAAA,IAAA9Z,CAAI+Z,EAAJ/Z,CAAY,WAAM,OACnC2Y,EAAA,cAACqB,EAAA,EAAM,KACLrB,EAAA,cAACqB,EAAA,EAAK,CAAC1B,KAAK,IAAI5N,UAAWoO,2HC/BlBmB,4BAAgB,SAAAza,GAC3B,IAIM0a,EAAWla,OAAOqF,OAAO,GAJV,CACnB1E,QAAS,OACTG,cAAe,OAEgCtB,EAAMe,OACjD4Z,EAAWna,OAAOqF,OAAO,GAAI7F,EAAO,CAAEe,MAAO2Z,IACnD,OAAOE,EAAA9c,EAAA+c,cAAA,MAAAxb,EAAA,KAASsb,uCC3DlBle,EAAAC,EAAAC,EAAA,sBAAAme,IAAA,IA6CYA,EA7CZC,EAAAte,EAAA,IAAAA,EAAAC,EAAAC,EAAA,sBAAAoe,EAAA,IA6CA,SAAYD,GACVA,EAAA,SACAA,EAAA,uBACAA,EAAA,mCACAA,EAAA,qCACAA,EAAA,qCACAA,EAAA,yCANF,CAAYA,MAAW,8JC7BvBhM,EAAA,SAAA1P,GACE,SAAA0P,EAAY9O,GAAZ,IAAAa,EACEzB,EAAA0F,KAAArF,KAAMO,IAAMP,YAMdoB,EAAAma,iBAAmB,WACjB,IAAMpb,EAAQqb,EAAAnd,EAAEC,IAAI8C,EAAKb,MAAM+N,SAAUlN,EAAKb,MAAMgP,yBAA0B,MAE9E,IAAKpP,EAAO,OAAO,KACnB,IAAMsb,EAASra,EAAKb,MAAM+O,QAAQ5H,KAAK,SAAA5C,GAAK,OAAAA,EAAE3E,QAAUA,IACxD,IAAKsb,EACH,MAAM,IAAId,MAASxa,EAAK,eAG1B,OAAOsb,GAGTra,EAAAsa,WAAa,SAAAtZ,GACXhB,EAAKnB,SAAS,CAAEyb,YAAY,KAE9Bta,EAAAua,YAAc,WACZva,EAAKnB,SAAS,CAAEyb,YAAY,KAE9Bta,EAAAwa,eAAiB,SAACC,SAEdC,EADW1a,EACXb,OACFyB,EADI8Z,EAAA9Z,UAAU8Z,EAAAxN,WACGhL,EAAA,IADOwY,EAAAvM,0BAEMsM,EAAe1b,UAE7CiB,EAAKua,eA7BLva,EAAKlD,MAAQ,CACXwd,YAAY,KAwDlB,OA5DuC9b,EAAA,EAAAyP,EAAA1P,GAmCrC0P,EAAAxP,UAAAsB,OAAA,WACU,IAAAmO,EAAAtP,KAAAO,MAAA+O,QACFyM,EAAgB/b,KAAKub,mBAC3B,OACElV,EAAA,yBACEA,EAAA,cAAC/D,EAAA,EAAM,CAACG,QAASzC,KAAK0b,WAAYnZ,QAAQ,WAAWC,MAAM,WACxDuZ,EACC1V,EAAA,cAACE,EAAA,EAAI,CAACjF,MAAO,CAAE0a,YAAa,QAAUD,EAAcpI,aAClD,KACHoI,EAAgBA,EAAcha,MAAQ,qBAEzCsE,EAAA,cAACmU,EAAA,EAAM,CAAC3J,KAAM7Q,KAAK9B,MAAMwd,WAAYrF,WAAS,EAACvF,QAAS9Q,KAAK2b,aAC3DtV,EAAA,cAAC4V,EAAA,EAAW,0BACZ5V,EAAA,cAAC6V,EAAA,EAAa,KACZ7V,EAAA,cAAC8V,EAAA,EAAY,CACXP,eAAgB5b,KAAK4b,eACrBlR,aAAcqR,EAAgBA,EAAc5b,WAAQic,EACpDC,YAAY,oBACZC,QAAShN,QAOvBD,EA5DA,CAAuChJ,EAAA,qLCL1BkW,EAAc/a,OAAO5C,SAAS4d,SAAQ,KAAKhb,OAAO5C,SAAS6d,SAAQ,KAC9Ejb,OAAO5C,SAAS8d,KAAO,OAAS,IAAE,OAwBpC,SAASC,EAAepR,EAAQqR,GAC9B,IAAMC,EAAcD,EAAU9b,aAC9B,GAAuB,cAAnB8b,EAAUE,KACZ,OAAOC,EAAA,SAAWH,EAAUI,YAAaH,EAAatR,GACjD,GAAuB,iBAAnBqR,EAAUE,KAAyB,CAC5C,IAAMG,EAASlc,OAAAgG,EAAA,EAAAhG,CAAYwK,EAAOqR,EAAUI,aAAcH,EAAa,UACvE,OAAOE,EAAA,SAAWH,EAAUI,YAAaC,EAAQ1R,GAC5C,GAAuB,kBAAnBqR,EAAUE,KAA0B,CACvCG,EAASlc,OAAAgG,EAAA,EAAAhG,CAAYwK,EAAOqR,EAAUI,aAAcH,EAAa,WACvE,OAAOE,EAAA,SAAWH,EAAUI,YAAaC,EAAQ1R,GAC5C,GAAuB,WAAnBqR,EAAUE,KACnB,OAAOC,EAAA,SACLH,EAAUI,YACVD,EAAA,OAAS,SAAAxS,GACP,OAAOA,EAAKjL,KAAOud,EAAYvd,KAEjCiM,GAGF,KAAM,CAAEqR,UAASA,GAGrB,IAcaM,EAAkBnc,OAAAoc,EAAA,EAAApc,CApEK,wBAsElC,SAAC7C,EAAOkf,GACN,IAAIC,EAAMtc,OAAOqF,OAAO,GAAIlI,GACtB2C,EAAauc,EAAO1c,SAASG,WAEnC,OADAwc,EAAMC,EAAA,OAASzc,EAAY8b,EAAgBU,IAnBpB,CACzBE,UAAW,GACXC,SAAU,GACVC,YAAa,GACbjM,WAAY,GACZ2F,SAAU,GACV/Y,WAAY,GACZsf,kBAAkB,EAClBze,aAAc,KACdC,iBAAkB,GAClBT,qBAAsB,KACtBoE,eAAgB,KAChBsV,aAAc,eCnEHwF,EAA4B,SAAAC,GAAS,gBAAAC,GAAQ,gBAAAT,GDYnD,IAAiBU,EAChBC,EACAC,ECSN,OAtBIZ,GAAUA,EAAOa,cDWCH,ECVZ,CACNI,SAAUd,EAAOlb,KACjBic,SAAUf,EAAOgB,YACjBxb,UAAWjC,eAAe6Y,QAAQ,QAAU,IDQ1CuE,EAASxB,EAAQ,IAAIuB,EAAQI,SAAQ,IACrCF,EAAMF,EAAQlb,UAAYkb,EAAQlb,UAAYjC,eAAe6Y,QAAQ,OAEpE6E,MAAMN,EAAK,CAChBO,OAAQ,OACRC,KAAMvf,KAAKma,UAAU2E,EAAQK,UAE7BK,QAAS,CACPC,eAAgB,mBAChBC,mBAAoB,iBACpBC,cAAeX,EAAM,OAAOA,EAAQ,OCjBnChY,KAAK,SAAAtF,GACFA,EAASke,GACXle,EAASme,OAAO7Y,KAAK,SAAA6O,GACfuI,EAAO0B,SACT1B,EAAO0B,QAAQjK,GAEjB+I,EAAM9a,SAAS,CACbZ,KDZwB,wBCaxBxB,SAAUmU,MAGe,MAApBnU,EAASqe,SAClBpe,eAAeyW,WAAW,OAC1BrW,OAAAie,EAAA,EAAAje,CAAYkL,EAAA,EAAYvJ,cAIvBmb,EAAKT,MChBD6B,GAeG,EAfHA,GAgBS,EAItB,SAASC,EAAcC,EAAcC,GACnC,OAAO,SAAiBlhB,EAAsBkf,GAC5C,YADsB,IAAAlf,MAAAihB,GAClBC,EAASC,eAAejC,EAAOlb,MAC1Bkd,EAAShC,EAAOlb,MAAMhE,EAAOkf,GAE7Blf,GAKb,IClC+BihB,EACzBG,EDiCAC,EAASL,EAbL,GAawC,CAChDM,UAAW,SAAAD,GAAU,OAAIA,EAAO7V,MAAM,GAAEA,SACxC+V,UAAW,SAACF,EAAQnC,GAAW,OAAImC,EAAMG,OAAA,CAAEtC,EAAO7G,WAG9CoJ,EAAeT,EAAcD,EAA2B,CAC5DW,gBAAiB,SAAC1hB,EAAOkf,GAAW,OAAAA,EAAO/Y,WAGvC2E,EAAqBkW,EAAcD,EAAiC,CACxEY,uBAAwB,SAAC3hB,EAAOkf,GAAW,OAAClf,KAW/B4hB,EARE/e,OAAAsI,EAAA,gBAAAtI,CAAgB,CAC/B4e,aAAYA,EACZ3W,mBAAkBA,EAElB7K,YAAa+e,EACbqC,OAAMA,IElDFQ,GDDAT,EAAave,OAAAsI,EAAA,gBAAAtI,CAAgBif,EAAA,EAAOrC,EAAehJ,OAIzC5T,OAAAsI,EAAA,YAAAtI,CAAY+e,EAAUX,EAAcG,ICDpDW,EAAA,OACEnZ,EAAA,cAACqC,EAAA,EAAQ,CAACyU,MAAOmC,GACfjZ,EAAA,cAACoZ,EAAA,EAAM,CAACtH,QAASoG,EAAA,GACflY,EAAA,cAAC+S,EAAA,EAAG,QAGRsG,SAASC,eAAe,0CCuN1B,IAAYC,EAML,SAAS5f,EAAS2d,EAAsCU,EAAUwB,GACvE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,WAAYkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,GAKrE,SAASC,EAAgBnC,EAAqCU,EAAUwB,GAC7E,MAAO,CAAErC,aAAa,EAAM/b,KAAM,kBAAmBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,GAoB5E,SAASE,EAAapC,EAA8BU,EAAUwB,GACnE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,eAAgBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,GAlChFtjB,EAAAC,EAAAC,EAAA,sBAAAmjB,IAAArjB,EAAAC,EAAAC,EAAA,sBAAAuD,IAAAzD,EAAAC,EAAAC,EAAA,sBAAAqjB,IAAAvjB,EAAAC,EAAAC,EAAA,sBAAAsjB,IAAAxjB,EAAAC,EAAAC,EAAA,sBAAAujB,IAAA,SAAYJ,GACVA,EAAA,sBACAA,EAAA,8BACAA,EAAA,YACAA,EAAA,gBAJF,CAAYA,MAAe,KAkEpB,IAAMI,EAA4B,CACvChgB,SAAQA,EACRgZ,QA3DK,SAAiB2E,EAA8BU,EAAUwB,GAC9D,MAAO,CAAErC,aAAa,EAAM/b,KAAM,UAAWkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IA2DzEC,gBAAeA,EACf1R,kBAvDK,SAA2BuP,EAAuCU,EAAUwB,GACjF,MAAO,CAAErC,aAAa,EAAM/b,KAAM,oBAAqBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAuDnFva,iBArDK,SAA0BqY,EAAsCU,EAAUwB,GAC/E,MAAO,CAAErC,aAAa,EAAM/b,KAAM,mBAAoBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAqDlF9M,kBAnDK,SAA2B4K,EAAuCU,EAAUwB,GACjF,MAAO,CAAErC,aAAa,EAAM/b,KAAM,oBAAqBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAmDnF7L,kBAjDK,SAA2B2J,EAAyCU,EAAUwB,GACnF,MAAO,CAAErC,aAAa,EAAM/b,KAAM,oBAAqBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAiDnF/K,kBA/CK,SAA2B6I,EAA2BU,EAAUwB,GACrE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,oBAAqBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IA+CnF9P,cA7CK,SAAuB4N,EAAmCU,EAAUwB,GACzE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,gBAAiBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IA6C/EE,aAAYA,EACZnU,gBAzCK,SAAyB+R,EAAqCU,EAAUwB,GAC7E,MAAO,CAAErC,aAAa,EAAM/b,KAAM,kBAAmBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAyCjFpQ,eAvCK,SAAwBkO,EAA8BU,EAAUwB,GACrE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,iBAAkBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAuChF9H,eArCK,SAAwB4F,EAAoCU,EAAUwB,GAC3E,MAAO,CAAErC,aAAa,EAAM/b,KAAM,iBAAkBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAqChFtK,aAnCK,SAAsBoI,EAA8BU,EAAUwB,GACnE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,eAAgBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAmC9EI,iBAjCK,SAA0BtC,EAA2BU,EAAUwB,GACpE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,mBAAoBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAiClFK,eA/BK,SAAwBvC,EAA2BU,EAAUwB,GAClE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,iBAAkBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IA+BhFM,iBA7BK,SAA0BxC,EAA2BU,EAAUwB,GACpE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,mBAAoBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IA6BlFO,gBA3BK,SAAyBzC,EAA8BU,EAAUwB,GACtE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,kBAAmBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IA2BjFQ,eAzBK,SAAwB1C,EAAyBU,EAAUwB,GAChE,MAAO,CAAErC,aAAa,EAAM/b,KAAM,iBAAkBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA,IAyBhFpW,gBAvBK,SAAyBkU,EAAqCU,EAAUwB,GAC7E,MAAO,CAAErC,aAAa,EAAM/b,KAAM,kBAAmBkc,YAAWA,EAAEU,QAAOA,EAAEwB,OAAMA","file":"app.js","sourcesContent":["import { history } from '@src/history'\nimport { Category, Transaction } from '@src/types'\nimport { State } from '@src/types'\nimport _ from 'lodash'\nimport querystring from 'querystring'\n\nexport function getIconChoices(state: State) {\n  return state.dragonState.IconChoice\n}\nexport function getEntities(state: State): Array<Category> {\n  return _.get(state, 'dragonState.EntityMeta', [])\n}\nexport function getCategories(state: State): Array<Category> {\n  return _.get(state, 'dragonState.Category')\n}\n\nexport function getSelectableCategories(state: State): Array<Category> {\n  return _.filter(getCategories(state), { is_selectable: true })\n}\n\nexport function getSnack(state: State) {\n  if (!state.snacks.length) {\n    return ''\n  }\n  return state.snacks[0]\n}\n\nexport function getActivities(state: State) {\n  return _.get(state, 'dragonState.Activity') || []\n}\n\nexport function getSuggestions(state: State) {\n  return _.get(state, 'dragonState.Suggestion') || []\n}\n\nexport function getBalance(state: State) {\n  return state.dragonState.current_user_balance\n}\n\nexport function getVisibleTransactions(state): Array<Transaction> {\n  return _.get(state, 'dragonState.Transaction') || []\n}\n\nexport function parseUrlState() {\n  const params = parseSearch()\n  if (params && params.urlState) {\n    return JSON.parse(params.urlState as string)\n  }\n  return {}\n}\nexport function parseSearch() {\n  return querystring.parse(history.location.search.split('?')[1])\n}\n\nexport function getUsers(state: State) {\n  if (state.dragonState.current_user && state.dragonState.network_accounts) {\n    const user = state.dragonState.current_user\n    return state.dragonState.network_accounts.map(a => {\n      const isMe = a.id == user.id\n      return {\n        id: a.id,\n        name: a.username,\n        description: a.username + (isMe ? ' (Me)' : ''),\n      }\n    })\n  }\n  return []\n}\n","import { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport { ACTIONS as actionCreators } from '@src/actions'\nimport { pushHistory } from '@src/history'\nimport { ActionType, State, UrlPathEnum } from '@src/types'\n\ninterface StoreProps {\n  authToken: string | null\n}\ninterface DispatchProps {\n  actions: ActionType\n}\n\nclass LoginPageComponent extends React.Component<StoreProps & DispatchProps, any> {\n  onUsernameChange(event) {\n    this.setState({ username: event.target.value })\n  }\n  onPasswordChange(event) {\n    this.setState({ password: event.target.value })\n  }\n  submitLogin() {\n    const actions = this.props.actions\n    // actions.login(this.state.username, this.state.password)\n    actions.LoginApp(\n      {\n        username: this.state.username,\n        password: this.state.password,\n      },\n      response => {\n        sessionStorage.setItem('jwt', response.operations[0].target_value)\n        pushHistory(UrlPathEnum.TransactionList)\n      },\n    )\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          height: `${window.innerHeight}px`,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        <TextField label=\"Username\" onChange={this.onUsernameChange.bind(this)} />\n        <br />\n        <TextField\n          onChange={this.onPasswordChange.bind(this)}\n          type=\"password\"\n          label=\"Password\"\n          onKeyPress={e => {\n            if (e.charCode == 13) {\n              this.submitLogin()\n            }\n          }}\n        />\n        <br />\n        <Button variant=\"contained\" color=\"primary\" onClick={() => this.submitLogin()}>\n          Login\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: State) => {\n  return { authToken: state.dragonState.jwt_auth_token }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const LoginPage = connect<StoreProps, DispatchProps, {}>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(LoginPageComponent)\n","import { MenuItem, Select } from '@material-ui/core'\nimport { ACTIONS as actionCreators } from '@src/actions'\nimport { parseUrlState } from '@src/selectors'\nimport { ActionType } from '@src/types'\nimport HighchartsData from 'highcharts-data'\nimport HighchartsDrilldown from 'highcharts-drilldown'\nimport * as React from 'react'\nimport Highchart from 'react-highcharts'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport u from 'updeep'\n\nHighchartsData(Highchart.Highcharts)\nHighchartsDrilldown(Highchart.Highcharts)\n\nconst getChartConfig = ({ onClickColumn }) => {\n  return {\n    chart: {\n      type: 'column',\n      //height: 800,\n      //width: 800\n    },\n    title: {\n      text: 'Income/Expense Report',\n    },\n    xAxis: {\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Spend',\n        align: 'high',\n      },\n      labels: {\n        overflow: 'justify',\n      },\n    },\n    tooltip: {\n      valueSuffix: ' dollars',\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true,\n        },\n      },\n      column: {\n        dataLabels: {\n          enabled: true,\n        },\n        allowPointSelect: false,\n        events: {\n          click: onClickColumn,\n        },\n      },\n    },\n    legend: {\n      enabled: true,\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      shadow: true,\n    },\n    credits: {\n      enabled: false,\n    },\n  }\n}\ninterface Prop {\n  actions: ActionType\n  initialReportType: string\n}\n\ninterface State {\n  config: any\n  reportTitle: string\n  chart: any\n  report_type: string\n}\n\nclass TransactionChartComponent extends React.Component<Prop, State> {\n  constructor(props) {\n    super(props)\n    const config = getChartConfig({\n      onClickColumn: this.onClickColumn.bind(this),\n    })\n    this.state = {\n      config,\n      chart: null,\n      reportTitle: '',\n      report_type: props.initialReportType,\n    }\n  }\n\n  onClickColumn(e) {\n    if (this.state.report_type === 'INCOME_EXPENSE') {\n      return console.log(e)\n    }\n  }\n\n  getReportTitle(value) {\n    return value == 'INCOME_EXPENSE' ? 'Income/Expense Report' : 'Expense Report'\n  }\n\n  onChangeReportType = e => {\n    this.draw(e.target.value)\n  }\n\n  draw(report_type: string) {\n    this.props.actions.TransactionChart({ report_type }).then(res => {\n      const titled = u(\n        {\n          title: {\n            text: this.getReportTitle(report_type),\n          },\n        },\n        this.state.config,\n      )\n      const config = Object.assign({}, titled, res)\n      this.setState({ chart: <Highchart config={config} /> })\n      this.setState({ report_type, config })\n    })\n  }\n\n  componentWillMount() {\n    this.draw(this.state.report_type)\n  }\n\n  render() {\n    if (!this.state.config) {\n      return <p>Loading ...</p>\n    }\n    return (\n      <div>\n        <Select value={this.state.report_type} onChange={this.onChangeReportType}>\n          <MenuItem value={'INCOME_EXPENSE'}>Income/Expense</MenuItem>\n          <MenuItem value={'EXPENSE'}>Expense</MenuItem>\n        </Select>\n        <p>{this.state.reportTitle}</p>\n        {this.state.chart}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    initialReportType: parseUrlState().report_type || 'INCOME_EXPENSE',\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const TransactionChart = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TransactionChartComponent)\n","import {\n  Icon,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  MenuItem,\n  Typography,\n} from '@material-ui/core'\nimport { ErrorOutline } from '@material-ui/icons'\nimport { getActivities, parseUrlState } from '@src/selectors'\nimport {\n  ActionType,\n  Activity,\n  Interaction,\n  State as AppState,\n  TransactionFilterCriteria,\n} from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { IconMenu } from 'rice-instructor'\n\nimport { ACTIONS as actionCreators } from '../actions'\n\ninterface PropsFromStore {\n  events: Array<Activity>\n  showActivityStream: boolean\n  urlState: TransactionFilterCriteria\n}\n\ninterface Prop extends PropsFromStore {\n  actions: ActionType\n}\n\ninterface State {}\n\nconst InteractionMenu = (props: { interactions: Array<Interaction>; actions: ActionType }) => {\n  const { interactions } = props\n  return (\n    <div>\n      <IconMenu>\n        {interactions.map((interaction, index) => {\n          return (\n            <MenuItem\n              disabled={!interaction.enabled}\n              key={index}\n              onClick={event => {\n                props.actions[interaction.endpoint_name](interaction.endpoint_args)\n              }}\n            >\n              {interaction.label}\n            </MenuItem>\n          )\n        })}\n      </IconMenu>\n    </div>\n  )\n}\n\nconst ActivityRow = (props: { activity: Activity; actions: ActionType; disabled: boolean }) => {\n  const { activity, disabled } = props\n  const filterInteraction = activity.interactions.find(i => i.label.toUpperCase() === 'FILTER')\n  const onFilter = event => {\n    if (filterInteraction) {\n      props.actions[filterInteraction.endpoint_name](filterInteraction.endpoint_args)\n    }\n  }\n  const interactions = activity.interactions.filter(i => i.label.toUpperCase() !== 'FILTER')\n  return (\n    <ListItem dense={true} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon style={{ color: activity.needs_attention ? 'red' : 'green' }}>\n        {activity.needs_attention ? (\n          <ErrorOutline />\n        ) : (\n          <Icon className=\"material-icons\">check_circle_outline</Icon>\n        )}\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${activity.date} ${activity.label}`}</Typography>\n        {activity.subtitles.map((sub, index) => (\n          <Typography key={index} color=\"textSecondary\">\n            {sub}\n          </Typography>\n        ))}\n      </ListItemText>\n      {interactions.length ? (\n        <ListItemSecondaryAction>\n          <InteractionMenu interactions={interactions} actions={props.actions} />\n        </ListItemSecondaryAction>\n      ) : null}\n    </ListItem>\n  )\n}\n\nclass ActivityStreamContainer extends React.Component<Prop, State> {\n  render() {\n    return (\n      <div>\n        <List>\n          {this.props.showActivityStream\n            ? this.props.events.map(e => {\n                return (\n                  <ActivityRow\n                    actions={this.props.actions}\n                    activity={e}\n                    key={e.id}\n                    disabled={this.props.urlState.event_id === e.id}\n                  />\n                )\n              })\n            : null}\n        </List>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    events: getActivities(state),\n    showActivityStream: state.showActivityStream,\n    urlState: parseUrlState(),\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const ActivityStream = connect<PropsFromStore, { actions: ActionType }>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ActivityStreamContainer)\n","import { Button, Grid, TextField } from '@material-ui/core'\nimport { ActionType, State as AppState } from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { ACTIONS as actionCreators } from '../actions'\n\ninterface DispatchProps {\n  actions: ActionType\n}\n\ntype FinalProps = DispatchProps\nconst today = new Date().toISOString().slice(0, 10)\n\nexport class NewPlaidFormComponent extends React.Component<\n  FinalProps,\n  { start_date: string; end_date: string }\n> {\n  state = { start_date: today, end_date: today }\n\n  importFromPlaid = () => {\n    this.props.actions.ImportFromPlaid({\n      start_date: this.state.start_date,\n      end_date: this.state.end_date,\n    })\n  }\n\n  setStartDate = e => {\n    this.setState({ start_date: e.target.value })\n  }\n  setEndDate = e => {\n    this.setState({ end_date: e.target.value })\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item xs={4}>\n          <TextField\n            type=\"date\"\n            label=\"from\"\n            value={this.state.start_date}\n            onChange={this.setStartDate}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <TextField type=\"date\" label=\"to\" defaultValue={today} onChange={this.setEndDate} />\n        </Grid>\n        <Grid item xs={4}>\n          <Button\n            onClick={this.importFromPlaid}\n            style={{ marginTop: '10px' }}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Import\n          </Button>\n        </Grid>\n      </Grid>\n    )\n  }\n}\nconst mapStateToProps = (state: AppState) => {\n  return {}\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const NewPlaidForm = connect<{}, { actions: ActionType }>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NewPlaidFormComponent)\n","import { Button } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface Prop {\n  submitFileContent: (content: string | ArrayBuffer | null) => void\n  button?: React.ReactElement<any>\n}\nexport class FileUploadButton extends React.Component<Prop, any> {\n  fileInput: any\n\n  onFileInputChange = event => {\n    const file = event.target.files[0]\n    var reader = new FileReader()\n\n    const callback = () => this.props.submitFileContent(reader.result)\n    reader.addEventListener('load', callback, false)\n    if (file) {\n      reader.readAsText(file)\n    }\n  }\n\n  render() {\n    const button = this.props.button || (\n      <Button variant=\"outlined\" component=\"span\">\n        Upload\n      </Button>\n    )\n    return (\n      <div>\n        <input\n          id=\"file-upload-form\"\n          hidden\n          ref={ref => (this.fileInput = ref)}\n          onChange={this.onFileInputChange}\n          type=\"file\"\n        />\n        <label htmlFor=\"file-upload-form\">{button}</label>\n      </div>\n    )\n  }\n}\n","import { Select } from '@material-ui/core'\nimport {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  MenuItem,\n} from '@material-ui/core'\nimport { ActionType, State as AppState, StatementSource } from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { ACTIONS as actionCreators } from '../actions'\nimport { FileUploadButton } from '../components/FileUploadButton'\n\ninterface PropsFromStore {}\n\ninterface Prop extends PropsFromStore {\n  actions: ActionType\n}\n\ninterface State {\n  selectedSource: StatementSource\n}\n\nexport class StatementFormContainer extends React.Component<Prop, State> {\n  state = {\n    selectedSource: StatementSource.CHEQUE,\n  }\n\n  onSelectType = event => {\n    this.setState({ selectedSource: event.target.value })\n  }\n\n  submitFileContent = (content: string) => {\n    console.log(content)\n    if (this.state.selectedSource.length && content) {\n      return this.props.actions.StatementUpload(\n        {\n          source: this.state.selectedSource,\n          content: content,\n        },\n        res => {\n          window.location.reload()\n        },\n        res => this.props.actions.addSnack(res.errors || 'Cannot upload'),\n      )\n    }\n  }\n\n  render() {\n    const choices = ['CHEQUE', 'PC_MASTER', 'SCOTIA_MASTER', 'VISA']\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <Select value={this.state.selectedSource} onChange={this.onSelectType}>\n                  {choices.map(c => {\n                    return (\n                      <MenuItem key={c} value={c}>\n                        {c}\n                      </MenuItem>\n                    )\n                  })}\n                </Select>\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FileUploadButton submitFileContent={this.submitFileContent} />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.props.actions.hideNewCard()\n              }}\n            >\n              Cancel\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {}\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const NewStatementForm = connect<PropsFromStore, { actions: ActionType }>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(StatementFormContainer)\n","export function stringToDate(dateString: string): Date {\n  const [year, month, day] = dateString.split('-').map(v => parseInt(v))\n  const ret = new Date(year, month - 1, day)\n  return ret\n}\nexport function formatDate(d: string): string {\n  const date = new Date(d)\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC',\n  })\n}\n\nexport function getToday(): string {\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth() < 9 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n  const day = today.getDate() < 10 ? '0' + today.getDate() : today.getDate()\n  return `${year}-${month}-${day}`\n}\n","import {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  TextField,\n} from '@material-ui/core'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { Account, ActionType, Category, TransactionCreateRequest } from '@src/types'\nimport { getToday } from '@src/utils'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getBalance, getSelectableCategories, getUsers } from '../selectors'\n\nimport { ACTIONS as actionCreators } from '../actions'\n\ninterface PropsFromStore {\n  currentUser: Account\n  selectableCategories: Array<Category>\n}\n\ninterface Prop extends PropsFromStore {\n  actions: ActionType\n}\n\ninterface State {\n  transaction: TransactionCreateRequest\n}\n\ntype FieldName =\n  | 'issued_date'\n  | 'merchant'\n  | 'notes'\n  | 'category_id'\n  | 'total_amount'\n  | 'loan_amount'\n\nconst fieldConfig = {\n  issued_date: { type: 'date', required: true },\n  merchant: { type: 'text', required: true },\n  notes: { type: 'text', required: false },\n  category_id: { type: 'number', required: false },\n  loan_amount: { type: 'number', required: false },\n  total_amount: { type: 'number', required: true },\n}\n\nconst FieldInput = (props: {\n  fieldName: FieldName\n  updateField: (fieldName) => (event) => void\n  instance: TransactionCreateRequest\n}) => {\n  const { fieldName, updateField, instance } = props\n  const config = fieldConfig[fieldName]\n  let error = false\n  if (config.required && !instance[fieldName]) {\n    error = true\n  } else if (config.required && config.type === 'number' && !+instance[fieldName]) {\n    error = true\n  }\n\n  return (\n    <TextField\n      type={config.type}\n      required={config.required}\n      error={error}\n      label={fieldName}\n      value={instance[fieldName]}\n      onChange={updateField(fieldName)}\n    />\n  )\n}\nfunction getInitialState() {\n  return {\n    transaction: {\n      issued_date: getToday(),\n      merchant: '',\n      notes: '',\n      category_id: 47,\n      total_amount: '0',\n      loan_amount: '0',\n    },\n  }\n}\n\nclass NewTransactionFormContainer extends React.Component<Prop, State> {\n  state = getInitialState()\n\n  createTransaction = () => {\n    this.props.actions\n      .TransactionCreate(this.state.transaction)\n      .then(res => this.props.actions.hideNewCard())\n  }\n  updateField = (fieldName: FieldName) => {\n    const old = this.state.transaction\n    return event => {\n      const newState = Object.assign({}, old, {\n        [fieldName]: event.target.value,\n      })\n      this.setState({ transaction: newState })\n    }\n  }\n  isValid() {\n    const t = this.state.transaction\n    return [t.issued_date, t.merchant, +t.total_amount].every(Boolean)\n  }\n  render() {\n    const { selectableCategories } = this.props\n    const transaction = this.state.transaction\n    return (\n      <div style={{ paddingTop: '10px' }}>\n        <ExpansionPanel expanded={true}>\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  instance={transaction}\n                  fieldName=\"issued_date\"\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"merchant\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"total_amount\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <SingleSelectField\n                  instance={transaction}\n                  choices={selectableCategories}\n                  instancePropNameToUpdate=\"category_id\"\n                  onChange={(instance, changes) => {\n                    const newState = Object.assign({}, this.state.transaction, changes)\n                    this.setState({ transaction: newState })\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"notes\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <FieldInput\n                  fieldName=\"loan_amount\"\n                  instance={transaction}\n                  updateField={this.updateField}\n                />\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <Divider />\n          <ExpansionPanelActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                this.setState(getInitialState())\n                this.props.actions.hideNewCard()\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              size=\"small\"\n              color=\"primary\"\n              onClick={this.createTransaction}\n              disabled={!this.isValid()}\n            >\n              Save\n            </Button>\n          </ExpansionPanelActions>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    accounts: getUsers(state),\n    currentUser: state.dragonState.current_user,\n    balance: getBalance(state),\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const NewTransactionForm = connect<PropsFromStore, { actions: ActionType }>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(NewTransactionFormContainer)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport { InputAdornment, Menu, MenuItem, TextField } from '@material-ui/core'\nimport { Search } from '@material-ui/icons'\nimport { ACTIONS as actionCreators } from '@src/actions.ts'\nimport { ActionType, State, Suggestion } from '@src/types'\n// import { DebouncedTextField } from 'rice-instructor'\n\ninterface PropsFromStore {\n  suggestions: Array<Suggestion>\n}\ninterface OwnProps extends PropsFromStore {\n  actions: ActionType\n}\n\nclass SearchBarComponent extends React.Component<OwnProps, { anchorEl: JSX.Element | null }> {\n  state = { anchorEl: null }\n  onFocus = event => {\n    this.setState({ anchorEl: event.currentTarget })\n    this.props.actions.SuggestionLoad({})\n  }\n  handleClose = event => {\n    this.setState({ anchorEl: null })\n  }\n  render() {\n    const icon = (\n      <InputAdornment position=\"start\">\n        <Search />\n      </InputAdornment>\n    )\n    // onFocus={this.onFocus}\n    /*\n          style={{\n            border: '1px solid #ced4da',\n            backgroundColor: 'white',\n            borderRadius: 4,\n            padding: '5px 12px',\n          }}\n           */\n    return (\n      <div>\n        <TextField\n          onChange={event =>\n            this.props.actions.ExecuteSearch({\n              urlState: { full_text: event.target.value },\n            })\n          }\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">{icon}</InputAdornment>,\n          }}\n        />\n        <Menu\n          open={!!this.state.anchorEl}\n          anchorEl={this.state.anchorEl}\n          onClose={this.handleClose}\n          getContentAnchorEl={null}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n        >\n          {this.props.suggestions.map((sug, index) => (\n            <MenuItem\n              key={index}\n              onClick={() => {\n                this.props.actions.ExecuteSearch({\n                  urlState: sug.urlState,\n                })\n              }}\n            >\n              {sug.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: State, ownProps): PropsFromStore => {\n  return { suggestions: state.dragonState.Suggestion }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const SearchBar = connect<PropsFromStore, { actions: ActionType }>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchBarComponent)\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Add, AttachMoney, CreditCard, GridOn, History } from '@material-ui/icons'\nimport { ACTIONS as actionCreators } from '@src/actions'\nimport { SearchBar } from '@src/Root/SearchBar'\nimport { ActionType, State as AppState } from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { IconMenu } from 'rice-instructor'\nimport { getBalance, getSuggestions } from '../selectors'\n\ninterface OwnProps {\n  showForm: (formType: string) => void\n}\n\ninterface StateProps {\n  suggestions: Array<any>\n  balance: string | null\n}\ninterface DispatchProps {\n  actions: ActionType\n}\n\ntype FinalProps = OwnProps & StateProps & DispatchProps\n\nclass TransactionListAppBarComponent extends React.Component<FinalProps> {\n  showNewTransactionForm = () => {\n    this.props.showForm('transaction')\n  }\n\n  showNewStatementForm = () => {\n    this.props.showForm('statement')\n  }\n\n  showPlaidImportForm = () => {\n    this.props.showForm('plaid')\n  }\n\n  toggleActivityStream = () => {\n    this.props.actions.toggleActivityStream()\n  }\n\n  render() {\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Tooltip title=\"Activit Stream\">\n            <IconButton onClick={this.toggleActivityStream}>\n              <History />\n            </IconButton>\n          </Tooltip>\n          {this.props.balance ? (\n            <Typography\n              variant=\"body1\"\n              key=\"balance\"\n            >{`Balance: $${this.props.balance}`}</Typography>\n          ) : null}\n          <div style={{ flex: 1 }} />\n          <SearchBar />\n          <IconMenu icon={<Add />}>\n            <MenuItem key=\"new-transaction-menu\" onClick={this.showNewTransactionForm}>\n              <ListItemIcon>\n                <AttachMoney />\n              </ListItemIcon>\n              <ListItemText>Transaction</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-statement-menu\" onClick={this.showNewStatementForm}>\n              <ListItemIcon>\n                <CreditCard />\n              </ListItemIcon>\n              <ListItemText>Statement</ListItemText>\n            </MenuItem>\n            <MenuItem key=\"new-plaid-menu\" onClick={this.showPlaidImportForm}>\n              <ListItemIcon>\n                <GridOn />\n              </ListItemIcon>\n              <ListItemText>Plaid Import</ListItemText>\n            </MenuItem>\n          </IconMenu>\n          <IconButton onClick={this.props.actions.logout}>\n            <Icon className=\"material-icons\">exit_to_app</Icon>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    )\n  }\n}\nconst mapStateToProps = (state: AppState, ownProps) => {\n  return {\n    suggestions: getSuggestions(state),\n    balance: getBalance(state),\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const TransactionListAppBar = connect<StateProps, { actions: ActionType }>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TransactionListAppBarComponent)\n","import * as React from 'react'\n\nimport { Grid, IconButton } from '@material-ui/core'\nimport { Check, Close } from '@material-ui/icons'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport {\n  ActionType,\n  Category,\n  Prediction,\n  Transaction,\n  TransactionCreateRequest,\n} from '../types/index'\n\ninterface CategoryFieldProp {\n  transaction: Transaction | TransactionCreateRequest\n  actions: ActionType\n  selectableCategories: Array<Category>\n}\n\ninterface SmartCatProp {\n  prediction: Prediction\n  onAccept: () => void\n}\nexport class SmartCatField extends React.Component<SmartCatProp, any> {\n  render() {\n    const { prediction, onAccept } = this.props\n    const split = prediction.split ? 'Split ' : ''\n    return (\n      <div style={{ color: 'rgb(0, 188, 212)', fontWeight: 'bold' }}>\n        {`${split}${prediction.category_name}?`}\n        <Grid container>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => onAccept()}>\n              <Check color=\"primary\" />\n            </IconButton>\n          </Grid>\n          <Grid item xs={12} sm={1}>\n            <IconButton onClick={() => this.setState({ declined: true })}>\n              <Close color=\"secondary\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport class CategoryField extends React.Component<CategoryFieldProp, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      declined: false,\n    }\n  }\n\n  onSelectCategory(transaction, changes) {\n    return this.props.actions.TransactionUpdate({\n      id: transaction.id,\n      category_id: changes.category_id,\n    })\n  }\n\n  render() {\n    const { selectableCategories, transaction } = this.props\n    return (\n      <SingleSelectField\n        instance={transaction}\n        choices={selectableCategories}\n        instancePropNameToUpdate=\"category_id\"\n        onChange={this.onSelectCategory.bind(this)}\n      />\n    )\n  }\n}\n","import {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Fab,\n  Grid,\n  Icon,\n  TextField,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport JSONTree from 'react-json-tree'\n\nimport { CategoryField, SmartCatField } from '@src/components/CategoryField'\nimport { Account, ActionType, Category, Transaction } from '@src/types'\nimport { formatDate } from '@src/utils'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getBalance, getSelectableCategories, getUsers } from '../selectors'\n\nimport { ACTIONS as actionCreators } from '../actions'\n\ninterface PropsFromStore {\n  currentUser: Account\n  selectableCategories: Array<Category>\n}\ninterface Prop extends PropsFromStore {\n  actions: ActionType\n  transaction: Transaction\n  expanded: boolean\n  onToggleExpansion: (event, expanded) => void\n}\n\nexport const CategoryInfoField = (props: {\n  transaction: Transaction\n  category: Category | null\n  onAccept: (transaction) => void\n}) => {\n  const { transaction, category, onAccept } = props\n  if (transaction.prediction) {\n    return (\n      <SmartCatField\n        prediction={transaction.prediction}\n        onAccept={() =>\n          onAccept({\n            id: transaction.id,\n            ...transaction.prediction,\n          })\n        }\n      />\n    )\n  }\n  return (\n    <Grid container spacing={10}>\n      <Grid item xs={1}>\n        <Icon className=\"material-icons\">{category ? category.mui_icon_id : null}</Icon>\n      </Grid>\n      <Grid item xs>\n        {category ? <Typography color=\"textSecondary\">{category.label}</Typography> : null}\n      </Grid>\n    </Grid>\n  )\n}\n\nclass TransactionRowContainer extends React.Component<Prop, any> {\n  getCategory() {\n    const { transaction, selectableCategories } = this.props\n    if (!transaction.category_id) return null\n    return selectableCategories.find(c => c.value === transaction.category_id) || null\n  }\n  shouldComponentUpdate(nextProps) {\n    const result = !(\n      _.isEqual(nextProps.transaction, this.props.transaction) &&\n      nextProps.expanded === this.props.expanded\n    )\n    return result\n  }\n  render() {\n    const { transaction, selectableCategories, actions, expanded, onToggleExpansion } = this.props\n    const category = this.getCategory()\n    return (\n      <div>\n        <ExpansionPanel\n          disabled={!transaction.editable}\n          expanded={expanded}\n          onChange={onToggleExpansion}\n        >\n          <ExpansionPanelSummary>\n            <Grid container spacing={10}>\n              <Grid item xs={3} sm={4}>\n                <Typography>{formatDate(transaction.issued_date)}</Typography>\n                {expanded ? null : (\n                  <CategoryInfoField\n                    transaction={transaction}\n                    category={category}\n                    onAccept={this.props.actions.TransactionAccept.bind(this)}\n                  />\n                )}\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                {transaction.origin_payload ? (\n                  <Tooltip\n                    title={\n                      <JSONTree shouldExpandNode={() => true} data={transaction.origin_payload} />\n                    }\n                  >\n                    <Icon style={{ color: 'blue', float: 'left' }} className=\"material-icons\">\n                      grid_on\n                    </Icon>\n                  </Tooltip>\n                ) : null}\n                <Typography variant=\"body1\">{transaction.merchant}</Typography>\n                <div>\n                  <Typography color=\"textSecondary\">{transaction.account_name}</Typography>\n                  <Typography color=\"textSecondary\">{transaction.plaid_category}</Typography>\n                  <Typography color=\"textSecondary\">{transaction.notes}</Typography>\n                </div>\n              </Grid>\n              <Grid item xs={3} sm={4} style={{ paddingLeft: '40px' }}>\n                <Typography>{`$${transaction.total_amount}`}</Typography>\n                {+transaction.contribution && !expanded ? (\n                  <Typography\n                    style={{\n                      color: +transaction.contribution > 0 ? 'green' : 'red',\n                    }}\n                  >\n                    {`$${transaction.contribution}`}\n                  </Typography>\n                ) : null}\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Grid container spacing={10}>\n              <Grid item xs={6} sm={4}>\n                <TextField\n                  onChange={event =>\n                    actions.TransactionUpdate({\n                      id: transaction.id,\n                      notes: event.target.value,\n                    })\n                  }\n                />\n              </Grid>\n              <Grid item xs={6} sm={4}>\n                <CategoryField\n                  {...{\n                    transaction,\n                    selectableCategories,\n                    actions,\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6} sm={3}>\n                <TextField\n                  onChange={event =>\n                    actions.TransactionUpdate({\n                      id: transaction.id,\n                      contribution: event.target.value,\n                    })\n                  }\n                />\n              </Grid>\n              <Grid item xs={6} sm={1} style={{ textAlign: 'right' }}>\n                <Fab\n                  size=\"medium\"\n                  color=\"secondary\"\n                  aria-label=\"Delete\"\n                  onClick={() =>\n                    this.props.actions.TransactionDelete({\n                      id: transaction.id,\n                    })\n                  }\n                >\n                  <Delete />\n                </Fab>\n              </Grid>\n            </Grid>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectableCategories: getSelectableCategories(state),\n    accounts: getUsers(state),\n    currentUser: state.dragonState.current_user,\n    balance: getBalance(state),\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const TransactionRow = connect<PropsFromStore, { actions: ActionType }>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TransactionRowContainer)\n","import { Button, Grid } from '@material-ui/core'\nimport { ActionType, Category, State as AppState, Transaction, User } from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getSelectableCategories, getUsers, getVisibleTransactions } from '../selectors'\n\nimport { ActivityStream } from '@src/Root/ActivityStream'\nimport { ACTIONS as actionCreators } from '../actions'\nimport { NewPlaidForm } from './NewPlaidForm'\nimport { NewStatementForm } from './NewStatementForm'\nimport { NewTransactionForm } from './NewTransactionForm'\nimport { TransactionListAppBar } from './TransactionListAppBar'\nimport { TransactionRow } from './TransactionRow'\n\ninterface PropsFromStore {\n  transactions: Array<Transaction>\n  selectableCategories: Array<Category>\n  accounts: Array<any>\n  currentUser: User | null\n\n  showActivityStream: boolean\n}\n\ninterface Prop extends PropsFromStore {\n  actions: ActionType\n}\n\ntype FormType = 'transaction' | 'plaid' | 'statement'\n\ninterface State {\n  expandedTransactionId: number | null\n  shownForm: FormType | null\n}\n\nclass TransactionListContainer extends React.Component<Prop, State> {\n  state = {\n    expandedTransactionId: null,\n    shownForm: null,\n  }\n\n  showForm = (formType: FormType) => {\n    this.setState({ shownForm: formType })\n  }\n\n  componentDidMount() {\n    if (!this.props.selectableCategories.length) {\n      this.props.actions.CategoryList({})\n    }\n    this.props.actions.loadMoreTransactions(true)\n  }\n  onToggleExpansion(id: number) {\n    if (id === this.state.expandedTransactionId) {\n      this.setState({ expandedTransactionId: null })\n    } else {\n      this.setState({ expandedTransactionId: id })\n    }\n  }\n\n  render() {\n    const { selectableCategories, showActivityStream } = this.props\n    if (!selectableCategories || !selectableCategories.length) {\n      return null\n    }\n    return (\n      <div style={{ maxWidth: '100%' }}>\n        <TransactionListAppBar showForm={this.showForm} />\n        <div\n          style={{\n            height: window.innerHeight - 70,\n            overflow: 'scroll',\n          }}\n        >\n          <Grid container>\n            {showActivityStream ? (\n              <Grid item sm={3}>\n                <ActivityStream />\n              </Grid>\n            ) : null}\n            <Grid item sm={showActivityStream ? 9 : 12}>\n              <div style={{ marginBottom: '20px' }}>\n                {this.state.shownForm === 'transaction' ? <NewTransactionForm /> : null}\n                {this.state.shownForm === 'statement' ? <NewStatementForm /> : null}\n                {this.state.shownForm === 'plaid' ? (\n                  <NewPlaidForm />\n                ) : null}\n              </div>\n              {this.props.transactions.map(t => (\n                <TransactionRow\n                  expanded={this.state.expandedTransactionId === t.id}\n                  key={t.id}\n                  transaction={t}\n                  onToggleExpansion={(event, expanded) => this.onToggleExpansion(t.id)}\n                />\n              ))}\n              <Button\n                fullWidth\n                size=\"large\"\n                color=\"secondary\"\n                onClick={() => this.props.actions.loadMoreTransactions()}\n              >\n                ({this.props.transactions.length}) Click to Load More ...\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    transactions: getVisibleTransactions(state),\n    selectableCategories: getSelectableCategories(state),\n    accounts: getUsers(state),\n    currentUser: state.dragonState.current_user,\n    showActivityStream: state.showActivityStream,\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const TransactionList = connect<PropsFromStore, { actions: ActionType }>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TransactionListContainer)\n","import {\n  ActivityLoad,\n  GENERATED_ACTION_CREATORS,\n  LoginApp,\n  TransactionLoad,\n} from '@src/generated_types'\nimport { State } from '@src/types'\nimport { getVisibleTransactions, parseUrlState } from './selectors'\n\nexport function addSnack(message: string) {\n  return {\n    type: 'ADD_SNACK',\n    snack: message,\n  }\n}\nexport function logout() {\n  return (dispatch, getState) => {\n    sessionStorage.removeItem('jwt')\n    window.location.reload()\n  }\n}\n\nexport function login(username: string, password: string) {\n  return (dispatch, getState) => {\n    return dispatch(LoginApp({ username, password })).then(response => {\n      if (response.errors) {\n        dispatch(addSnack(response.errors))\n      } else if (getState().dragonState.jwt_auth_token) {\n        sessionStorage.setItem('jwt', getState().dragonState.jwt_auth_token)\n        window.location.reload()\n      } else {\n        dispatch(addSnack('No jwt found!'))\n      }\n    })\n  }\n}\n\nexport function eatSnack() {\n  return {\n    type: 'EAT_SNACK',\n  }\n}\n\nexport function toggleTimeline(enabled: boolean) {\n  return {\n    type: 'TOGGLE_TIMELINE',\n    enabled,\n  }\n}\n\nexport function hideNewCard() {\n  return {\n    type: 'HIDE_NEW_CARD',\n  }\n}\n\nexport function toggleActivityStream() {\n  return (dispatch, getState) => {\n    const state = getState()\n    const enabled = !state.showActivityStream\n    dispatch({\n      type: 'TOGGLE_ACTIVITY_STREAM',\n      enabled,\n    })\n    if (enabled && !state.dragonState.Activity.length) {\n      return dispatch(ActivityLoad({}))\n    }\n  }\n}\nexport function loadMoreTransactions(reset = false) {\n  return (dispatch, getState: () => State) => {\n    const state = getState()\n    const transactions = getVisibleTransactions(state)\n    const urlState = parseUrlState()\n\n    let page = 1\n    const pageSize = 20\n    if (transactions.length) {\n      const currentPage = Math.ceil(transactions.length / pageSize)\n      page = currentPage + 1\n    }\n\n    return dispatch(\n      TransactionLoad({\n        reset,\n        urlState,\n        page,\n      }),\n    )\n  }\n}\n\nexport const ACTIONS = {\n  ...GENERATED_ACTION_CREATORS,\n  loadMoreTransactions,\n  hideNewCard,\n  eatSnack,\n  addSnack,\n  login,\n  toggleTimeline,\n  toggleActivityStream,\n  logout,\n}\n","import * as React from 'react'\n\nimport { Checkbox } from '@material-ui/core'\nimport { List, ListItem, ListItemText } from '@material-ui/core'\nimport { TreeNode } from '@src/types'\n\ninterface TreeProps {\n  root: TreeNode\n}\nconst IdentedLineItemText: React.SFC<{ ident: number }> = props => {\n  const { ident, ...itemProps } = props\n  if (ident) {\n    return <ListItemText {...itemProps} style={{ paddingLeft: `${56 * ident}px` }} />\n  }\n  return <ListItemText {...itemProps} />\n}\n\nfunction getLevel(node: TreeNode, level: number) {\n  return [\n    <ListItem key={node.id}>\n      <IdentedLineItemText ident={level}>\n        <Checkbox />\n        {node.id}\n      </IdentedLineItemText>\n    </ListItem>,\n    ...node.children.map(child => getLevel(child, level + 1)),\n  ]\n}\nexport class Tree extends React.Component<TreeProps> {\n  render() {\n    return (\n      <List>{(this.props.root.children.map(child => getLevel(child, 0)) as any).flat(1000)}</List>\n    )\n  }\n}\n","import { Card, Typography } from '@material-ui/core'\nimport { ACTIONS as actionCreators } from '@src/actions'\nimport { SingleSelectField } from '@src/components/SingleSelectField'\nimport { Tree } from '@src/components/Tree'\nimport { getCategories, getIconChoices } from '@src/selectors'\nimport { ActionType, Category, TreeNode } from '@src/types'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\ninterface StateProps {\n  categories: Array<Category>\n  iconChoices: Array<{\n    name: string\n    value: string\n  }>\n  CategoryTree: TreeNode\n}\ninterface DispatchProps {\n  actions: ActionType\n}\ntype CategoryListProps = StateProps & DispatchProps\n\nclass CategoryList extends React.Component<CategoryListProps> {\n  render() {\n    return (\n      <div>\n        <Tree root={this.props.CategoryTree} />\n        <div>{this.props.categories.map(cat => this.getCard(cat))}</div>\n      </div>\n    )\n  }\n  onSelectIcon(category: Category, changes) {\n    return this.props.actions.CategoryUpdate({\n      id: category.value,\n      mui_icon_id: changes.mui_icon_id,\n    })\n  }\n\n  getCard(cat: Category) {\n    const choices = this.props.iconChoices.map(i => {\n      return {\n        value: i.name,\n        mui_icon_id: i.value,\n        label: i.name,\n      }\n    })\n    return (\n      <Card key={cat.value}>\n        <Typography style={{ display: 'flex' }}>{cat.label}</Typography>\n        <SingleSelectField\n          style={{ flex: 1 }}\n          instance={cat}\n          choices={choices}\n          instancePropNameToUpdate=\"mui_icon_id\"\n          onChange={this.onSelectIcon.bind(this)}\n        />\n      </Card>\n    )\n  }\n}\n\nconst mapStateToProps = (state): StateProps => {\n  return {\n    categories: getCategories(state),\n    iconChoices: getIconChoices(state),\n    CategoryTree: state.dragonState.CategoryTree,\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch),\n  }\n}\nexport const CategoryListPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CategoryList)\n","import { UrlPathEnum } from '@src/types'\nimport { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory()\nexport const pushHistory = (\n  pathname: UrlPathEnum,\n  urlState?: {} | null,\n  state: {} | null = null,\n) => {\n  const searchString =\n    urlState && urlState && Object.keys(urlState).length\n      ? '?urlState=' + JSON.stringify(urlState)\n      : ''\n  return history.push({\n    pathname,\n    search: searchString,\n    state,\n  })\n}\n\nexport const getPathName = () => {\n  const path = history.location.pathname\n  return path.endsWith('/') ? path.slice(0, path.length - 1) || '/' : path\n}\n","import { List, ListItem, ListItemText } from '@material-ui/core'\nimport { Route, Switch } from 'react-router'\n\nimport { ACTIONS as actionCreators } from '@src/actions'\nimport { CategoryListPage } from '@src/CategoryListPage'\nimport * as C from '@src/common'\nimport { getPathName, pushHistory } from '@src/history'\nimport { LoginPage } from '@src/LoginPage'\nimport { TransactionChart } from '@src/TransactionChart'\nimport { TransactionList } from '@src/TransactionList'\nimport * as React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport { ActionType, State, UrlPathEnum } from '@src/types'\n\ninterface Prop {\n  actions: ActionType\n}\n\nclass RootComponent extends React.Component<Prop, State> {\n  componentDidMount() {\n    if (sessionStorage.getItem('jwt')) {\n      this.props.actions.InitApp({})\n    }\n  }\n  render() {\n    return (\n      <C.FlexContainer>\n        <div style={{ maxWidth: '100%', flex: 8 }}>{<Body />}</div>\n      </C.FlexContainer>\n    )\n  }\n}\n\nexport const Root = connect(\n  () => ({}),\n  dispatch => ({ actions: bindActionCreators(actionCreators, dispatch) }),\n)(RootComponent)\n\nconst UrlPathsMap = {\n  TransactionList,\n  TransactionChart,\n  CategoryListPage,\n  LoginPage,\n}\n\nconst PageList = () => {\n  return (\n    <List>\n      {Object.keys(UrlPathsMap).map((c, index) => {\n        return (\n          <ListItem key={index} button onClick={() => pushHistory(c as UrlPathEnum)}>\n            <ListItemText primary={c} />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nclass Body extends React.Component<{}> {\n  render() {\n    if (getPathName() === UrlPathEnum.Root) {\n      return <PageList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionList) {\n      return <TransactionList />\n    }\n    if (getPathName() === UrlPathEnum.TransactionChart) {\n      return <TransactionChart />\n    }\n    if (getPathName() === UrlPathEnum.CategoryListPage) {\n      return <CategoryListPage />\n    }\n    if (getPathName() === UrlPathEnum.LoginPage) {\n      return <LoginPage />\n    }\n\n    throw new Error(`Invalid paths: ${getPathName()}`)\n  }\n}\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/\" component={Root} />\n  </Switch>\n))\n","import React from 'react'\nexport { default as styled } from 'styled-components'\nexport { default as PropTypes } from 'prop-types'\n\n// Material\nexport { default as IconButton } from '@material-ui/core/IconButton'\nexport { default as TextField } from '@material-ui/core/TextField'\nexport { Card, CardActions, CardHeader, CardMedia } from '@material-ui/core'\nexport { default as LinearProgress } from '@material-ui/core/LinearProgress'\n\nimport { Table as TRC } from '@material-ui/core'\n\nexport { SingleSelectField } from './components/SingleSelectField'\n\nexport const S = {\n  secondary: 'rgb(255, 64, 129)',\n  Card: {\n    margin: '5px',\n  },\n  CardContainer: {\n    paddingBottom: '5px',\n  },\n  Toolbar: {\n    height: '56px',\n    background: '#4285f4',\n  },\n\n  SmallFont: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  filterFonts: {\n    color: '#616161',\n    fontSize: '80%',\n  },\n  Body: {\n    background: '#f2f2f2',\n  },\n}\n\nexport const isWide = () => window.screen.availWidth > 800\n\nexport const TableRowColumn = props => {\n  const style = Object.assign(\n    {},\n    {\n      whiteSpace: 'normal',\n      textOverflow: 'initial',\n    },\n    props.style,\n  )\n  return <TRC {...props} style={style} />\n}\n\nexport const FlexContainer = props => {\n  const defaultStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n  const newStyle = Object.assign({}, defaultStyle, props.style)\n  const newProps = Object.assign({}, props, { style: newStyle })\n  return <div {...newProps} />\n}\n","import { ACTIONS as actionCreators } from '@src/actions'\nimport { ServerState, Transaction } from '@src/generated_types'\nexport * from '@src/generated_types'\n\nexport interface Charge {\n  lender?: number\n  borrower?: number\n  loan_amount: string\n}\nexport interface Operation {\n  verb: 'MERGE_APPEND' | 'MERGE_PREPEND' | 'OVERWRITE' | 'DELETE'\n  entity_type: 'Transaction' | 'Activity'\n  target_value: any\n}\n\nexport interface TransactionPatchCallback {\n  (transaction: Transaction, change: {}): void\n}\n\nexport interface Account {\n  id: number\n  name: string\n  description: string\n}\n\nexport interface State {\n  dragonState: ServerState\n  router?: any\n  showTimeline: boolean\n  showActivityStream: boolean\n  snacks: Array<string>\n}\n\nexport type ActionType = typeof actionCreators\n\nexport interface CommandInterfaceField {\n  name: string\n  field_type: string\n  required: boolean\n}\n\nexport interface Command {\n  name: string\n  command_interface: Array<CommandInterfaceField>\n  template_context: {}\n}\n\nexport enum UrlPathEnum {\n  Root = '/',\n  LoginPage = '/LoginPage',\n  TransactionList = '/TransactionList',\n  TransactionChart = '/TransactionChart',\n  CategoryListPage = '/CategoryListPage',\n  EntityMetaListPage = '/EntityMetaListPage',\n}\n","import { Button, Dialog, DialogContent, DialogTitle, Icon } from '@material-ui/core'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { Autocomplete, OptionType } from 'rice-instructor'\n\ninterface Prop {\n  instancePropNameToUpdate: string\n  choices: Array<{\n    value: string | number\n    mui_icon_id?: string\n    label: string\n  }>\n  instance: {}\n  onChange: (instance, changes) => void\n  style?: any\n  defaultValue?: string\n}\n\nexport class SingleSelectField extends React.Component<Prop, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      openDialog: false,\n    }\n  }\n\n  getInitialOption = () => {\n    const value = _.get(this.props.instance, this.props.instancePropNameToUpdate, null)\n\n    if (!value) return null\n    const option = this.props.choices.find(x => x.value === value)\n    if (!option) {\n      throw new Error(`${value} not found `)\n    }\n\n    return option\n  }\n\n  openDialog = e => {\n    this.setState({ openDialog: true })\n  }\n  closeDialog = () => {\n    this.setState({ openDialog: false })\n  }\n  onSelectOption = (selectedOption: OptionType) => {\n    const self = this,\n      { onChange, instance, instancePropNameToUpdate } = self.props\n    onChange(instance, {\n      [instancePropNameToUpdate]: selectedOption.value,\n    })\n    this.closeDialog()\n  }\n\n  render() {\n    const { choices } = this.props\n    const initialOption = this.getInitialOption()\n    return (\n      <div>\n        <Button onClick={this.openDialog} variant=\"outlined\" color=\"primary\">\n          {initialOption ? (\n            <Icon style={{ marginRight: '5px' }}>{initialOption.mui_icon_id}</Icon>\n          ) : null}\n          {initialOption ? initialOption.label : 'Select A Category'}\n        </Button>\n        <Dialog open={this.state.openDialog} fullWidth onClose={this.closeDialog}>\n          <DialogTitle>Select a category</DialogTitle>\n          <DialogContent>\n            <Autocomplete\n              onSelectOption={this.onSelectOption}\n              defaultValue={initialOption ? initialOption.value : undefined}\n              placeholder=\"Select a category\"\n              options={choices}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    )\n  }\n}\n","// import { ServerResponseError } from '@src/exceptions'\nimport * as _ from 'lodash'\nimport { handleAction } from 'redux-actions'\nimport { mergeArrays } from 'rice-instructor'\nimport * as u from 'updeep'\n\nexport const DECARYS_UPDATE_STATE = 'DRACARYS/UPDATE_STATE'\n\nexport interface Operation {\n  verb: 'MERGE_APPEND' | 'MERGE_PREPEND' | 'OVERWRITE' | 'DELETE'\n  entity_type: 'Transaction' | 'Activity'\n  target_value: any\n}\nexport const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${\n  window.location.port ? '8000' : ''\n}/api`\n\nexport function callApi(request: { endpoint: string; jsonBody: {}; authToken?: string }) {\n  const url = `${BASE_URL}/${request.endpoint}/`\n  const jwt = request.authToken ? request.authToken : sessionStorage.getItem('jwt')\n\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(request.jsonBody),\n    // credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n      Authorization: jwt ? `JWT ${jwt}` : '',\n    },\n  })\n  /*\n  if (response.ok) {\n    return response.json()\n  }\n  throw new ServerResponseError(response)\n         */\n}\nfunction applyOperation(result, operation: Operation) {\n  const targetValue = operation.target_value\n  if (operation.verb === 'OVERWRITE') {\n    return u.updateIn(operation.entity_type, targetValue, result)\n  } else if (operation.verb === 'MERGE_APPEND') {\n    const merged = mergeArrays(result[operation.entity_type], targetValue, 'append')\n    return u.updateIn(operation.entity_type, merged, result)\n  } else if (operation.verb === 'MERGE_PREPEND') {\n    const merged = mergeArrays(result[operation.entity_type], targetValue, 'prepend')\n    return u.updateIn(operation.entity_type, merged, result)\n  } else if (operation.verb === 'DELETE') {\n    return u.updateIn(\n      operation.entity_type,\n      u.reject(item => {\n        return item.id === targetValue.id\n      }),\n      result,\n    )\n  } else {\n    throw { operation }\n  }\n}\nconst initialDragonState = {\n  Statement: [],\n  Category: [],\n  Transaction: [],\n  Suggestion: [],\n  Activity: [],\n  IconChoice: [],\n  is_authenticated: false,\n  current_user: null,\n  network_accounts: [],\n  current_user_balance: null,\n  jwt_auth_token: null,\n  CategoryTree: null,\n}\nexport const dracarysReducer = handleAction(\n  DECARYS_UPDATE_STATE,\n  (state, action: any) => {\n    let ret = Object.assign({}, state)\n    const operations = action.response.operations\n    ret = _.reduce(operations, applyOperation, ret)\n    return ret\n  },\n  initialDragonState,\n)\n","import { pushHistory } from '@src/history'\nimport { callApi, DECARYS_UPDATE_STATE } from '@src/services/dracarys'\nimport { UrlPathEnum } from '@src/types'\nimport { Middleware } from 'redux'\n\nexport const apiMiddleware: Middleware = store => next => action => {\n  if (action && action.isApiAction) {\n    callApi({\n      endpoint: action.type,\n      jsonBody: action.requestBody,\n      authToken: sessionStorage.getItem('jwt') || '',\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          if (action.success) {\n            action.success(data)\n          }\n          store.dispatch({\n            type: DECARYS_UPDATE_STATE,\n            response: data,\n          })\n        })\n      } else if (response.status === 401) {\n        sessionStorage.removeItem('jwt')\n        pushHistory(UrlPathEnum.LoginPage)\n      }\n    })\n  }\n  return next(action)\n}\n","//import * as u from \"updeep\"\nimport { dracarysReducer } from '@src/services/dracarys'\nimport {\n  //Operation,\n  State,\n  // UpdateServerStateAction,\n  //ServerState,\n} from '@src/types'\n//import {mergeArrays} from \"rice-instructor\"\nimport * as _ from 'lodash'\nimport { combineReducers } from 'redux'\n\nexport const initialState: State = {\n  dragonState: {\n    Statement: [],\n    Category: [],\n    Transaction: [],\n    Suggestion: [],\n    Activity: [],\n    IconChoice: [],\n    is_authenticated: false,\n    current_user: null,\n    network_accounts: [],\n    current_user_balance: null,\n    jwt_auth_token: null,\n    CategoryTree: null,\n  },\n  showTimeline: true,\n  showActivityStream: false,\n  snacks: [],\n}\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n\nconst snacks = createReducer(initialState.snacks, {\n  EAT_SNACK: snacks => [...snacks.slice(1)],\n  ADD_SNACK: (snacks, action) => [...snacks, action.snack],\n})\n\nconst showTimeline = createReducer(initialState.showTimeline, {\n  TOGGLE_TIMELINE: (state, action) => action.enabled,\n})\n\nconst showActivityStream = createReducer(initialState.showActivityStream, {\n  TOGGLE_ACTIVITY_STREAM: (state, action) => !state,\n})\n\nconst reducers = combineReducers({\n  showTimeline,\n  showActivityStream,\n  // serverState,\n  dragonState: dracarysReducer,\n  snacks,\n})\n\nexport default reducers\n","import { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { applyMiddleware, createStore } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport { apiMiddleware } from './middleware'\nimport reducers from './reducers'\n\nexport const configureStore = (initialState?) => {\n  let middleware = applyMiddleware(thunk, apiMiddleware, logger())\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware)\n  }\n  const store = createStore(reducers, initialState, middleware)\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers')\n      store.replaceReducer(nextReducer)\n    })\n  }\n  return store\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport { Router } from 'react-router'\nimport { history } from './history'\n\nimport { App } from '@src/Root'\nimport { configureStore } from './configureStore'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n","export interface TreeNode {\n  id: string\n  children: Array<TreeNode>\n}\n\nexport interface Suggestion {\n  urlState: {}\n  label: string\n}\n\nexport interface Prediction {\n  category_id: number\n  category_name: string\n  split: boolean\n}\n\nexport interface PlaidAccount {\n  account_id: string\n  name: string\n  type: string\n  subtype: string\n  mask: string\n}\n\nexport interface PlaidTransaction {\n  account_id: string\n  account: PlaidAccount\n  amount: number\n  category: Array<string>\n  category_id: string\n  date: string\n  iso_currency_code: string\n  name: string\n  pending: boolean\n  transaction_id: string\n  transaction_type: string\n  __type__?: string\n}\n\nexport interface WaveTransaction {\n  anchor_account_name: string\n  date_created: string\n  direction: string\n  transaction_description: string\n  transaction_date: string\n  transaction_id: string\n  transaction_amount: string\n  __type__?: string\n}\n\nexport interface Transaction {\n  id: number\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  checkpoint_id: number | null\n  statement_id: number | null\n  merchant: string\n  is_ignored: boolean\n  editable: boolean\n  spend: string\n  lender_id: number | null\n  borrower_id: number | null\n  loan_amount: string\n  contribution: string\n  origin_payload: PlaidTransaction | WaveTransaction | null\n  prediction: Prediction | null\n  account_name?: string\n  plaid_category?: string\n}\n\nexport interface ImportFromPlaidRequest {\n  start_date: string\n  end_date: string\n}\n\nexport interface StatementUploadRequest {\n  source: StatementSource\n  content: string\n}\n\nexport interface TransactionCreateRequest {\n  issued_date: string\n  total_amount: string\n  notes: string\n  category_id: number | null\n  merchant: string\n}\n\nexport interface TransactionConfirmSmartCat {\n  id: number\n  category_id: number\n  split: boolean\n}\n\nexport interface TransactionUpdateRequest {\n  id: number\n  issued_date?: string | undefined\n  total_amount?: string | undefined\n  notes?: string | undefined\n  category_id?: number | undefined\n  checkpoint_id?: number | undefined\n  statement_id?: number | undefined\n  merchant?: string | undefined\n  is_ignored?: boolean | undefined\n  contribution?: string | undefined\n}\n\nexport interface IdOnlyRequst {\n  id: number\n}\n\nexport interface CategoryUpdateRequest {\n  id: number\n  mui_icon_id: string\n}\n\nexport interface TransactionFilterCriteria {\n  event_id?: string | null\n  full_text?: string | null\n}\n\nexport interface ExecuteSearchRequest {\n  urlState?: TransactionFilterCriteria | null\n}\n\nexport interface TransactionLoadRequest {\n  reset?: boolean | null\n  urlState?: TransactionFilterCriteria | null\n  page?: number | null\n  page_size?: number | null\n}\n\nexport interface TransactionChartRequest {\n  report_type: string\n  start_date?: string | null\n  end_date?: string | null\n}\n\nexport interface Category {\n  id: number\n  value: number\n  name: string\n  label: string\n  parent_id: number | null\n  is_selectable: boolean\n  mui_icon_id: string\n}\n\nexport interface User {\n  id: number\n  username: string\n}\n\nexport interface Interaction {\n  label: string\n  enabled: boolean\n  endpoint_name: string\n  endpoint_args: {}\n}\n\nexport interface Activity {\n  id: string\n  eventType: string\n  label: string\n  date: string\n  subtitles: Array<string>\n  needs_attention: boolean\n  interactions: Array<Interaction>\n}\n\nexport interface Account {\n  account_name: string\n  account_number: string\n}\n\nexport interface Statement {\n  id: number\n  user_id: number\n  notes: string\n  created_ts: string\n  is_processed: boolean\n  first_date: string\n  last_date: string\n  duplicates: Array<Transaction>\n  source: string\n  content: string\n}\n\nexport interface _IconChoice {\n  name: string\n  value: string\n  mui_icon_id: string\n}\n\nexport interface ServerState {\n  is_authenticated: boolean | null\n  current_user: User | null\n  network_accounts: Array<User>\n  current_user_balance: string | null\n  jwt_auth_token: string | null\n  CategoryTree: TreeNode | null\n  Category: Array<Category>\n  Transaction: Array<Transaction>\n  Statement: Array<Statement>\n  Activity: Array<Activity>\n  IconChoice: Array<_IconChoice>\n  Suggestion: Array<Suggestion>\n}\n\nexport interface Icon {\n  name: string\n  color: string\n}\n\nexport interface EntityFieldMeta {\n  name: string\n  type: string\n}\n\nexport interface EntityMeta {\n  name: string\n  fields: Array<EntityFieldMeta>\n}\n\nexport interface AuthenticateUserRequest {\n  username: string\n  password: string\n}\n\nexport interface EmptyBodySchema {}\n\nexport enum StatementSource {\n  PC_MASTER = 'PC_MASTER',\n  SCOTIA_MASTER = 'SCOTIA_MASTER',\n  VISA = 'VISA',\n  CHEQUE = 'CHEQUE',\n}\nexport function LoginApp(requestBody: AuthenticateUserRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'LoginApp', requestBody, success, reject }\n}\nexport function InitApp(requestBody: EmptyBodySchema, success?, reject?): any {\n  return { isApiAction: true, type: 'InitApp', requestBody, success, reject }\n}\nexport function TransactionLoad(requestBody: TransactionLoadRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'TransactionLoad', requestBody, success, reject }\n}\nexport function TransactionCreate(requestBody: TransactionCreateRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'TransactionCreate', requestBody, success, reject }\n}\nexport function TransactionChart(requestBody: TransactionChartRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'TransactionChart', requestBody, success, reject }\n}\nexport function TransactionUpdate(requestBody: TransactionUpdateRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'TransactionUpdate', requestBody, success, reject }\n}\nexport function TransactionAccept(requestBody: TransactionConfirmSmartCat, success?, reject?): any {\n  return { isApiAction: true, type: 'TransactionAccept', requestBody, success, reject }\n}\nexport function TransactionDelete(requestBody: IdOnlyRequst, success?, reject?): any {\n  return { isApiAction: true, type: 'TransactionDelete', requestBody, success, reject }\n}\nexport function ExecuteSearch(requestBody: ExecuteSearchRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'ExecuteSearch', requestBody, success, reject }\n}\nexport function ActivityLoad(requestBody: EmptyBodySchema, success?, reject?): any {\n  return { isApiAction: true, type: 'ActivityLoad', requestBody, success, reject }\n}\nexport function StatementUpload(requestBody: StatementUploadRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'StatementUpload', requestBody, success, reject }\n}\nexport function SuggestionLoad(requestBody: EmptyBodySchema, success?, reject?): any {\n  return { isApiAction: true, type: 'SuggestionLoad', requestBody, success, reject }\n}\nexport function CategoryUpdate(requestBody: CategoryUpdateRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'CategoryUpdate', requestBody, success, reject }\n}\nexport function CategoryList(requestBody: EmptyBodySchema, success?, reject?): any {\n  return { isApiAction: true, type: 'CategoryList', requestBody, success, reject }\n}\nexport function CheckpointExport(requestBody: IdOnlyRequst, success?, reject?): any {\n  return { isApiAction: true, type: 'CheckpointExport', requestBody, success, reject }\n}\nexport function CheckpointSign(requestBody: IdOnlyRequst, success?, reject?): any {\n  return { isApiAction: true, type: 'CheckpointSign', requestBody, success, reject }\n}\nexport function CheckpointUnsign(requestBody: IdOnlyRequst, success?, reject?): any {\n  return { isApiAction: true, type: 'CheckpointUnsign', requestBody, success, reject }\n}\nexport function ListEntityMetas(requestBody: EmptyBodySchema, success?, reject?): any {\n  return { isApiAction: true, type: 'ListEntityMetas', requestBody, success, reject }\n}\nexport function SaveEntityMeta(requestBody: EntityMeta, success?, reject?): any {\n  return { isApiAction: true, type: 'SaveEntityMeta', requestBody, success, reject }\n}\nexport function ImportFromPlaid(requestBody: ImportFromPlaidRequest, success?, reject?): any {\n  return { isApiAction: true, type: 'ImportFromPlaid', requestBody, success, reject }\n}\nexport const GENERATED_ACTION_CREATORS = {\n  LoginApp,\n  InitApp,\n  TransactionLoad,\n  TransactionCreate,\n  TransactionChart,\n  TransactionUpdate,\n  TransactionAccept,\n  TransactionDelete,\n  ExecuteSearch,\n  ActivityLoad,\n  StatementUpload,\n  SuggestionLoad,\n  CategoryUpdate,\n  CategoryList,\n  CheckpointExport,\n  CheckpointSign,\n  CheckpointUnsign,\n  ListEntityMetas,\n  SaveEntityMeta,\n  ImportFromPlaid,\n}\n"],"sourceRoot":""}