{"version":3,"sources":["webpack:///./queries/__generated__/UpdateTransaction.hooks.ts","webpack:///./queries/GetEvents.graphql","webpack:///./App/index.tsx","webpack:///./queries/__generated__/ImportWaveTransactions.hooks.ts","webpack:///./queries/ImportWaveTransactions.graphql","webpack:///./queries/__generated__/GetLatestImportDate.hooks.ts","webpack:///./queries/GetLatestImportDate.graphql","webpack:///./queries/GetTransactions.graphql","webpack:///./queries/__generated__/CreateTransaction.hooks.ts","webpack:///./queries/CreateTransaction.graphql","webpack:///./queries/__generated__/AcceptPrediction.hooks.ts","webpack:///./queries/AcceptPrediction.graphql","webpack:///./queries/__generated__/CategorizeTransaction.hooks.ts","webpack:///./queries/CategorizeTransaction.graphql","webpack:///./queries/UpdateTransaction.graphql","webpack:///./queries/__generated__/GetEventLogs.hooks.ts","webpack:///./queries/GetEventLogs.graphql","webpack:///./queries/__generated__/ArchiveTransaction.hooks.ts","webpack:///./queries/ArchiveTransaction.graphql","webpack:///./queries/__generated__/SignCheckpoint.hooks.ts","webpack:///./queries/SignCheckpoint.graphql","webpack:///./queries/__generated__/GetEvents.hooks.ts","webpack:///./queries/__generated__/GetCategories.hooks.ts","webpack:///./queries/GetCategories.graphql","webpack:///./queries/__generated__/GetProfitAndLossChart.hooks.ts","webpack:///./queries/GetProfitAndLossChart.graphql","webpack:///./queries/__generated__/GetModelRows.hooks.ts","webpack:///./queries/GetModelRows.graphql","webpack:///./queries/__generated__/DeleteModelInstance.hooks.ts","webpack:///./queries/DeleteModelInstance.graphql","webpack:///./queries/__generated__/GetModels.hooks.ts","webpack:///./queries/GetModels.graphql","webpack:///./App/LoginPage.tsx","webpack:///./gqlClient.ts","webpack:///./App/contexts.tsx","webpack:///./components/Snack.tsx","webpack:///./App/SnackProvider.tsx","webpack:///./styles.tsx","webpack:///./TransactionList/ImportForm.tsx","webpack:///./components/DialogSelect.tsx","webpack:///./utils.ts","webpack:///./TransactionList/NewTransactionForm.tsx","webpack:///./components/IconMenu.tsx","webpack:///./App/hooks.ts","webpack:///./TransactionList/FilterDialog.tsx","webpack:///./TransactionList/TransactionListAppBar.tsx","webpack:///./TransactionList/SmartCatField.tsx","webpack:///./components/ResponsiveLabel.tsx","webpack:///./TransactionList/CategoryField.tsx","webpack:///./components/DebouncedTextField.tsx","webpack:///./TransactionList/BalanceAdjustField.tsx","webpack:///./TransactionList/EventLog.tsx","webpack:///./TransactionList/TransactionRow.tsx","webpack:///./theme.tsx","webpack:///./App/Timeline/EventRow.tsx","webpack:///./App/Timeline/utils.ts","webpack:///./App/Timeline/index.tsx","webpack:///./TransactionList/index.tsx","webpack:///./components/IconSelect.tsx","webpack:///./CategoryPage/Tree.tsx","webpack:///./CategoryPage/selectors.tsx","webpack:///./CategoryPage/index.tsx","webpack:///./Report/PnlChart.tsx","webpack:///./App/Admin/Table.tsx","webpack:///./App/Admin/index.tsx","webpack:///./App/Home.tsx","webpack:///./index.tsx","webpack:///./queries/__generated__/GetTransactions.hooks.ts","webpack:///./queries/FragmentTransaction.graphql","webpack:///./types/index.ts","webpack:///./history.ts"],"names":["QUERY","UpdateTransaction__QUERY","useApolloQuery","options","useMutation","doc","loc","source","definitionRefs","findOperation","name","i","definitions","length","element","value","forEach","def","refs","Set","collectFragmentReferences","node","kind","add","type","selectionSet","selections","selection","variableDefinitions","module","exports","operationName","newDoc","hasOwnProperty","opRefs","allRefs","newRefs","refName","size","prevRefs","has","childRef","op","push","oneQuery","Routes","exact","path","component","LoginPage","Home","App","hot","client","ImportWaveTransactions__QUERY","names","concat","filter","GetLatestImportDate__QUERY","useQuery","CreateTransaction__QUERY","AcceptPrediction__QUERY","CategorizeTransaction__QUERY","GetEventLogs__QUERY","ArchiveTransaction__QUERY","SignCheckpoint__QUERY","GetEvents__QUERY","GetCategories__QUERY","GetProfitAndLossChart__QUERY","GetModelRows__QUERY","DeleteModelInstance__QUERY","GetModels__QUERY","React","username","setUsername","password","setPassword","errorMessage","setErrorMessage","submitLogin","fetch","BASE_URL","method","body","JSON","stringify","headers","then","response","json","data","code","sessionStorage","setItem","token","window","location","href","console","error","message","style","height","innerHeight","display","alignItems","justifyContent","flexDirection","label","onChange","e","target","helperText","onKeyPress","charCode","variant","color","onClick","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","__schema","types","errorLink","onError","graphQLErrors","networkError","gqlError","extensions","removeItem","authLink","setContext","_","getItem","authorization","AC","link","HttpLink","uri","cache","InMemoryCache","SnackContext","messages","msg","consume","Snack","onClose","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","action","Button","IconButton","aria-label","Close","fontSize","SnackProvider","children","setMessages","log","slice","Provider","m","isWide","innerWidth","useStyles","makeStyles","theme","createStyles","appBar","position","header","backgroundColor","palette","info","light","disabled","opacity","cursor","title","marginLeft","spacing","flex","formControl","margin","minWidth","today","Date","toISOString","ImportButton","startDate","endDate","importWaveTransactions","loading","fullWidth","variables","res","reload","marginTop","ImportForm","props","GetLatestImportDate","initialStartDate","latestImportDate","ImportFormComponent","setStartDate","setEndDate","Grid","container","item","xs","sm","TextField","defaultValue","DialogSelect","choices","onSelectOption","isOpen","setIsOpen","initialOption","option","find","x","Error","getInitialOption","Icon","marginRight","iconId","Dialog","DialogTitle","DialogContent","Autocomplete","getOptionLabel","getOptionSelected","newValue","renderInput","params","getIsoDateString","d","year","getFullYear","month","getMonth","day","getDate","fieldConfig","issuedDate","required","merchantName","notes","categoryId","balanceAdjust","totalAmount","FieldInput","fieldName","updateField","instance","config","initialForm","getToday","NewTransactionForm","selectableCategories","formData","setFormData","update","filters","offset","limit","createTransaction","isOk","cached","readQuery","query","GET_TRANSACTIONS_QUERY","writeQuery","Object","assign","transactions","transaction","t","old","newState","paddingTop","ExpansionPanel","expanded","ExpansionPanelSummary","map","cat","id","description","Divider","ExpansionPanelActions","input","every","Boolean","SimpleMenu","buttonText","useState","anchorEl","setAnchorEl","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","useHistory","history","useReactRouterHistory","_history","pathname","qs","useLocation","search","useReactRouterLocation","querystring","parse","split","FilterDialog","categoryChoices","setOpen","batchId","setBatchId","sharedOnly","setSharedOnly","uncategorizedOnly","setUncategorizedOnly","searchText","setSearchText","setCategoryId","handleClickOpen","aria-labelledby","DialogContentText","FormControl","InputLabel","Select","parseInt","MenuItem","choice","key","FormControlLabel","control","Checkbox","checked","DialogActions","undefined","TransactionListAppBar","AppBar","Toolbar","Tooltip","toggleTimeline","History","balance","Typography","IconMenu","Add","showForm","ListItemIcon","AttachMoney","ListItemText","Waves","className","SmartCatField","predicatedSplit","predicatedCategory","transactionId","openCategoryDialog","category","acceptPrediction","ButtonGroup","ResponsiveLabel","ResponsiveLink","rest","Link","CategoryField","showDialog","setShowDialog","categoryName","editable","selected","CategoryDialogSelect","initialTextValue","c","classes","categorizeTransaction","textValue","setTextValue","includes","toUpperCase","fullScreen","edge","autoFocus","List","ListItem","button","ListItemSecondaryAction","DebouncedTextField","setter","onBounce","debounced","PrettoSlider","withStyles","root","thumb","width","border","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","BalanceAdjustField","total","setBalanceAdjust","Number","toFixed","percentage","setPercentage","updateTransaction","gutterBottom","newPercentage","newBalanceAdjust","toString","min","max","step","valueLabelDisplay","marks","valueLabelFormat","paddingBottom","EventLog","entityId","eventLogs","eventName","createdTs","changes","change","index","TransactionRowComponent","showDate","onToggleExpansion","setNotes","MUTATION","archiveTransaction","ARCHIVE_TRANSACTION_MUTATION","removed","Card","CardHeader","toLocaleDateString","timeZone","CardContent","float","Collapse","in","unmountOnExit","parseFloat","textAlign","Fab","Delete","areEqual","last","next","TransactionRow","TransactionRows","setExpanded","eventId","categories","is_selectable","isDarkMode","createMuiTheme","EventRow","eventType","checkpoint","eventIcon","batch","origin","plaid","wave","getEventIcon","eventButtonIcon","getEventButtonIcon","signedTs","signedBalance","batch_import","getEventDescription","CheckpointListItem","snackbar","checkpointId","SIGN_CHECKPOINT_MUTATION","refetchQueries","GET_EVENTS","signCheckpoint","success","main","Timeline","LinearProgress","events","checkpoints","batches","sort","a","b","TransactionList","showTimeline","setShowTimeline","formType","setFormType","isTransactionLoading","fetchMore","Paper","maxWidth","amount","overflow","marginBottom","updateQuery","prev","fetchMoreResult","ICON_IDS","IconSelect","initialValue","background","paper","Tree","level","onSelectIcon","onSaveNode","paddingLeft","primary","ExpandLess","ExpandMore","timeout","disablePadding","child","NodeListItem","setEditable","pickingIcon","setPickingIcon","nodeName","setNodeName","setIconId","dense","role","onBlur","addNode","tree","visited","remaining","p","parent_id","parentNode","v","CategoryPage","pop","getCategoryTree","is_active","__typename","keys","k","HighchartsData","Highchart","Highcharts","HighchartsDrilldown","sixMonthsAgo","setDate","PnlChart","initial","chart","text","xAxis","yAxis","align","labels","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","column","allowPointSelect","click","onClickColumn","legend","layout","verticalAlign","y","floating","borderWidth","shadow","credits","titled","u","profitAndLossChart","DeleteButton","modelId","DeleteModelInstance","Body","modelRows","row","attributes","attr","toLowerCase","TableRow","TableCell","attrib","fields","TableContainer","Table","TableHead","f","TableBody","Admin","AdminRoutes","match","useRouteMatch","models","model","to","url","ModelPage","valueType","filterArgs","Nav","authToken","jwtDecode","exp","getTime","ThemeProvider","ReactDOM","document","getElementById","GetTransactions__QUERY","UrlPathEnum","Root","TablesPage","createBrowserHistory","isLocal","port","protocol","hostname"],"mappings":"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","file":"app.js","sourcesContent":["\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  UpdateTransaction, UpdateTransactionVariables,\n} from '@src/queries/__generated__/UpdateTransaction'\nimport UpdateTransaction__QUERY from '@src/queries/UpdateTransaction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/UpdateTransaction'\n\nexport const QUERY = UpdateTransaction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<UpdateTransaction, UpdateTransactionVariables>,\n) {\n  return useMutation<UpdateTransaction, UpdateTransactionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetEvents\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"checkpoints\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"eventType\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedBalance\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"batches\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"eventType\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"origin\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"userId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":205}};\n    doc.loc.source = {\"body\":\"query GetEvents {\\n  checkpoints {\\n    id\\n    eventType\\n    createdTs\\n    signedTs\\n    signedBalance\\n  }\\n  batches {\\n    id\\n    eventType\\n    createdTs\\n    origin\\n    userId\\n    startDate\\n    endDate\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetEvents\"] = oneQuery(doc, \"GetEvents\");\n        \n","import * as React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { Home } from './Home'\nimport { LoginPage } from '@src/App/LoginPage'\nimport { client } from '@src/gqlClient'\n\n/*\n * /LoginPage: render nav + login form\n * Otherwise:\n *  render Home:\n *    if !authToken:\n *      redirect to login page\n *    else:\n *      render sub routes\n *\n *\n */\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <Switch>\n          <Route exact path=\"/LoginPage\" component={LoginPage}></Route>\n          <Route path=\"/\" component={Home}></Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  )\n}\nexport const App = hot(module)(() => (\n  <ApolloProvider client={client}>\n    <Routes />\n  </ApolloProvider>\n))\n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  ImportWaveTransactions, ImportWaveTransactionsVariables,\n} from '@src/queries/__generated__/ImportWaveTransactions'\nimport ImportWaveTransactions__QUERY from '@src/queries/ImportWaveTransactions.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/ImportWaveTransactions'\n\nexport const QUERY = ImportWaveTransactions__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<ImportWaveTransactions, ImportWaveTransactionsVariables>,\n) {\n  return useMutation<ImportWaveTransactions, ImportWaveTransactionsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"ImportWaveTransactions\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"importFromWave\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transactions\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":244}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation ImportWaveTransactions($startDate: String!, $endDate: String!) {\\n  importFromWave(startDate: $startDate, endDate: $endDate) {\\n    isOk\\n    transactions {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"ImportWaveTransactions\"] = oneQuery(doc, \"ImportWaveTransactions\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetLatestImportDate, \n} from '@src/queries/__generated__/GetLatestImportDate'\nimport GetLatestImportDate__QUERY from '@src/queries/GetLatestImportDate.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetLatestImportDate'\n\nexport const QUERY = GetLatestImportDate__QUERY\nexport type GetLatestImportDateVariables = {}\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options?: QueryHookOptions<GetLatestImportDate, GetLatestImportDateVariables>,\n) {\n  return useQuery<GetLatestImportDate, GetLatestImportDateVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetLatestImportDate\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"latestImportDate\"},\"arguments\":[],\"directives\":[]}]}}],\"loc\":{\"start\":0,\"end\":49}};\n    doc.loc.source = {\"body\":\"query GetLatestImportDate {\\n  latestImportDate\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetLatestImportDate\"] = oneQuery(doc, \"GetLatestImportDate\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetTransactions\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TransactionFilters\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"balance\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"amount\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transactions\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parent_id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"iconId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_selectable\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_active\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":306}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nquery GetTransactions($filters: TransactionFilters!) {\\n  balance {\\n    id\\n    amount\\n  }\\n  transactions(filters: $filters) {\\n    ...FragmentTransaction\\n  }\\n  categories {\\n    id\\n    description\\n    name\\n    parent_id\\n    iconId\\n    is_selectable\\n    is_active\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetTransactions\"] = oneQuery(doc, \"GetTransactions\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  CreateTransaction, CreateTransactionVariables,\n} from '@src/queries/__generated__/CreateTransaction'\nimport CreateTransaction__QUERY from '@src/queries/CreateTransaction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/CreateTransaction'\n\nexport const QUERY = CreateTransaction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<CreateTransaction, CreateTransactionVariables>,\n) {\n  return useMutation<CreateTransaction, CreateTransactionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateTransaction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateTransactionInput\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createTransaction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":207}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation CreateTransaction($input: CreateTransactionInput!) {\\n  createTransaction(input: $input) {\\n    isOk\\n    transaction {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"CreateTransaction\"] = oneQuery(doc, \"CreateTransaction\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  AcceptPrediction, AcceptPredictionVariables,\n} from '@src/queries/__generated__/AcceptPrediction'\nimport AcceptPrediction__QUERY from '@src/queries/AcceptPrediction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/AcceptPrediction'\n\nexport const QUERY = AcceptPrediction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<AcceptPrediction, AcceptPredictionVariables>,\n) {\n  return useMutation<AcceptPrediction, AcceptPredictionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"AcceptPrediction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"acceptPrediction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"balance\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"amount\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":219}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation AcceptPrediction($id: Int!) {\\n  acceptPrediction(id: $id) {\\n    isOk\\n    balance {\\n      id\\n      amount\\n    }\\n    transaction {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"AcceptPrediction\"] = oneQuery(doc, \"AcceptPrediction\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  CategorizeTransaction, CategorizeTransactionVariables,\n} from '@src/queries/__generated__/CategorizeTransaction'\nimport CategorizeTransaction__QUERY from '@src/queries/CategorizeTransaction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/CategorizeTransaction'\n\nexport const QUERY = CategorizeTransaction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<CategorizeTransaction, CategorizeTransactionVariables>,\n) {\n  return useMutation<CategorizeTransaction, CategorizeTransactionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"CategorizeTransaction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categorizeTransaction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":231}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation CategorizeTransaction($id: Int!, $categoryId: Int!) {\\n  categorizeTransaction(id: $id, categoryId: $categoryId) {\\n    isOk\\n    transaction {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"CategorizeTransaction\"] = oneQuery(doc, \"CategorizeTransaction\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdateTransaction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdateTransactionInput\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateTransaction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"balance\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"amount\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":249}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation UpdateTransaction($input: UpdateTransactionInput!) {\\n  updateTransaction(input: $input) {\\n    isOk\\n    balance {\\n      id\\n      amount\\n    }\\n    transaction {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"UpdateTransaction\"] = oneQuery(doc, \"UpdateTransaction\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetEventLogs, GetEventLogsVariables,\n} from '@src/queries/__generated__/GetEventLogs'\nimport GetEventLogs__QUERY from '@src/queries/GetEventLogs.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetEventLogs'\n\nexport const QUERY = GetEventLogs__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: QueryHookOptions<GetEventLogs, GetEventLogsVariables>,\n) {\n  return useQuery<GetEventLogs, GetEventLogsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetEventLogs\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"EventLogFilters\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"eventLogs\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"actorId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"eventName\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"entityId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"changes\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":160}};\n    doc.loc.source = {\"body\":\"query GetEventLogs($filters: EventLogFilters!) {\\n  eventLogs(filters: $filters) {\\n    id\\n    actorId\\n    eventName\\n    entityId\\n    createdTs\\n    changes\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetEventLogs\"] = oneQuery(doc, \"GetEventLogs\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  ArchiveTransaction, ArchiveTransactionVariables,\n} from '@src/queries/__generated__/ArchiveTransaction'\nimport ArchiveTransaction__QUERY from '@src/queries/ArchiveTransaction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/ArchiveTransaction'\n\nexport const QUERY = ArchiveTransaction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<ArchiveTransaction, ArchiveTransactionVariables>,\n) {\n  return useMutation<ArchiveTransaction, ArchiveTransactionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"ArchiveTransaction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"archiveTransaction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":88}};\n    doc.loc.source = {\"body\":\"mutation ArchiveTransaction($id: Int!) {\\n  archiveTransaction(id: $id) {\\n    isOk\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"ArchiveTransaction\"] = oneQuery(doc, \"ArchiveTransaction\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  SignCheckpoint, SignCheckpointVariables,\n} from '@src/queries/__generated__/SignCheckpoint'\nimport SignCheckpoint__QUERY from '@src/queries/SignCheckpoint.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/SignCheckpoint'\n\nexport const QUERY = SignCheckpoint__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<SignCheckpoint, SignCheckpointVariables>,\n) {\n  return useMutation<SignCheckpoint, SignCheckpointVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"SignCheckpoint\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signCheckpoint\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"checkpoint\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedById\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"groupId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedBalance\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":178}};\n    doc.loc.source = {\"body\":\"mutation SignCheckpoint($id: Int!) {\\n  signCheckpoint(id: $id) {\\n    isOk\\n    checkpoint {\\n      id\\n      signedTs\\n      signedById\\n      groupId\\n      signedBalance\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"SignCheckpoint\"] = oneQuery(doc, \"SignCheckpoint\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetEvents, \n} from '@src/queries/__generated__/GetEvents'\nimport GetEvents__QUERY from '@src/queries/GetEvents.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetEvents'\n\nexport const QUERY = GetEvents__QUERY\nexport type GetEventsVariables = {}\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options?: QueryHookOptions<GetEvents, GetEventsVariables>,\n) {\n  return useQuery<GetEvents, GetEventsVariables>(QUERY, options)\n}\n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetCategories, \n} from '@src/queries/__generated__/GetCategories'\nimport GetCategories__QUERY from '@src/queries/GetCategories.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetCategories'\n\nexport const QUERY = GetCategories__QUERY\nexport type GetCategoriesVariables = {}\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options?: QueryHookOptions<GetCategories, GetCategoriesVariables>,\n) {\n  return useQuery<GetCategories, GetCategoriesVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetCategories\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parent_id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"iconId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_selectable\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_active\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":132}};\n    doc.loc.source = {\"body\":\"query GetCategories {\\n  categories {\\n    id\\n    description\\n    name\\n    parent_id\\n    iconId\\n    is_selectable\\n    is_active\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetCategories\"] = oneQuery(doc, \"GetCategories\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetProfitAndLossChart, GetProfitAndLossChartVariables,\n} from '@src/queries/__generated__/GetProfitAndLossChart'\nimport GetProfitAndLossChart__QUERY from '@src/queries/GetProfitAndLossChart.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetProfitAndLossChart'\n\nexport const QUERY = GetProfitAndLossChart__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: QueryHookOptions<GetProfitAndLossChart, GetProfitAndLossChartVariables>,\n) {\n  return useQuery<GetProfitAndLossChart, GetProfitAndLossChartVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetProfitAndLossChart\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"profitAndLossChart\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"series\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":215}};\n    doc.loc.source = {\"body\":\"query GetProfitAndLossChart($startDate: String!, $endDate: String!) {\\n  profitAndLossChart(startDate: $startDate, endDate: $endDate) {\\n    series {\\n      name\\n      data {\\n        name\\n        y\\n      }\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetProfitAndLossChart\"] = oneQuery(doc, \"GetProfitAndLossChart\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetModelRows, GetModelRowsVariables,\n} from '@src/queries/__generated__/GetModelRows'\nimport GetModelRows__QUERY from '@src/queries/GetModelRows.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetModelRows'\n\nexport const QUERY = GetModelRows__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: QueryHookOptions<GetModelRows, GetModelRowsVariables>,\n) {\n  return useQuery<GetModelRows, GetModelRowsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetModelRows\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modelRows\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"attributes\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":125}};\n    doc.loc.source = {\"body\":\"query GetModelRows($modelId: String!) {\\n  modelRows(modelId: $modelId) {\\n    attributes {\\n      name\\n      value\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetModelRows\"] = oneQuery(doc, \"GetModelRows\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  DeleteModelInstance, DeleteModelInstanceVariables,\n} from '@src/queries/__generated__/DeleteModelInstance'\nimport DeleteModelInstance__QUERY from '@src/queries/DeleteModelInstance.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/DeleteModelInstance'\n\nexport const QUERY = DeleteModelInstance__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<DeleteModelInstance, DeleteModelInstanceVariables>,\n) {\n  return useMutation<DeleteModelInstance, DeleteModelInstanceVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"DeleteModelInstance\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"entityId\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"deleteModelInstance\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"entityId\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"entityId\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":146}};\n    doc.loc.source = {\"body\":\"mutation DeleteModelInstance($modelId: String!, $entityId: Int!) {\\n  deleteModelInstance(modelId: $modelId, entityId: $entityId) {\\n    isOk\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"DeleteModelInstance\"] = oneQuery(doc, \"DeleteModelInstance\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetModels, \n} from '@src/queries/__generated__/GetModels'\nimport GetModels__QUERY from '@src/queries/GetModels.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetModels'\n\nexport const QUERY = GetModels__QUERY\nexport type GetModelsVariables = {}\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options?: QueryHookOptions<GetModels, GetModelsVariables>,\n) {\n  return useQuery<GetModels, GetModelsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetModels\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"models\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"fields\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"valueType\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"filterArgs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"valueType\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":147}};\n    doc.loc.source = {\"body\":\"query GetModels {\\n  models {\\n    id\\n    name\\n    fields {\\n      name\\n      valueType\\n    }\\n    filterArgs {\\n      name\\n      valueType\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetModels\"] = oneQuery(doc, \"GetModels\");\n        \n","import { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport * as React from 'react'\n\nimport { BASE_URL } from '@src/history'\n\nexport const LoginPage = () => {\n  const [username, setUsername] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const [errorMessage, setErrorMessage] = React.useState(null)\n  const submitLogin = () => {\n    fetch(`${BASE_URL}/login`, {\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.code === 200) {\n          sessionStorage.setItem('authToken', data.token)\n          // Redirect to root\n          window.location.href = '/'\n        } else {\n          console.error(data)\n          setErrorMessage(data.message)\n        }\n      })\n  }\n  return (\n    <div\n      style={{\n        height: `${window.innerHeight}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <TextField label=\"Username\" onChange={(e) => setUsername(e.target.value)} />\n      <br />\n      <TextField\n        error={!!errorMessage}\n        helperText={errorMessage || ''}\n        onChange={(e) => setPassword(e.target.value)}\n        type=\"password\"\n        label=\"Password\"\n        onKeyPress={(e) => {\n          if (e.charCode == 13) {\n            submitLogin()\n          }\n        }}\n      />\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={() => submitLogin()}>\n        Login\n      </Button>\n    </div>\n  )\n}\n","import { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n\nimport { ApolloClient as AC } from 'apollo-client'\nimport { concat } from 'apollo-link'\nimport { onError } from 'apollo-link-error'\nimport { HttpLink } from 'apollo-link-http'\nimport { BASE_URL } from '@src/history'\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData: {\n    __schema: {\n      types: [],\n    },\n  },\n})\n\nexport const errorLink = onError((response) => {\n  const { graphQLErrors, networkError } = response\n  if (graphQLErrors) {\n    graphQLErrors.forEach((gqlError) => {\n      if (gqlError.extensions && gqlError.extensions.code == '401') {\n        console.error('Not Authenticated')\n        window.location.href = '/LoginPage'\n      }\n    })\n  }\n\n  if (networkError) {\n    if (networkError['statusCode'] === 401) {\n      sessionStorage.removeItem('authToken')\n      console.error('Not Authenticated')\n      window.location.href = '/LoginPage'\n    }\n    console.error(`[Network error]: ${networkError}`)\n  }\n})\n\nconst getLink = () => {\n  return concat(authLink, errorLink).concat(\n    new HttpLink({\n      uri: `${BASE_URL}/graphql`,\n      headers: {\n        authorization: `Bearer ${sessionStorage.getItem('authToken')}`,\n      },\n    }),\n  )\n}\nconst authLink = setContext((_, { headers }) => {\n  const token = sessionStorage.getItem('authToken')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  }\n})\n\nexport const client = new AC({\n  link: getLink(),\n  cache: new InMemoryCache({\n    fragmentMatcher,\n  }),\n})\n","import * as React from 'react'\n\ninterface SnackContextProps {\n  messages: Array<string>\n  push: (msg: string) => void\n  consume: (msg: string) => void\n}\nexport const SnackContext = React.createContext<SnackContextProps>({\n  messages: [],\n  push: (msg: string) => {},\n  consume: () => {},\n})\n","import * as React from 'react'\nimport { IconButton, Snackbar, Button } from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\n\ninterface SnackProps {\n  message: string\n  onClose: () => void\n}\nexport const Snack = ({ message, onClose }: SnackProps) => {\n  if (!message) {\n    return null\n  }\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    onClose()\n  }\n\n  // <Button onClick={handleClick}>Open simple snackbar</Button>\n  return (\n    <div>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={true}\n        autoHideDuration={3000}\n        onClose={handleClose}\n        message={message}\n        action={\n          <React.Fragment>\n            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n              UNDO\n            </Button>\n            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n              <Close fontSize=\"small\" />\n            </IconButton>\n          </React.Fragment>\n        }\n      />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { SnackContext } from '@src/App/contexts'\nimport { Snack } from '@src/components/Snack'\n\ninterface SnackProviderProps {\n  children: React.ReactNode\n}\nexport const SnackProvider: React.FC<SnackProviderProps> = ({ children }) => {\n  const [messages, setMessages] = React.useState<Array<string>>([])\n\n  const push = (m: string) => {\n    console.log('pushing', m)\n    setMessages([...messages, m])\n  }\n\n  const consume = () => {\n    console.log('consume')\n    setMessages(messages.slice(0, -1))\n  }\n  return (\n    <SnackContext.Provider\n      value={{\n        messages,\n        push,\n        consume,\n      }}\n    >\n      <Snack message={messages[0]} onClose={consume} />\n      {children}\n    </SnackContext.Provider>\n  )\n}\n","import { Theme, makeStyles, createStyles } from '@material-ui/core'\n\nexport const isWide = window.innerWidth > 600\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    header: {\n      backgroundColor: theme.palette.info.light,\n    },\n    disabled: {\n      opacity: '0.5',\n      backgroundColor: 'rgba(0, 0, 0, 0.12)',\n      cursor: 'not-allowed',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: '100%',\n    },\n  }),\n)\n","import { Button, Grid, TextField } from '@material-ui/core'\nimport * as React from 'react'\nimport { isWide } from '@src/styles'\nimport { useApolloQuery } from '@src/queries/__generated__/ImportWaveTransactions.hooks'\nimport { useApolloQuery as GetLatestImportDate } from '@src/queries/__generated__/GetLatestImportDate.hooks'\n\nconst today = new Date().toISOString().slice(0, 10)\n\nconst ImportButton: React.FC<{ onClose: () => void; startDate: string; endDate: string }> = ({\n  onClose,\n  startDate,\n  endDate,\n}) => {\n  const [importWaveTransactions, { loading }] = useApolloQuery({})\n\n  return (\n    <Button\n      fullWidth={!isWide}\n      onClick={() =>\n        importWaveTransactions({\n          variables: {\n            startDate,\n            endDate,\n          },\n        }).then((res) => {\n          onClose()\n          window.location.reload()\n        })\n      }\n      style={{ marginTop: '10px' }}\n      color=\"primary\"\n      variant=\"contained\"\n    >\n      {loading ? 'importing ...' : 'Import'}\n    </Button>\n  )\n}\n\nexport const ImportForm = (props: { onClose: () => void }) => {\n  const { data } = GetLatestImportDate({})\n  if (!data) return <div></div>\n\n  return <ImportFormComponent onClose={props.onClose} initialStartDate={data.latestImportDate} />\n}\n\nconst ImportFormComponent = (props: { onClose: () => void; initialStartDate: string }) => {\n  const [startDate, setStartDate] = React.useState(props.initialStartDate)\n  const [endDate, setEndDate] = React.useState(today)\n\n  return (\n    <Grid container>\n      <Grid item xs={12} sm={4}>\n        <TextField\n          fullWidth={!isWide}\n          type=\"date\"\n          label=\"from\"\n          value={startDate}\n          onChange={(e) => setStartDate(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12} sm={4}>\n        <TextField\n          fullWidth={!isWide}\n          type=\"date\"\n          label=\"to\"\n          defaultValue={today}\n          onChange={(e) => setEndDate(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12} sm={4}>\n        <ImportButton onClose={props.onClose} startDate={startDate} endDate={endDate} />\n      </Grid>\n    </Grid>\n  )\n}\n","import { TextField, Button, Dialog, DialogContent, DialogTitle, Icon } from '@material-ui/core'\n\nimport * as React from 'react'\n\nimport Autocomplete from '@material-ui/lab/Autocomplete'\n\ninterface DialogSelectProps {\n  choices: Array<{\n    value: string | number\n    iconId?: string\n    label: string\n  }>\n  onSelectOption: (option) => void\n  value: string | null | number\n}\nconst getInitialOption = (\n  value: string | number | null,\n  choices: Array<{\n    value: string | number\n    iconId?: string\n    label: string\n  }>,\n) => {\n  if (!value) return null\n  const option = choices.find((x) => x.value === value)\n  if (!option) {\n    throw new Error(`${value} not found `)\n  }\n\n  return option\n}\nconst isWide = window.innerWidth > 600\nexport const DialogSelect = (props: DialogSelectProps) => {\n  const { choices, value, onSelectOption } = props\n  const [isOpen, setIsOpen] = React.useState(false)\n  const initialOption = getInitialOption(value, choices)\n  return (\n    <div>\n      <Button\n        size={isWide ? 'large' : 'small'}\n        onClick={() => setIsOpen(true)}\n        variant=\"outlined\"\n        color=\"primary\"\n      >\n        {initialOption ? initialOption.label : 'Select a Category'}\n        {initialOption ? <Icon style={{ marginRight: '5px' }}>{initialOption.iconId}</Icon> : null}\n      </Button>\n      <Dialog open={isOpen} fullWidth onClose={() => setIsOpen(false)}>\n        <DialogTitle>Select a Category</DialogTitle>\n        <DialogContent>\n          <Autocomplete\n            options={choices}\n            getOptionLabel={(option) => option.label}\n            getOptionSelected={(option, value) => {\n              return option.value === value.value\n            }}\n            onChange={(event, newValue) => {\n              onSelectOption(newValue)\n              setIsOpen(false)\n            }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Select a category\" margin=\"normal\" />\n            )}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","import querystring from 'querystring'\n\nexport function stringToDate(dateString: string): Date {\n  const [year, month, day] = dateString.split('-').map((v) => parseInt(v))\n  const ret = new Date(year, month - 1, day)\n  return ret\n}\nexport function formatDate(d: string): string {\n  const date = new Date(d)\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC',\n  })\n}\n\nexport const getIsoDateString = (d: Date) => {\n  const year = d.getFullYear()\n  const month = d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1\n  const day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport function getToday(): string {\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth() < 9 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n  const day = today.getDate() < 10 ? '0' + today.getDate() : today.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport interface Identifiable {\n  id: string | number\n}\nexport const mergeArrays = <T extends Identifiable>(\n  existing: Array<T>,\n  incoming: Array<T>,\n  prependOrAppend: 'prepend' | 'append',\n): Array<T> => {\n  return incoming.reduce(\n    function (accumulator: Array<T>, value: T) {\n      const index = existing.findIndex((x) => x.id === value.id)\n      if (index >= 0) {\n        const ret = [\n          ...accumulator.slice(0, index),\n          value,\n          ...accumulator.slice(index + 1, accumulator.length),\n        ]\n        return ret\n      } else {\n        return prependOrAppend === 'append' ? [...accumulator, value] : [value, ...accumulator]\n      }\n    },\n    [...existing],\n  )\n}\n\nexport function parseSearchString(search: string) {\n  const params = querystring.parse(search.split('?')[1])\n  return params\n}\n","import {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  TextField,\n} from '@material-ui/core'\nimport * as React from 'react'\nimport {\n  QUERY as GET_TRANSACTIONS_QUERY,\n  GetTransactions,\n  GetTransactions_categories as ICategory,\n} from '@src/queries/__generated__/GetTransactions.hooks'\nimport { DialogSelect } from '@src/components/DialogSelect'\nimport { useApolloQuery } from '@src/queries/__generated__/CreateTransaction.hooks'\nimport { CreateTransactionInput } from '@src/types/__generated__/globalTypes'\n\nimport { getToday } from '@src/utils'\n\ninterface NewTransactionFormProps {\n  onClose: () => void\n  selectableCategories: Array<ICategory>\n}\n\ntype FieldName =\n  | 'issuedDate'\n  | 'merchantName'\n  | 'notes'\n  | 'categoryId'\n  | 'totalAmount'\n  | 'balanceAdjust'\n\nconst fieldConfig = {\n  issuedDate: { type: 'date', required: true },\n  merchantName: { type: 'text', required: true },\n  notes: { type: 'text', required: false },\n  categoryId: { type: 'number', required: false },\n  balanceAdjust: { type: 'number', required: false },\n  totalAmount: { type: 'number', required: true },\n}\n\nconst FieldInput = (props: {\n  fieldName: FieldName\n  updateField: (fieldName) => (event) => void\n  instance: CreateTransactionInput\n}) => {\n  const { fieldName, updateField, instance } = props\n  const config = fieldConfig[fieldName]\n  let error = false\n  if (config.required && !instance[fieldName]) {\n    error = true\n  } else if (config.required && config.type === 'number' && !instance[fieldName]) {\n    error = true\n  }\n\n  return (\n    <TextField\n      type={config.type}\n      required={config.required}\n      error={error}\n      label={fieldName}\n      value={instance[fieldName]}\n      onChange={updateField(fieldName)}\n    />\n  )\n}\nconst initialForm: CreateTransactionInput = {\n  issuedDate: getToday(),\n  merchantName: '',\n  notes: '',\n  categoryId: null,\n  totalAmount: '0',\n  balanceAdjust: '0',\n}\n\nexport const NewTransactionForm: React.FC<NewTransactionFormProps> = (props) => {\n  const { selectableCategories, onClose } = props\n  const [formData, setFormData] = React.useState<CreateTransactionInput>(initialForm)\n  const [createTransaction, { error, loading }] = useApolloQuery({\n    update(cache, { data }) {\n      const variables = {\n        // TODO: send real offset and limit\n        filters: { offset: 0, limit: 40 },\n      }\n      if (data?.createTransaction?.isOk) {\n        const cached = cache.readQuery<GetTransactions>({\n          query: GET_TRANSACTIONS_QUERY,\n          variables,\n        })\n        cache.writeQuery({\n          query: GET_TRANSACTIONS_QUERY,\n          data: Object.assign({}, cached, {\n            transactions: [data.createTransaction.transaction, ...cached!.transactions],\n          }),\n          variables,\n        })\n      }\n    },\n  })\n\n  if (error) {\n    return <div>{error.message}</div>\n  }\n\n  const createNewTransaction = () => {\n    createTransaction({\n      variables: {\n        input: {\n          issuedDate: formData.issuedDate,\n          totalAmount: formData.totalAmount,\n          merchantName: formData.merchantName,\n          balanceAdjust: formData.balanceAdjust || '0',\n          categoryId: formData.categoryId,\n          notes: formData.notes,\n        },\n      },\n    })\n    onClose()\n  }\n  const updateField = (fieldName: FieldName) => {\n    const old = formData\n    return (event) => {\n      const newState = Object.assign({}, old, {\n        [fieldName]: event.target.value,\n      })\n      setFormData(newState)\n    }\n  }\n  const isValid = () => {\n    const t = formData\n    return [t.issuedDate, t.merchantName, +t.totalAmount].every(Boolean)\n  }\n  const transaction = formData\n  return (\n    <div style={{ paddingTop: '10px' }}>\n      <ExpansionPanel expanded={true}>\n        <ExpansionPanelSummary>\n          <Grid container spacing={10}>\n            <Grid item xs={6} sm={4}>\n              <FieldInput instance={transaction} fieldName=\"issuedDate\" updateField={updateField} />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                fieldName=\"merchantName\"\n                instance={transaction}\n                updateField={updateField}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                fieldName=\"totalAmount\"\n                instance={transaction}\n                updateField={updateField}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <DialogSelect\n                value={transaction.categoryId || ''}\n                onSelectOption={(option) => {\n                  const newState = Object.assign({}, formData, {\n                    categoryId: option.value,\n                  })\n                  setFormData(newState)\n                }}\n                choices={selectableCategories.map((cat) => {\n                  return {\n                    value: cat.id,\n                    label: cat.description,\n                    iconId: cat.iconId || '',\n                  }\n                })}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput fieldName=\"notes\" instance={transaction} updateField={updateField} />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                fieldName=\"balanceAdjust\"\n                instance={transaction}\n                updateField={updateField}\n              />\n            </Grid>\n          </Grid>\n        </ExpansionPanelSummary>\n        <Divider />\n        <ExpansionPanelActions>\n          <Button\n            size=\"small\"\n            onClick={() => {\n              setFormData(initialForm)\n              onClose()\n            }}\n          >\n            Cancel\n          </Button>\n          <Button size=\"small\" color=\"primary\" onClick={createNewTransaction} disabled={!isValid()}>\n            {loading ? `saving ...` : `Save`}\n          </Button>\n        </ExpansionPanelActions>\n      </ExpansionPanel>\n    </div>\n  )\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Menu from '@material-ui/core/Menu'\n\ninterface SimpleMenuProps {\n  buttonText: React.ReactNode\n  children: React.ReactNode\n}\nconst SimpleMenu: React.FC<SimpleMenuProps> = ({ children, buttonText }) => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  return (\n    <div>\n      <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n        {buttonText}\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {children}\n      </Menu>\n    </div>\n  )\n}\nexport default SimpleMenu\n","import {\n  useLocation as useReactRouterLocation,\n  useHistory as useReactRouterHistory,\n} from 'react-router-dom'\nimport { parseSearchString } from '@src/utils'\n\ninterface SearchFilters {\n  batchId?: number\n  checkpointId?: number\n  searchText?: string\n  categoryId?: number\n  sharedOnly?: boolean\n  uncategorizedOnly?: boolean\n}\nexport const useHistory = () => {\n  const history = useReactRouterHistory()\n  const push = (pathname: string, filters?: SearchFilters) => {\n    const qs = JSON.stringify(filters)\n    history.push(`${pathname}?filters=${qs}`)\n  }\n  return { _history: history, push }\n}\n\nexport const useLocation = () => {\n  const location = useReactRouterLocation()\n  const params = parseSearchString(location.search)\n  let filters: SearchFilters = {}\n  if (params && params.filters) {\n    filters = JSON.parse(params.filters as string)\n  }\n  return { ...location, filters }\n}\n","import * as React from 'react'\nimport {\n  DialogContentText,\n  DialogTitle,\n  Icon,\n  InputLabel,\n  IconButton,\n  FormControl,\n  MenuItem,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  Select,\n  Dialog,\n  DialogActions,\n  DialogContent,\n} from '@material-ui/core'\nimport { useHistory, useLocation } from '@src/App/hooks'\n\ninterface Prop {\n  categoryChoices: Array<{ id: number; label: string }>\n}\n\nexport const FilterDialog: React.FC<Prop> = ({ categoryChoices }) => {\n  const history = useHistory()\n  const location = useLocation()\n\n  const filters = location.filters\n  const [open, setOpen] = React.useState(false)\n  const [batchId, setBatchId] = React.useState(location.filters.batchId)\n  const [sharedOnly, setSharedOnly] = React.useState(filters.sharedOnly)\n  const [uncategorizedOnly, setUncategorizedOnly] = React.useState(filters.uncategorizedOnly)\n  const [searchText, setSearchText] = React.useState(filters.searchText)\n  const [categoryId, setCategoryId] = React.useState(filters.categoryId)\n\n  const clearFilters = () => {\n    setBatchId(undefined)\n    setSharedOnly(undefined)\n    setUncategorizedOnly(undefined)\n    setSearchText(undefined)\n    setCategoryId(undefined)\n  }\n  const resetFilters = () => {\n    setBatchId(filters.batchId)\n    setSharedOnly(filters.sharedOnly)\n    setSearchText(filters.searchText)\n    setCategoryId(filters.categoryId)\n    setUncategorizedOnly(filters.uncategorizedOnly)\n  }\n\n  const handleClickOpen = () => {\n    resetFilters()\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  if (!open) {\n    return (\n      <IconButton onClick={handleClickOpen}>\n        <Icon color=\"primary\">filter_alt</Icon>\n      </IconButton>\n    )\n  }\n  return (\n    <div>\n      <IconButton onClick={handleClickOpen}>\n        <Icon color=\"primary\">filter_alt</Icon>\n      </IconButton>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Filter Transactions</DialogTitle>\n        {open ? (\n          <DialogContent>\n            <DialogContentText>\n              Search transactions by category, text (merchant name and notes). By checking \"Shared\",\n              you can limit the results to be shared transactions only.\n            </DialogContentText>\n            <FormControl style={{ minWidth: 120 }}>\n              <InputLabel>Category</InputLabel>\n              <Select\n                id=\"categoryId\"\n                value={categoryId || ''}\n                onChange={(e) => setCategoryId(parseInt(e.target.value as string))}\n              >\n                <MenuItem value={''}>None</MenuItem>\n                {categoryChoices.map((choice) => (\n                  <MenuItem key={choice.id} value={choice.id}>\n                    {choice.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <TextField\n              onChange={(e) => setSearchText(e.target.value)}\n              value={searchText || ''}\n              margin=\"dense\"\n              id=\"searchText\"\n              label=\"Text Search\"\n              type=\"text\"\n              fullWidth\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={sharedOnly}\n                  onChange={(e) => setSharedOnly(e.target.checked)}\n                  name=\"sharedOnly\"\n                />\n              }\n              label=\"Shared\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={uncategorizedOnly}\n                  onChange={(e) => setUncategorizedOnly(e.target.checked)}\n                  name=\"uncategorizedOnly\"\n                />\n              }\n              label=\"Uncategorized\"\n            />\n          </DialogContent>\n        ) : null}\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={clearFilters} color=\"primary\">\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              history.push('/TransactionList', {\n                batchId,\n                searchText,\n                sharedOnly,\n                categoryId,\n                uncategorizedOnly,\n              })\n              handleClose()\n            }}\n            color=\"primary\"\n          >\n            Apply\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Add, AttachMoney, History, Waves } from '@material-ui/icons'\nimport * as React from 'react'\nimport IconMenu from '@src/components/IconMenu'\nimport { FilterDialog } from '@src/TransactionList/FilterDialog'\n\ninterface Prop {\n  balance: string\n  showForm: (formType: string) => void\n  toggleTimeline: () => void\n  categoryChoices: Array<{ id: number; label: string }>\n}\n\nexport const TransactionListAppBar = (props: Prop) => {\n  const { categoryChoices } = props\n  const showNewTransactionForm = () => {\n    props.showForm('transaction')\n  }\n\n  const showWaveImportForm = () => {\n    props.showForm('wave')\n  }\n\n  const toggleTimeline = () => {\n    props.toggleTimeline()\n  }\n\n  return (\n    <AppBar position=\"static\" color=\"transparent\">\n      <Toolbar>\n        <Tooltip title=\"Timeline\">\n          <IconButton onClick={toggleTimeline}>\n            <History />\n          </IconButton>\n        </Tooltip>\n        {props.balance ? (\n          <Typography variant=\"body1\" key=\"balance\">{`Balance: $${props.balance}`}</Typography>\n        ) : null}\n        <div style={{ flex: 1 }} />\n        <FilterDialog categoryChoices={categoryChoices} />\n        <IconMenu buttonText={<Add />}>\n          <MenuItem key=\"new-transaction-menu\" onClick={showNewTransactionForm}>\n            <ListItemIcon>\n              <AttachMoney />\n            </ListItemIcon>\n            <ListItemText>Transaction</ListItemText>\n          </MenuItem>\n          <MenuItem key=\"new-wave-menu\" onClick={showWaveImportForm}>\n            <ListItemIcon>\n              <Waves color=\"primary\" />\n            </ListItemIcon>\n            <ListItemText>Wave Import</ListItemText>\n          </MenuItem>\n        </IconMenu>\n        <IconButton\n          onClick={() => {\n            sessionStorage.removeItem('authToken')\n            window.location.href = '/'\n          }}\n        >\n          <Icon className=\"material-icons\">exit_to_app</Icon>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import * as React from 'react'\n\nimport { ButtonGroup, Button, Typography } from '@material-ui/core'\nimport { useApolloQuery } from '@src/queries/__generated__/AcceptPrediction.hooks'\nimport { GetTransactions_categories as ICategory } from '@src/queries/__generated__/GetTransactions.hooks'\n\ninterface SmartCatProp {\n  predicatedSplit: boolean | null\n  predicatedCategory: number | null\n  transactionId: number\n  openCategoryDialog: () => void\n\n  selectableCategories: Array<ICategory>\n}\nconst isWide = window.innerWidth > 600\nexport const SmartCatField: React.FC<SmartCatProp> = (props) => {\n  const {\n    predicatedSplit,\n    selectableCategories,\n    predicatedCategory,\n    transactionId,\n    openCategoryDialog,\n  } = props\n\n  const category = selectableCategories.find((x) => x.id === predicatedCategory)\n  if (!category) {\n    throw new Error('cannot find predicated category')\n  }\n\n  const [acceptPrediction, { loading, error }] = useApolloQuery({\n    variables: { id: transactionId },\n  })\n  const split = predicatedSplit ? 'Split ' : ''\n  if (error) return <div>{error.message}</div>\n  if (loading) return <div>saving...</div>\n  return (\n    <div>\n      <Typography variant={isWide ? 'body1' : 'caption'}>{`${split}${category.name}?`}</Typography>\n      <ButtonGroup aria-label=\"outlined primary button group\">\n        <Button size=\"small\" onClick={(e) => acceptPrediction()} variant=\"contained\">\n          YES\n        </Button>\n        <Button\n          size=\"small\"\n          onClick={(e) => openCategoryDialog()}\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          NO\n        </Button>\n      </ButtonGroup>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Link, TypographyProps, Typography } from '@material-ui/core'\n\nconst isWide = window.innerWidth > 600\n\nexport const ResponsiveLabel = (props: TypographyProps) => {\n  return <Typography variant={isWide ? 'body1' : 'caption'} {...props} />\n}\ninterface ResponsiveLinkProps extends TypographyProps {\n  disabled?: boolean\n}\n\nexport const ResponsiveLink = (props: ResponsiveLinkProps) => {\n  const { onClick, children, disabled, ...rest } = props\n  return (\n    <ResponsiveLabel {...rest}>\n      {disabled === true ? (\n        children\n      ) : (\n        <Link color={rest.color} onClick={onClick}>\n          {children}\n        </Link>\n      )}\n    </ResponsiveLabel>\n  )\n}\n","import * as React from 'react'\nimport {\n  AppBar,\n  ListItemSecondaryAction,\n  Icon,\n  TextField,\n  ListItemText,\n  List,\n  ListItem,\n  Toolbar,\n  IconButton,\n  Typography,\n  Button,\n  Dialog,\n  DialogContent,\n} from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\n\nimport { SmartCatField } from './SmartCatField'\nimport { useStyles } from '@src/styles'\nimport { ResponsiveLink } from '@src/components/ResponsiveLabel'\nimport {\n  GetTransactions_categories as ICategory,\n  GetTransactions_transactions as IUserTransaction,\n} from '@src/queries/__generated__/GetTransactions.hooks'\n\nimport { useApolloQuery } from '@src/queries/__generated__/CategorizeTransaction.hooks'\n\ninterface CategoryFieldProp {\n  transaction: IUserTransaction\n  selectableCategories: Array<ICategory>\n}\n\nexport const CategoryField: React.FC<CategoryFieldProp> = ({\n  selectableCategories,\n  transaction,\n}) => {\n  const [showDialog, setShowDialog] = React.useState(false)\n\n  const category = selectableCategories.find((x) => x.id === transaction.categoryId)\n  const categoryName = category ? category.name : '????'\n\n  return (\n    <div>\n      {!transaction.categoryId && transaction.predicatedCategory ? (\n        <SmartCatField\n          openCategoryDialog={() => setShowDialog(true)}\n          predicatedSplit={transaction.predicatedSplit}\n          predicatedCategory={transaction.predicatedCategory}\n          selectableCategories={selectableCategories}\n          transactionId={transaction.id}\n        />\n      ) : (\n        <ResponsiveLink\n          color=\"textPrimary\"\n          disabled={!transaction.editable}\n          onClick={() => setShowDialog(true)}\n        >\n          {categoryName}\n        </ResponsiveLink>\n      )}\n      {showDialog ? (\n        <CategoryDialogSelect\n          transactionId={transaction.id}\n          selectableCategories={selectableCategories}\n          selected={transaction.categoryId}\n          showDialog={showDialog}\n          setShowDialog={setShowDialog}\n        />\n      ) : null}\n    </div>\n  )\n}\n\ninterface CategoryDialogSelectProps {\n  setShowDialog: (boolean) => void\n  showDialog: boolean\n  selected: number | null\n  transactionId: number\n  selectableCategories: Array<ICategory>\n}\nconst CategoryDialogSelect: React.FC<CategoryDialogSelectProps> = ({\n  showDialog,\n  setShowDialog,\n  selected,\n  transactionId,\n  selectableCategories,\n}) => {\n  const initialTextValue = selectableCategories.find((c) => c.id === selected)?.name || ''\n  const classes = useStyles()\n  const [categorizeTransaction, { loading }] = useApolloQuery({})\n  const [textValue, setTextValue] = React.useState<string>(initialTextValue)\n\n  const choices =\n    !textValue.length || textValue === initialTextValue\n      ? selectableCategories\n      : selectableCategories.filter((c) => c.name.includes(textValue.toUpperCase()))\n  return (\n    <Dialog fullScreen={true} onClose={() => setShowDialog(false)} open={showDialog}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={() => setShowDialog(false)}\n            aria-label=\"close\"\n          >\n            <Close />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Select a Category\n          </Typography>\n          <Button autoFocus color=\"inherit\" onClick={() => setShowDialog(false)}>\n            Cancel\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <DialogContent>\n        {loading ? (\n          <div>loading...</div>\n        ) : (\n          <TextField\n            value={textValue}\n            onChange={(e) => {\n              setTextValue(e.target.value)\n            }}\n            variant=\"outlined\"\n          />\n        )}\n        <List>\n          {choices.map((c) => (\n            <ListItem\n              key={c.id}\n              button\n              selected={c.id === selected}\n              onClick={(e) =>\n                categorizeTransaction({\n                  variables: {\n                    id: transactionId,\n                    categoryId: c.id,\n                  },\n                }).then(() => setShowDialog(false))\n              }\n            >\n              <ListItemText>{c.name}</ListItemText>\n              <ListItemSecondaryAction>\n                <Icon color=\"action\">{c.iconId}</Icon>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { TextField } from '@material-ui/core'\n\ninterface IDebouncedTextField {\n  helperText?: string\n  onBounce: (newValue) => void\n  setter: (newValue) => void\n  type?: string\n  value?: any\n  loading?: boolean\n  fullWidth?: boolean\n  label?: string\n}\n\nexport const DebouncedTextField: React.FunctionComponent<IDebouncedTextField> = ({\n  helperText,\n  setter,\n  onBounce,\n  label,\n  type,\n  value,\n  loading,\n  fullWidth,\n}) => {\n  const debounced = React.useCallback(_.debounce(onBounce, 1000), [])\n\n  return (\n    <TextField\n      variant=\"outlined\"\n      error={!!loading}\n      fullWidth={fullWidth}\n      label={label}\n      helperText={loading ? 'saving ...' : helperText}\n      type={type}\n      onChange={(event) => {\n        setter(event.target.value)\n        debounced(event.target.value)\n      }}\n      value={value}\n    />\n  )\n}\n","import * as React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Slider from '@material-ui/core/Slider'\nimport { useApolloQuery } from '@src/queries/__generated__/UpdateTransaction.hooks'\nimport { DebouncedTextField } from '@src/components/DebouncedTextField'\n\nconst PrettoSlider = withStyles({\n  root: {\n    color: '#3f51b5',\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider)\n\nconst getPercentage = (balance: number, total: number) => {\n  return Number(((balance / total) * 100).toFixed(2))\n}\n\nexport const BalanceAdjustField = (props: {\n  transactionId\n  total: number\n  balanceAdjust: number\n}) => {\n  const [balanceAdjust, setBalanceAdjust] = React.useState<number>(props.balanceAdjust)\n  const [percentage, setPercentage] = React.useState<number>(\n    getPercentage(balanceAdjust, props.total),\n  )\n  const [updateTransaction, { loading, error }] = useApolloQuery({})\n\n  const handleSliderChange = (event: any, newPercentage: number) => {\n    const newBalanceAdjust = (newPercentage * props.total) / 100\n    setPercentage(newPercentage)\n    setBalanceAdjust(newBalanceAdjust)\n    updateTransaction({\n      variables: {\n        input: {\n          id: props.transactionId,\n          balanceAdjust: newBalanceAdjust.toString(),\n        },\n      },\n    })\n  }\n  if (error) return <div>{error.message}</div>\n\n  return (\n    <div>\n      <Typography color=\"textSecondary\" id=\"input-slider\" gutterBottom>\n        Balance Adjust\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={9}>\n          <PrettoSlider\n            style={{ marginTop: '1.5rem' }}\n            value={typeof percentage === 'number' ? percentage : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n            defaultValue={0}\n            min={-100}\n            max={100}\n            step={null}\n            valueLabelDisplay=\"on\"\n            marks={[\n              { value: -100, label: '-100%' },\n              { value: -50, label: '-50%' },\n              { value: 0, label: '0%' },\n              { value: 50, label: '50%' },\n              { value: 100, label: '100%' },\n            ]}\n            valueLabelFormat={(value: number) => `${value}%`}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <div style={{ paddingBottom: '2rem' }}>\n            <DebouncedTextField\n              type=\"number\"\n              loading={loading}\n              value={balanceAdjust}\n              setter={(newValue) => {\n                setBalanceAdjust(newValue)\n                setPercentage((Number(newValue) / props.total) * 100)\n              }}\n              onBounce={(newValue) => {\n                updateTransaction({\n                  variables: {\n                    input: { id: props.transactionId, balanceAdjust: newValue as string },\n                  },\n                })\n              }}\n            />\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Grid } from '@material-ui/core'\nimport { useApolloQuery } from '@src/queries/__generated__/GetEventLogs.hooks'\n\ninterface IEventLogProps {\n  transactionId: number\n}\nexport const EventLog = (props: IEventLogProps) => {\n  const { data } = useApolloQuery({\n    variables: {\n      filters: {\n        offset: 0,\n        limit: 10,\n        entityId: props.transactionId.toString(),\n      },\n    },\n  })\n  if (data) {\n    return (\n      <div>\n        {data.eventLogs.map((log) => (\n          <div key={log.id}>\n            <Grid container spacing={10}>\n              <Grid item xs={3} sm={3}>\n                <div>{log.eventName}</div>\n              </Grid>\n              <Grid item xs={3} sm={3}>\n                <div>{log.createdTs}</div>\n              </Grid>\n              <Grid item xs={6} sm={6}>\n                <div>\n                  {log.changes.map((change, index) => (\n                    <div key={index}>{change}</div>\n                  ))}\n                </div>\n              </Grid>\n            </Grid>\n          </div>\n        ))}\n      </div>\n    )\n  }\n  return <div />\n}\n","import { Card, Collapse, CardHeader, CardContent, Fab, Grid, Typography } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport { useMutation } from '@apollo/react-hooks'\nimport * as _ from 'lodash'\nimport * as React from 'react'\nimport { CategoryField } from './CategoryField'\nimport { BalanceAdjustField } from './BalanceAdjustField'\nimport { EventLog } from './EventLog'\nimport { useStyles } from '@src/styles'\nimport { ResponsiveLink, ResponsiveLabel } from '@src/components/ResponsiveLabel'\nimport {\n  QUERY as MUTATION,\n  UpdateTransaction,\n  UpdateTransactionVariables,\n} from '@src/queries/__generated__/UpdateTransaction.hooks'\nimport {\n  QUERY as GET_TRANSACTIONS_QUERY,\n  GetTransactions,\n  GetTransactions_categories,\n  GetTransactions_transactions as GetTransactions_transaction,\n} from '@src/queries/__generated__/GetTransactions.hooks'\nimport { DebouncedTextField } from '@src/components/DebouncedTextField'\nimport { formatDate } from '@src/utils'\n\nimport {\n  QUERY as ARCHIVE_TRANSACTION_MUTATION,\n  ArchiveTransaction,\n  ArchiveTransactionVariables,\n} from '@src/queries/__generated__/ArchiveTransaction.hooks'\n\ninterface ITransactionRowProps {\n  transaction: GetTransactions_transaction\n  expanded: boolean\n  selectableCategories: Array<GetTransactions_categories>\n  onToggleExpansion: (event) => void\n  showDate: boolean\n}\n\nexport const TransactionRowComponent = (props: ITransactionRowProps) => {\n  const classes = useStyles()\n\n  const { showDate, selectableCategories, transaction, expanded, onToggleExpansion } = props\n  const [notes, setNotes] = React.useState(transaction.notes)\n\n  const [updateTransaction, { loading }] = useMutation<\n    UpdateTransaction,\n    UpdateTransactionVariables\n  >(MUTATION)\n  const [archiveTransaction] = useMutation<ArchiveTransaction, ArchiveTransactionVariables>(\n    ARCHIVE_TRANSACTION_MUTATION,\n    {\n      update(cache, { data }) {\n        const variables = {\n          // TODO: send real offset and limit\n          filters: { offset: 0, limit: 40 },\n        }\n        if (data?.archiveTransaction?.isOk) {\n          const cached = cache.readQuery<GetTransactions>({\n            query: GET_TRANSACTIONS_QUERY,\n            variables,\n          })\n          const removed = [...cached!.transactions]\n          _.remove(removed, (t) => t.id === transaction.id)\n          cache.writeQuery({\n            query: GET_TRANSACTIONS_QUERY,\n            data: Object.assign({}, cached, { transactions: removed }),\n            variables,\n          })\n        }\n      },\n    },\n  )\n\n  return (\n    <div>\n      <Card style={showDate ? { marginTop: '1rem' } : undefined}>\n        {showDate ? (\n          <CardHeader className={classes.header} title={formatDate(transaction.issuedDate)} />\n        ) : null}\n        <CardContent className={!transaction.editable ? classes.disabled : undefined}>\n          <Grid container spacing={10}>\n            <Grid item xs={4} sm={4}>\n              <CategoryField\n                transaction={transaction}\n                selectableCategories={selectableCategories}\n              />\n            </Grid>\n            <Grid item xs={5} sm={4}>\n              <ResponsiveLink\n                color=\"textPrimary\"\n                disabled={!transaction.editable}\n                onClick={onToggleExpansion}\n              >\n                {transaction.merchantName}\n              </ResponsiveLink>\n              <div>\n                <ResponsiveLabel color=\"textSecondary\">{transaction.notes}</ResponsiveLabel>\n              </div>\n            </Grid>\n            <Grid item xs={3} sm={4}>\n              <div style={{ float: 'right' }}>\n                <ResponsiveLabel>{`${transaction.totalAmount}`}</ResponsiveLabel>\n                <Typography\n                  variant=\"subtitle2\"\n                  style={{\n                    color: +transaction.balanceAdjust > 0 ? 'green' : 'red',\n                  }}\n                >\n                  {`${transaction.balanceAdjust}`}\n                </Typography>\n              </div>\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Collapse style={{ margin: '1rem' }} in={expanded} unmountOnExit>\n          <Grid container spacing={1}>\n            <Grid item xs={12} sm={12}>\n              <BalanceAdjustField\n                transactionId={transaction.id}\n                balanceAdjust={Number(transaction.balanceAdjust)}\n                total={parseFloat(transaction.totalAmount)}\n              />\n            </Grid>\n            <Grid item xs={10} sm={11}>\n              <DebouncedTextField\n                fullWidth={true}\n                loading={loading}\n                label=\"Notes\"\n                value={notes}\n                setter={(newValue) => {\n                  setNotes(newValue)\n                }}\n                onBounce={(newValue) =>\n                  updateTransaction({\n                    variables: { input: { id: transaction.id, notes: newValue as string } },\n                  })\n                }\n              />\n            </Grid>\n            <Grid item xs={2} sm={1} style={{ textAlign: 'right' }}>\n              <Fab\n                size=\"medium\"\n                color=\"secondary\"\n                aria-label=\"Delete\"\n                onClick={() =>\n                  archiveTransaction({\n                    variables: {\n                      id: transaction.id,\n                    },\n                  })\n                }\n              >\n                <Delete />\n              </Fab>\n            </Grid>\n            <Grid item xs={12} sm={12}>\n              <EventLog transactionId={transaction.id}></EventLog>\n            </Grid>\n          </Grid>\n        </Collapse>\n      </Card>\n    </div>\n  )\n}\nconst areEqual = (last: ITransactionRowProps, next: ITransactionRowProps) => {\n  if (\n    _.isEqual(last.transaction, next.transaction) &&\n    last.expanded === next.expanded &&\n    last.selectableCategories.length === next.selectableCategories.length\n  ) {\n    return true\n  }\n  return false\n}\nconst TransactionRow = React.memo(TransactionRowComponent, areEqual)\n\n/*\n * This is a wrapper component that is used to control the expansion states of\n * the rows. We do not want a compolicated component to manage the expansion\n * state becaue the rerending will be too expensive.\n */\nexport const TransactionRows: React.FC<{\n  categories: Array<GetTransactions_categories>\n  transactions: Array<GetTransactions_transaction>\n}> = (props) => {\n  const [expanded, setExpanded] = React.useState<number | null>(null)\n  const handleChange = (eventId: number) => (event: React.ChangeEvent<{}>) => {\n    if (eventId === expanded) {\n      return setExpanded(null)\n    }\n    setExpanded(eventId)\n  }\n  return (\n    <>\n      {props.transactions.map((t, index) => {\n        let showDate = false\n        if (index > 0) {\n          const prev = props.transactions[index - 1]\n          showDate = prev.issuedDate !== t.issuedDate\n        } else {\n          // First transaction always show date\n          showDate = true\n        }\n        return (\n          <TransactionRow\n            showDate={showDate}\n            selectableCategories={props.categories.filter((c) => c.is_selectable)}\n            expanded={expanded === t.id}\n            key={t.id}\n            transaction={t}\n            onToggleExpansion={handleChange(t.id)}\n          />\n        )\n      })}\n    </>\n  )\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const isDarkMode = sessionStorage.getItem('colorTheme') === 'dark'\n\nexport const theme = createMuiTheme({\n  palette: {\n    type: isDarkMode ? 'dark' : 'light',\n  },\n})\n","import * as React from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport {\n  ListItemSecondaryAction,\n  ButtonGroup,\n  Button,\n  Tooltip,\n  Icon,\n  ListItemIcon,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core'\nimport { getEventButtonIcon, getEventIcon, getEventDescription } from './utils'\nimport { IEvent, ICheckPoint } from './types'\nimport GET_EVENTS from '@src/queries/GetEvents.graphql'\nimport { SnackContext } from '@src/App/contexts'\nimport { theme } from '@src/theme'\nimport {\n  QUERY as SIGN_CHECKPOINT_MUTATION,\n  SignCheckpoint,\n  SignCheckpointVariables,\n} from '@src/queries/__generated__/SignCheckpoint.hooks'\nimport { BASE_URL } from '@src/history'\nimport { useHistory, useLocation } from '@src/App/hooks'\n\nexport const EventRow = (props: { event: IEvent }) => {\n  const location = useLocation()\n  const history = useHistory()\n\n  const { event } = props\n  const disabled = location.filters.batchId === event.id\n  if (event.eventType === 'CHECKPOINT') {\n    return <CheckpointListItem disabled={disabled} checkpoint={event as ICheckPoint} />\n  }\n  const eventIcon = getEventIcon(event)\n  const onFilterBatch = () => {\n    history.push(`/TransactionList`, { batchId: event.id })\n  }\n  const eventButtonIcon = getEventButtonIcon(event)\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilterBatch}>\n      <ListItemIcon>\n        <Tooltip title={event.eventType || ''}>\n          <Icon>{eventIcon}</Icon>\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(event.createdTs).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{getEventDescription(event)}</Typography>\n      </ListItemText>\n      {eventButtonIcon ? (\n        <ListItemSecondaryAction>\n          <Button>\n            <Icon>{eventButtonIcon}</Icon>\n          </Button>\n        </ListItemSecondaryAction>\n      ) : null}\n    </ListItem>\n  )\n}\n\nexport const CheckpointListItem: React.FC<{\n  disabled: boolean\n  checkpoint: ICheckPoint\n}> = ({ checkpoint, disabled }) => {\n  const snackbar = React.useContext(SnackContext)\n  const history = useHistory()\n  // Set id to 0 if it's virtual\n  const checkpointId = checkpoint['isVirtual'] ? 0 : checkpoint.id\n\n  const [signCheckpoint, { loading }] = useMutation<SignCheckpoint, SignCheckpointVariables>(\n    SIGN_CHECKPOINT_MUTATION,\n    {\n      refetchQueries: [{ query: GET_EVENTS }],\n    },\n  )\n  const onFilter = () => {\n    history.push('/TransactionList', {\n      checkpointId,\n    })\n  }\n  const description = checkpoint.signedTs\n    ? `balance: ${checkpoint.signedBalance}  Signed at ${new Date(\n        checkpoint.signedTs,\n      ).toLocaleDateString()}`\n    : 'Not Signed'\n\n  if (loading) {\n    return <div>Signing ...</div>\n  }\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={checkpoint.eventType || ''}>\n          {checkpoint.signedTs ? (\n            <Icon>toll</Icon>\n          ) : (\n            <Icon style={{ color: theme.palette.success.main }}>fiber_new</Icon>\n          )}\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(checkpoint.createdTs).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{description}</Typography>\n      </ListItemText>\n      <ListItemSecondaryAction>\n        <ButtonGroup\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          aria-label=\"Small outlined button group\"\n        >\n          {checkpoint.signedTs ? null : (\n            <Button\n              size=\"small\"\n              color=\"secondary\"\n              onClick={() =>\n                signCheckpoint({\n                  variables: {\n                    id: checkpointId,\n                  },\n                }).then(\n                  () => {},\n                  (e) => snackbar.push(e.message),\n                )\n              }\n            >\n              <Icon>plus_one</Icon>\n            </Button>\n          )}\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            disabled={!sessionStorage.getItem('authToken')}\n            onClick={() => {\n              window.open(\n                `${BASE_URL}/checkpoint/${checkpoint.id}?token=${sessionStorage.getItem(\n                  'authToken',\n                )}`,\n                '_blank',\n              )\n            }}\n          >\n            <Icon>cloud_download</Icon>\n          </Button>\n        </ButtonGroup>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n","import { IBatch, ICheckPoint, IEvent } from './types'\n\nexport const getEventDescription = (e: IEvent) => {\n  if (e.eventType === 'CHECKPOINT') {\n    const checkpoint = e as ICheckPoint\n    return checkpoint.signedTs\n      ? `balance: ${checkpoint.signedBalance}  Signed at ${new Date(\n          checkpoint.signedTs,\n        ).toLocaleDateString()}`\n      : 'Not Signed'\n  }\n  const batch: IBatch = e as IBatch\n  // bank uploads\n  if (batch.origin != 'wave') {\n    return `${batch.origin}: ${batch.startDate} TO ${batch.endDate}`\n  }\n  // Imported from wave or plaid\n  if (e.eventType === 'BATCH_IMPORT') {\n    const batch_import = e as IBatch\n    return `${batch_import.origin}: ${batch_import.startDate.slice(\n      0,\n      10,\n    )} TO ${batch_import.endDate.slice(0, 10)}`\n  }\n\n  throw new Error('not possible')\n}\nexport const getEventIcon = (event: IEvent) => {\n  if (event.eventType === 'CHECKPOINT') {\n    return 'toll'\n  }\n  const batch: IBatch = event as IBatch\n  // bank uploads\n  if (batch.origin != 'wave') {\n    return 'cloud_upload'\n  }\n  if (batch.eventType === 'BATCH_IMPORT') {\n    const batch_import = batch\n    return { plaid: 'grid_on', wave: 'waves' }[batch_import.origin]\n  }\n  throw new Error('not possible')\n}\n\nexport const getEventButtonIcon = (event: IEvent) => {\n  if (event.eventType === 'CHECKPOINT') {\n    return 'plus_one'\n  }\n  return null\n}\n","import { LinearProgress, List } from '@material-ui/core'\nimport * as React from 'react'\nimport { EventRow } from './EventRow'\nimport { useApolloQuery } from '@src/queries/__generated__/GetEvents.hooks'\n\ninterface Prop {}\nexport const Timeline: React.FC<Prop> = () => {\n  const { loading, error, data } = useApolloQuery()\n  if (loading) return <LinearProgress />\n  if (error) return <p>Error :(</p>\n  if (!data) throw new Error('bad')\n  const events = [...data.checkpoints, ...data.batches]\n  events.sort((a, b) => {\n    // Latest first\n    return Date.parse(b.createdTs) - Date.parse(a.createdTs)\n  })\n  return (\n    <div>\n      <List>\n        {events.map((e, index) => {\n          return e ? <EventRow event={e} key={index} /> : null\n        })}\n      </List>\n    </div>\n  )\n}\n","import { Paper, LinearProgress, Button, Grid } from '@material-ui/core'\nimport * as React from 'react'\nimport { ImportForm } from './ImportForm'\n\nimport { NewTransactionForm } from './NewTransactionForm'\nimport { TransactionListAppBar } from './TransactionListAppBar'\nimport { TransactionRows } from './TransactionRow'\nimport { useLocation } from '@src/App/hooks'\nimport { useApolloQuery } from '@src/queries/__generated__/GetTransactions.hooks'\nimport { Timeline } from '@src/App/Timeline'\n\ntype FormType = 'transaction' | 'wave'\n\nconst limit = 40\nconst isWide = window.innerWidth > 600\n\nexport const TransactionList = () => {\n  const location = useLocation()\n\n  const [showTimeline, setShowTimeline] = React.useState(isWide)\n  const [formType, setFormType] = React.useState<FormType | null>(null)\n  const filters = location.filters\n\n  const { loading: isTransactionLoading, data, fetchMore } = useApolloQuery({\n    variables: {\n      filters: {\n        offset: 0,\n        limit,\n        ...filters,\n      },\n    },\n  })\n  const transactions = data?.transactions || []\n  const categories = data?.categories || []\n  // TODO: implement selectable\n  const selectableCategories = categories.filter((c) => c)\n\n  const loadMoreTransactions = () => {\n    fetchMore({\n      variables: { filters: { offset: transactions.length || -1, limit, ...filters } },\n      updateQuery: (prev: any, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        return Object.assign({}, prev, {\n          transactions: [...prev.transactions, ...fetchMoreResult.transactions],\n        })\n      },\n    })\n  }\n\n  const showForm = (formType: FormType) => {\n    setFormType(formType)\n  }\n  return (\n    <Paper variant=\"outlined\">\n      <div style={{ maxWidth: '100%' }}>\n        <TransactionListAppBar\n          toggleTimeline={() => setShowTimeline(!showTimeline)}\n          showForm={showForm}\n          balance={data?.balance.amount || '?'}\n          categoryChoices={selectableCategories.map((c) => {\n            return { id: c.id, label: c.description }\n          })}\n        />\n        <div\n          style={{\n            height: window.innerHeight - 70,\n            overflow: 'scroll',\n          }}\n        >\n          <Grid container>\n            {showTimeline ? (\n              <Grid item sm={3}>\n                <Timeline />\n              </Grid>\n            ) : null}\n            <Grid item sm={showTimeline ? 9 : 12}>\n              <div style={{ marginBottom: '20px' }}>\n                {formType === 'transaction' ? (\n                  <NewTransactionForm\n                    selectableCategories={selectableCategories || []}\n                    onClose={() => setFormType(null)}\n                  />\n                ) : null}\n                {formType === 'wave' ? <ImportForm onClose={() => setFormType(null)} /> : null}\n              </div>\n              {isTransactionLoading ? (\n                <LinearProgress />\n              ) : (\n                <TransactionRows categories={categories || []} transactions={transactions || []} />\n              )}\n              <Button fullWidth size=\"large\" color=\"secondary\" onClick={loadMoreTransactions}>\n                ({transactions.length}) Click to Load More ...\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    </Paper>\n  )\n}\n","import { Typography, Icon, ListItemIcon, Select, MenuItem } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface IIconSelect {\n  initialValue: string | null\n  onChange: (event, child) => void\n  /*\n  options: Array<{\n    value: number | string\n    label: string\n  }>\n   */\n}\nconst ICON_IDS = [\n  'attach_money',\n  'beach_access',\n  'cake',\n  'compare_arrows',\n  'free_breakfast',\n  'gavel',\n  'home',\n  'local_activity',\n  'local_bar',\n  'local_car_wash',\n  'local_gas_station',\n  'local_grocery_store',\n  'local_hospital',\n  'local_parking',\n  'local_taxi',\n  'motorcycle',\n  'movie',\n  'not_interested',\n  'perm_scan_wifi',\n  'phone_iphone',\n  'power',\n  'help',\n  'restaurant',\n  'rowing',\n  'school',\n  'settings_input_component',\n  'settings_input_hdmi',\n  'shopping_basket',\n  'subway',\n  'theaters',\n  'pets',\n]\nexport const IconSelect: React.FC<IIconSelect> = ({ initialValue, onChange }) => {\n  return (\n    <Select onChange={onChange} value={initialValue}>\n      {ICON_IDS.map((iconId) => (\n        <MenuItem key={iconId} value={iconId}>\n          <ListItemIcon>\n            <Icon color=\"primary\">{iconId}</Icon>\n          </ListItemIcon>\n          <Typography style={{ float: 'right' }}>{iconId}</Typography>\n        </MenuItem>\n      ))}\n    </Select>\n  )\n}\n","import * as React from 'react'\n\nimport {\n  makeStyles,\n  TextField,\n  ListItemSecondaryAction,\n  IconButton,\n  Theme,\n  createStyles,\n  Icon,\n  ListItemIcon,\n  Collapse,\n  List,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core'\nimport { ExpandMore, ExpandLess } from '@material-ui/icons'\nimport { Node } from './selectors'\nimport { IconSelect } from '@src/components/IconSelect'\n\ninterface ITreeProps {\n  node: Node\n  onSaveNode: (number, string) => void\n  onSelectIcon: (id: number, iconId: string) => void\n  level?: number\n}\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    node: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  }),\n)\n\nexport const Tree: React.FC<ITreeProps> = (props) => {\n  const { node, level = 0, onSelectIcon, onSaveNode } = props\n  const classes = useStyles()\n\n  const [open, setOpen] = React.useState(true)\n\n  const handleClick = () => {\n    setOpen(!open)\n  }\n  return (\n    <List component=\"nav\" className={classes.node}>\n      <ListItem button onClick={handleClick} style={{ paddingLeft: `${32 * level}px` }}>\n        <ListItemIcon>\n          <Icon color=\"secondary\">{node.iconId}</Icon>\n        </ListItemIcon>\n        <ListItemText primary={node.name}></ListItemText>\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {node.children.map((child) =>\n            child.children.length ? (\n              <Tree\n                onSelectIcon={onSelectIcon}\n                onSaveNode={onSaveNode}\n                key={child.id}\n                node={child}\n                level={level + 1}\n              />\n            ) : (\n              <NodeListItem\n                onSelectIcon={onSelectIcon}\n                onSaveNode={onSaveNode}\n                key={child.id}\n                node={child}\n                level={level + 1}\n              />\n            ),\n          )}\n        </List>\n      </Collapse>\n    </List>\n  )\n}\n\nconst NodeListItem: React.FC<{\n  node: Node\n  level: number\n  onSaveNode: (number, string) => void\n  onSelectIcon: (id: number, iconId: string) => void\n}> = ({ node, level, onSaveNode, onSelectIcon }) => {\n  const [editable, setEditable] = React.useState(false)\n  const [pickingIcon, setPickingIcon] = React.useState(false)\n  const [nodeName, setNodeName] = React.useState(node.name)\n  const [iconId, setIconId] = React.useState(node.iconId)\n  return (\n    <>\n      <ListItem\n        key={node.id}\n        dense\n        button\n        role={undefined}\n        style={{ paddingLeft: `${32 * (level + 1)}px` }}\n      >\n        {editable ? (\n          <TextField\n            autoFocus={true}\n            value={nodeName}\n            onChange={(event) => setNodeName(event.target.value)}\n            onBlur={() => {\n              setEditable(false)\n              onSaveNode(node.id, nodeName)\n            }}\n          />\n        ) : (\n          <>\n            {pickingIcon ? (\n              <IconSelect\n                onChange={(e, child) => {\n                  onSelectIcon(node.id, e.target.value)\n                  setIconId(e.target.value)\n                  setPickingIcon(false)\n                }}\n                initialValue={iconId}\n              ></IconSelect>\n            ) : (\n              <ListItemText onClick={() => setEditable(true)} primary={nodeName}></ListItemText>\n            )}\n            <ListItemSecondaryAction>\n              <IconButton onClick={() => setPickingIcon(true)} edge=\"end\">\n                <Icon color=\"primary\">{iconId}</Icon>\n              </IconButton>\n            </ListItemSecondaryAction>\n          </>\n        )}\n      </ListItem>\n    </>\n  )\n}\n","import { GetCategories_categories } from 'src/queries/__generated__/GetCategories.hooks'\n\nexport interface Node extends GetCategories_categories {\n  children: Array<Node>\n}\n\n/*\n * Recursive: add a node to a tree. If node has no parent, add to root.\n * Otherwise, add to its parent\n */\nconst addNode = (node: Node, tree, visited: Array<Node>, remaining: Array<Node>) => {\n  // Add to root\n  visited.push(node)\n  const p = visited.find((x) => x.id === node.parent_id)\n\n  if (!node.parent_id) {\n    tree[node.id] = node\n    return\n  } else if (p) {\n    // Find parent who is in visited attach\n    const parentNode = p\n    if (!parentNode.children.find((x) => x.id === node.id)) {\n      parentNode.children.push(node)\n    }\n    return\n  } else {\n    //parent is not visited either\n    const parentNode = remaining.find((v) => v.id === node.parent_id)\n    if (!parentNode) {\n      throw new Error('no parent cat')\n    }\n    if (!parentNode.children.find((x) => x.id === node.id)) {\n      parentNode.children.push(node)\n    }\n    // const parentNode = { ...parentCat, children: [node] }\n    return addNode(parentNode, tree, visited, remaining)\n  }\n}\n\nexport const getCategoryTree = (categories: Array<GetCategories_categories>) => {\n  const tree = {}\n  const visited: Array<Node> = []\n  const remaining = categories.map((c) => {\n    return { ...c, children: [] }\n  })\n\n  while (remaining.length > 0) {\n    // Take node out of remaining\n    const node = remaining.pop()\n    if (!node) throw new Error()\n\n    addNode(node, tree, visited, remaining)\n  }\n\n  return tree\n}\n","import * as React from 'react'\nimport { Tree } from './Tree'\nimport { getCategoryTree } from './selectors'\nimport { useApolloQuery } from '@src/queries/__generated__/GetCategories.hooks'\n\nexport const CategoryPage: React.FC<{}> = (props) => {\n  const { data } = useApolloQuery()\n\n  if (!data) {\n    return <div>loading...</div>\n  }\n  const tree = getCategoryTree(data.categories)\n  const root = {\n    id: 0,\n    name: 'root',\n    iconId: null,\n    parent_id: null,\n    is_selectable: false,\n    is_active: true,\n    __typename: 'Category',\n    description: 'root',\n    children: Object.keys(tree).map((k) => tree[k]),\n  }\n\n  return (\n    <Tree\n      onSaveNode={(id: number, name: string) => console.log(id, name)}\n      onSelectIcon={(id: number, iconId: string) => console.log(id, iconId)}\n      node={root as any}\n    />\n  )\n}\n","import HighchartsData from 'highcharts-data'\nimport HighchartsDrilldown from 'highcharts-drilldown'\nimport * as React from 'react'\nimport Highchart from 'react-highcharts'\nimport u from 'updeep'\nimport { useApolloQuery } from '@src/queries/__generated__/GetProfitAndLossChart.hooks'\nimport { getIsoDateString } from '@src/utils'\n\nHighchartsData(Highchart.Highcharts)\nHighchartsDrilldown(Highchart.Highcharts)\n\nconst getChartConfig = ({ onClickColumn }) => {\n  return {\n    chart: {\n      type: 'column',\n      //height: 800,\n      //width: 800\n    },\n    title: {\n      text: 'Income/Expense Report',\n    },\n    xAxis: {\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Spend',\n        align: 'high',\n      },\n      labels: {\n        overflow: 'justify',\n      },\n    },\n    tooltip: {\n      valueSuffix: ' dollars',\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true,\n        },\n      },\n      column: {\n        dataLabels: {\n          enabled: true,\n        },\n        allowPointSelect: false,\n        events: {\n          click: onClickColumn,\n        },\n      },\n    },\n    legend: {\n      enabled: true,\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      shadow: true,\n    },\n    credits: {\n      enabled: false,\n    },\n  }\n}\nconst today = new Date()\nconst sixMonthsAgo = new Date()\nsixMonthsAgo.setDate(sixMonthsAgo.getDate() - 180)\n// Set to start of the month\nsixMonthsAgo.setDate(1)\n\nexport const PnlChart: React.FC<{}> = (props) => {\n  const { loading, error, data } = useApolloQuery({\n    variables: {\n      startDate: getIsoDateString(sixMonthsAgo),\n      endDate: getIsoDateString(today),\n    },\n  })\n  if (loading) {\n    return <div>loading ...</div>\n  }\n  if (error) return <div>error ...</div>\n\n  const initial = getChartConfig({\n    onClickColumn: (e) => console.log(e),\n  })\n  const titled = u(\n    {\n      title: {\n        text: 'Profit & Loss Report',\n      },\n    },\n    initial,\n  )\n  const config = Object.assign({}, titled, data!.profitAndLossChart)\n  return (\n    <div>\n      <Highchart config={config} />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport {\n  TableBody,\n  TableHead,\n  TableRow,\n  TableContainer,\n  Table,\n  TableCell,\n  IconButton,\n} from '@material-ui/core'\n\nimport { Delete } from '@material-ui/icons'\nimport { useApolloQuery } from '@src/queries/__generated__/GetModelRows.hooks'\nimport { useApolloQuery as useMutation } from '@src/queries/__generated__/DeleteModelInstance.hooks'\n\nconst DeleteButton: React.FC<{ modelId: string; entityId?: number }> = ({ modelId, entityId }) => {\n  if (!entityId) return null\n\n  const [DeleteModelInstance, { loading }] = useMutation({\n    variables: {\n      modelId,\n      entityId,\n    },\n  })\n\n  if (loading) return <div>deleting...</div>\n  return (\n    <IconButton onClick={() => DeleteModelInstance()}>\n      <Delete color=\"secondary\" />\n    </IconButton>\n  )\n}\n\ninterface TableProps {\n  fields: Array<{ name: string; valueType: string }>\n  modelId: string\n}\n\nconst Body = ({ modelId }: { modelId: string }) => {\n  const { data } = useApolloQuery({\n    variables: {\n      modelId: modelId,\n    },\n  })\n  if (data) {\n    return (\n      <>\n        {data.modelRows.map((row, index) => {\n          const entityId = row.attributes.find((attr) => attr.name.toLowerCase() === 'id')?.value\n          return (\n            <TableRow key={index}>\n              <TableCell>\n                <DeleteButton\n                  modelId={modelId}\n                  entityId={entityId ? parseInt(entityId, 10) : undefined}\n                />\n              </TableCell>\n              {row.attributes.map((attrib) => (\n                <TableCell key={attrib.name}>{attrib.value.slice(0, 500)}</TableCell>\n              ))}\n            </TableRow>\n          )\n        })}\n      </>\n    )\n  }\n\n  return null\n}\nexport default ({ fields, modelId }: TableProps) => {\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell key={'actions'}>Actions</TableCell>\n            {fields.map((f) => (\n              <TableCell key={f.name}>{f.name}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <Body modelId={modelId} />\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n","import * as React from 'react'\nimport { Grid } from '@material-ui/core'\nimport { Link, useRouteMatch, Switch, Route } from 'react-router-dom'\nimport Table from './Table'\nimport { useApolloQuery, GetModels_models } from '@src/queries/__generated__/GetModels.hooks'\n\nexport const Admin = () => {\n  return <AdminRoutes />\n}\n\nconst AdminRoutes = () => {\n  const match = useRouteMatch()\n  const { loading, data } = useApolloQuery()\n\n  if (loading) return <div>loading</div>\n  if (data) {\n    return (\n      <div>\n        <ul>\n          {data.models.map((model) => (\n            <li key={model.id}>\n              <Link to={`${match.url}/${model.id}`}>{model.id}</Link>\n            </li>\n          ))}\n        </ul>\n        <Switch>\n          {data.models.map((model) => (\n            <Route key={model.id} exact path={`${match.path}/${model.id}`}>\n              <ModelPage model={model} />\n            </Route>\n          ))}\n        </Switch>\n      </div>\n    )\n  }\n  return <div />\n}\n\ninterface ModelPageProp {\n  model: GetModels_models\n}\n\nconst ModelPage = ({ model }: ModelPageProp) => {\n  return (\n    <div>\n      <Grid container>\n        <Grid item xs={6}>\n          {model.id}:\n          <div>\n            {model.fields.map((f) => (\n              <div key={f.name}>\n                {f.name}: {f.valueType}{' '}\n              </div>\n            ))}\n          </div>\n        </Grid>\n        <Grid item xs={6}>\n          Filter Args:\n          <div>\n            {model.filterArgs.map((f) => (\n              <div key={f.name}>\n                {f.name}: {f.valueType}\n              </div>\n            ))}\n          </div>\n        </Grid>\n      </Grid>\n      <Table fields={model.fields} modelId={model.id} />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { FormControlLabel, Checkbox } from '@material-ui/core'\nimport { ThemeProvider } from '@material-ui/core/styles'\n\nimport jwtDecode from 'jwt-decode'\nimport { useHistory, useLocation, Link, Switch, Route } from 'react-router-dom'\nimport { SnackProvider } from './SnackProvider'\nimport { TransactionList } from '@src/TransactionList'\n\nimport { CategoryPage } from '@src/CategoryPage'\nimport { PnlChart } from '@src/Report/PnlChart'\nimport { Admin } from '@src/App/Admin'\n\nimport { theme, isDarkMode } from '@src/theme'\n\nconst Nav = () => {\n  const location = useLocation()\n  if (location.pathname !== '/') {\n    return null\n  }\n  return (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={isDarkMode}\n            onChange={(e) => {\n              sessionStorage.setItem('colorTheme', e.target.checked ? 'dark' : 'light')\n              window.location.reload()\n            }}\n            name=\"sharedOnly\"\n          />\n        }\n        label=\"Dark Mode\"\n      />\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/TransactionList\">Transaction List</Link>\n          </li>\n          <li>\n            <Link to=\"/ProfitAndLoss\">Profit and Loss Chart</Link>\n          </li>\n          <li>\n            <Link to=\"/LoginPage\">Login</Link>\n          </li>\n          <li>\n            <Link to=\"/CategoryPage\">CategoryPage</Link>\n          </li>\n          <li>\n            <Link to=\"/Admin\">Admin</Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  )\n}\n\nexport const Home = () => {\n  const authToken = sessionStorage.getItem('authToken')\n\n  if (!authToken) {\n    const history = useHistory()\n    history.push('/LoginPage')\n    return null\n  }\n  const decoded: any = jwtDecode(authToken)\n  if ((decoded.exp as number) * 1000 < new Date().getTime()) {\n    return (\n      <div>\n        Token expired! Click here:\n        <Link to=\"/LoginPage\">Login</Link>\n      </div>\n    )\n  }\n  return (\n    <ThemeProvider theme={theme}>\n      <SnackProvider>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/ProfitAndLoss\" component={PnlChart}></Route>\n          <Route exact path=\"/TransactionList\" component={TransactionList}></Route>\n          <Route exact path=\"/CategoryPage\" component={CategoryPage}></Route>\n          <Route path=\"/Admin\" component={Admin}></Route>\n        </Switch>\n      </SnackProvider>\n    </ThemeProvider>\n  )\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport { App } from '@src/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetTransactions, GetTransactionsVariables,\n} from '@src/queries/__generated__/GetTransactions'\nimport GetTransactions__QUERY from '@src/queries/GetTransactions.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetTransactions'\n\nexport const QUERY = GetTransactions__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: QueryHookOptions<GetTransactions, GetTransactionsVariables>,\n) {\n  return useQuery<GetTransactions, GetTransactionsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"IUserTransaction\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"totalAmount\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"issuedDate\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"notes\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"checkpointId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"merchantName\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"balanceAdjust\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdById\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"editable\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"predicatedCategory\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"predicatedSplit\"},\"arguments\":[],\"directives\":[]}]}}],\"loc\":{\"start\":0,\"end\":216}};\n    doc.loc.source = {\"body\":\"fragment FragmentTransaction on IUserTransaction {\\n  id\\n  totalAmount\\n  issuedDate\\n  notes\\n  categoryId\\n  checkpointId\\n  merchantName\\n  balanceAdjust\\n  createdById\\n  editable\\n  predicatedCategory\\n  predicatedSplit\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","/*\nexport enum UrlPathEnum {\n  Root = '',\n  LoginPage = 'LoginPage',\n  TablesPage = 'TablesPage',\n  TransactionList = 'TransactionList',\n  CategoryPage = 'CategoryPage',\n  PnlChart = 'PnlChart',\n}\n*/\nexport enum UrlPathEnum {\n  Root,\n  LoginPage,\n  TablesPage,\n  TransactionList,\n  CategoryPage,\n  PnlChart,\n}\n","import { createBrowserHistory } from 'history'\nimport * as _ from 'lodash'\nimport { UrlPathEnum } from '@src/types'\n\nconst pathMap: { [v: string]: UrlPathEnum } = {\n  '': UrlPathEnum.Root,\n  LoginPage: UrlPathEnum.LoginPage,\n  TablesPage: UrlPathEnum.TablesPage,\n  TransactionList: UrlPathEnum.TransactionList,\n  CategoryPage: UrlPathEnum.CategoryPage,\n  PnlChart: UrlPathEnum.PnlChart,\n}\n\nexport const history = createBrowserHistory()\nexport const pushHistory = (\n  pathname: UrlPathEnum,\n  subpath = '',\n  urlState?: {} | null,\n  state: {} | null = null,\n) => {\n  const searchString =\n    urlState && urlState && Object.keys(urlState).length\n      ? '?urlState=' + JSON.stringify(_.pickBy(urlState, _.identity))\n      : ''\n\n  const pathValue = Object.keys(pathMap).find((k) => pathMap[k] === pathname)\n  if (pathValue === undefined) {\n    throw new Error(`cannot find ${pathname}`)\n  }\n\n  let path: string\n  if (pathValue) {\n    path = ['/' + pathValue, subpath].join('/')\n  } else {\n    path = [pathValue, subpath].join('/')\n  }\n  console.log(`pathname: ${pathname} pathValue: ${pathValue} subpath: ${subpath} path: ${path}`)\n\n  return history.push({\n    pathname: path,\n    search: searchString,\n    state,\n  })\n}\n\nexport const getPathName = (): UrlPathEnum => {\n  const splitPaths = history.location.pathname.split('/').filter((p) => !!p)\n\n  const stripped = splitPaths\n\n  if (stripped.length === 0) {\n    return UrlPathEnum.Root\n  }\n  /*\n  else if (stripped.length !== 1) {\n    throw new Error(`${stripped}: Expected exactly 1 path`)\n  }\n  */\n\n  if (!pathMap[stripped[0]]) {\n    throw new Error(`cannot find ${stripped}`)\n  }\n\n  return pathMap[stripped[0]]\n}\n\nconst isLocal = !!window.location.port\n\nexport const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${\n  isLocal ? '8888' : ''\n}`\n"],"sourceRoot":""}