{"version":3,"sources":["webpack:///./queries/__generated__/UpdateTransaction.hooks.ts","webpack:///./queries/GetEvents.graphql","webpack:///./App/index.tsx","webpack:///./gqlClient.ts","webpack:///./App/LoginPage.tsx","webpack:///./queries/__generated__/ImportWaveTransactions.hooks.ts","webpack:///./queries/ImportWaveTransactions.graphql","webpack:///./queries/__generated__/GetLatestImportDate.hooks.ts","webpack:///./queries/GetLatestImportDate.graphql","webpack:///./queries/GetTransactions.graphql","webpack:///./queries/__generated__/CreateTransaction.hooks.ts","webpack:///./queries/CreateTransaction.graphql","webpack:///./queries/__generated__/AcceptPrediction.hooks.ts","webpack:///./queries/AcceptPrediction.graphql","webpack:///./queries/__generated__/CategorizeTransaction.hooks.ts","webpack:///./queries/CategorizeTransaction.graphql","webpack:///./queries/UpdateTransaction.graphql","webpack:///./queries/__generated__/ArchiveTransaction.hooks.ts","webpack:///./queries/ArchiveTransaction.graphql","webpack:///./queries/__generated__/GetEventLogs.hooks.ts","webpack:///./queries/GetEventLogs.graphql","webpack:///./queries/__generated__/SignCheckpoint.hooks.ts","webpack:///./queries/SignCheckpoint.graphql","webpack:///./queries/__generated__/GetEvents.hooks.ts","webpack:///./queries/__generated__/GetCategories.hooks.ts","webpack:///./queries/GetCategories.graphql","webpack:///./queries/__generated__/GetProfitAndLossChart.hooks.ts","webpack:///./queries/GetProfitAndLossChart.graphql","webpack:///./queries/__generated__/GetModels.hooks.ts","webpack:///./queries/GetModels.graphql","webpack:///./queries/__generated__/GetModelRows.hooks.ts","webpack:///./queries/GetModelRows.graphql","webpack:///./theme.tsx","webpack:///./styles.tsx","webpack:///./TransactionList/ImportForm.tsx","webpack:///./components/DialogSelect.tsx","webpack:///./utils.ts","webpack:///./TransactionList/NewTransactionForm.tsx","webpack:///./App/hooks.ts","webpack:///./TransactionList/FilterDialog.tsx","webpack:///./TransactionList/TransactionListAppBar.tsx","webpack:///./TransactionList/SmartCatField.tsx","webpack:///./components/ResponsiveLabel.tsx","webpack:///./TransactionList/CategoryField.tsx","webpack:///./components/DebouncedTextField.tsx","webpack:///./TransactionList/BalanceAdjustField.tsx","webpack:///./TransactionList/EventLog.tsx","webpack:///./TransactionList/TransactionRow.tsx","webpack:///./Root/Timeline/EventRow.tsx","webpack:///./Root/Timeline/utils.ts","webpack:///./Root/Timeline/index.tsx","webpack:///./TransactionList/index.tsx","webpack:///./components/IconSelect.tsx","webpack:///./CategoryPage/Tree.tsx","webpack:///./CategoryPage/selectors.tsx","webpack:///./CategoryPage/index.tsx","webpack:///./Report/PnlChart.tsx","webpack:///./App/Admin/Table.tsx","webpack:///./App/Admin/index.tsx","webpack:///./App/Home.tsx","webpack:///./index.tsx","webpack:///./queries/__generated__/GetTransactions.hooks.ts","webpack:///./queries/FragmentTransaction.graphql","webpack:///./types/index.ts","webpack:///./history.ts"],"names":["QUERY","UpdateTransaction__QUERY","useApolloQuery","options","useMutation","doc","loc","source","definitionRefs","findOperation","name","i","definitions","length","element","value","forEach","def","refs","Set","collectFragmentReferences","node","kind","add","type","selectionSet","selections","selection","variableDefinitions","module","exports","operationName","newDoc","hasOwnProperty","opRefs","allRefs","newRefs","refName","size","prevRefs","has","childRef","op","push","oneQuery","Routes","exact","path","component","LoginPage","Home","App","hot","client","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","__schema","types","errorLink","onError","response","graphQLErrors","networkError","gqlError","extensions","code","console","error","window","location","href","sessionStorage","removeItem","authLink","setContext","_","headers","token","getItem","authorization","AC","link","concat","HttpLink","uri","BASE_URL","cache","InMemoryCache","React","username","setUsername","password","setPassword","errorMessage","setErrorMessage","submitLogin","fetch","method","body","JSON","stringify","then","json","data","setItem","message","style","height","innerHeight","display","alignItems","justifyContent","flexDirection","label","onChange","e","target","helperText","onKeyPress","charCode","variant","color","onClick","ImportWaveTransactions__QUERY","names","filter","GetLatestImportDate__QUERY","useQuery","CreateTransaction__QUERY","AcceptPrediction__QUERY","CategorizeTransaction__QUERY","ArchiveTransaction__QUERY","GetEventLogs__QUERY","SignCheckpoint__QUERY","GetEvents__QUERY","GetCategories__QUERY","GetProfitAndLossChart__QUERY","GetModels__QUERY","GetModelRows__QUERY","isDarkMode","theme","createMuiTheme","palette","isWide","innerWidth","useStyles","makeStyles","createStyles","appBar","position","header","backgroundColor","info","light","disabled","opacity","cursor","title","marginLeft","spacing","flex","formControl","margin","minWidth","today","Date","toISOString","slice","ImportButton","onClose","startDate","endDate","importWaveTransactions","loading","Button","fullWidth","variables","res","reload","marginTop","ImportForm","props","GetLatestImportDate","initialStartDate","latestImportDate","ImportFormComponent","setStartDate","setEndDate","Grid","container","item","xs","sm","TextField","defaultValue","DialogSelect","choices","onSelectOption","isOpen","setIsOpen","initialOption","option","find","x","Error","getInitialOption","Icon","marginRight","iconId","Dialog","open","DialogTitle","DialogContent","opt","undefined","placeholder","getIsoDateString","d","year","getFullYear","month","getMonth","day","getDate","fieldConfig","issuedDate","required","merchantName","notes","categoryId","balanceAdjust","totalAmount","FieldInput","fieldName","updateField","instance","config","initialForm","getToday","NewTransactionForm","selectableCategories","formData","setFormData","update","filters","offset","limit","createTransaction","isOk","cached","readQuery","query","GET_TRANSACTIONS_QUERY","writeQuery","Object","assign","transactions","transaction","t","old","event","newState","paddingTop","ExpansionPanel","expanded","ExpansionPanelSummary","map","cat","id","description","Divider","ExpansionPanelActions","input","every","Boolean","useHistory","history","useReactRouterHistory","_history","pathname","qs","useLocation","search","useReactRouterLocation","params","querystring","parse","split","FilterDialog","categoryChoices","setOpen","batchId","setBatchId","sharedOnly","setSharedOnly","uncategorizedOnly","setUncategorizedOnly","searchText","setSearchText","setCategoryId","handleClickOpen","handleClose","IconButton","aria-labelledby","DialogContentText","FormControl","InputLabel","Select","parseInt","MenuItem","choice","key","FormControlLabel","control","Checkbox","checked","DialogActions","TransactionListAppBar","AppBar","Toolbar","Tooltip","toggleTimeline","History","balance","Typography","icon","Add","showForm","ListItemIcon","AttachMoney","ListItemText","Waves","className","SmartCatField","predicatedSplit","predicatedCategory","transactionId","openCategoryDialog","category","acceptPrediction","ButtonGroup","aria-label","ResponsiveLabel","ResponsiveLink","children","rest","Link","CategoryField","showDialog","setShowDialog","categoryName","editable","selected","CategoryDialogSelect","initialTextValue","c","classes","categorizeTransaction","textValue","setTextValue","includes","toUpperCase","fullScreen","edge","Close","autoFocus","List","ListItem","button","ListItemSecondaryAction","DebouncedTextField","setter","onBounce","debounced","PrettoSlider","withStyles","root","thumb","width","border","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","BalanceAdjustField","total","setBalanceAdjust","Number","toFixed","percentage","setPercentage","updateTransaction","gutterBottom","newPercentage","newBalanceAdjust","toString","min","max","step","valueLabelDisplay","marks","valueLabelFormat","paddingBottom","newValue","EventLog","entityId","eventLogs","log","eventName","createdTs","changes","change","index","TransactionRowComponent","showDate","onToggleExpansion","setNotes","MUTATION","archiveTransaction","ARCHIVE_TRANSACTION_MUTATION","removed","Card","CardHeader","toLocaleDateString","timeZone","CardContent","float","Collapse","in","unmountOnExit","parseFloat","textAlign","Fab","Delete","areEqual","last","next","TransactionRow","TransactionRows","setExpanded","eventId","categories","is_selectable","EventRow","eventType","checkpoint","eventIcon","batch","origin","plaid","wave","getEventIcon","eventButtonIcon","getEventButtonIcon","signedTs","signedBalance","batch_import","getEventDescription","CheckpointListItem","SIGN_CHECKPOINT_MUTATION","refetchQueries","GET_EVENTS","signCheckpoint","checkpointId","success","main","Timeline","LinearProgress","events","__typename","checkpoints","batches","sort","a","b","TransactionList","showTimeline","setShowTimeline","formType","setFormType","isTransactionLoading","fetchMore","Paper","maxWidth","amount","overflow","marginBottom","updateQuery","prev","fetchMoreResult","ICON_IDS","IconSelect","initialValue","background","paper","Tree","level","onSelectIcon","onSaveNode","paddingLeft","primary","ExpandLess","ExpandMore","timeout","disablePadding","child","NodeListItem","setEditable","pickingIcon","setPickingIcon","nodeName","setNodeName","setIconId","dense","role","onBlur","addNode","tree","visited","remaining","p","parent_id","parentNode","v","CategoryPage","pop","getCategoryTree","is_active","keys","k","HighchartsData","Highchart","Highcharts","HighchartsDrilldown","sixMonthsAgo","setDate","PnlChart","initial","chart","text","xAxis","yAxis","align","labels","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","column","allowPointSelect","click","onClickColumn","legend","layout","verticalAlign","y","floating","borderWidth","shadow","credits","titled","u","profitAndLossChart","Body","modelId","modelRows","row","TableRow","attributes","attrib","TableCell","fields","TableContainer","Table","TableHead","f","TableBody","Admin","AdminRoutes","match","useRouteMatch","models","model","to","url","ModelPage","valueType","filterArgs","Nav","authToken","jwtDecode","exp","getTime","ThemeProvider","ReactDOM","document","getElementById","GetTransactions__QUERY","UrlPathEnum","Root","TablesPage","createBrowserHistory","isLocal","port","protocol","hostname"],"mappings":"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","file":"app.js","sourcesContent":["\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  UpdateTransaction, UpdateTransactionVariables,\n} from '@src/queries/__generated__/UpdateTransaction'\nimport UpdateTransaction__QUERY from '@src/queries/UpdateTransaction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/UpdateTransaction'\n\nexport const QUERY = UpdateTransaction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<UpdateTransaction, UpdateTransactionVariables>,\n) {\n  return useMutation<UpdateTransaction, UpdateTransactionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetEvents\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"checkpoints\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"eventType\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedBalance\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"batches\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"eventType\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"origin\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"userId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":205}};\n    doc.loc.source = {\"body\":\"query GetEvents {\\n  checkpoints {\\n    id\\n    eventType\\n    createdTs\\n    signedTs\\n    signedBalance\\n  }\\n  batches {\\n    id\\n    eventType\\n    createdTs\\n    origin\\n    userId\\n    startDate\\n    endDate\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetEvents\"] = oneQuery(doc, \"GetEvents\");\n        \n","import * as React from 'react'\nimport { hot } from 'react-hot-loader'\nimport { client } from '@src/gqlClient'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport { LoginPage } from '@src/App/LoginPage'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { Home } from './Home'\n\n/*\n * /LoginPage: render nav + login form\n * Otherwise:\n *  render Home:\n *    if !authToken:\n *      redirect to login page\n *    else:\n *      render sub routes\n *\n *\n */\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <div>\n        <Switch>\n          <Route exact path=\"/LoginPage\" component={LoginPage}></Route>\n          <Route path=\"/\" component={Home}></Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  )\n}\nexport const App = hot(module)(() => (\n  <ApolloProvider client={client}>\n    <Routes />\n  </ApolloProvider>\n))\n","import { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\n\nimport { ApolloClient as AC } from 'apollo-client'\nimport { concat } from 'apollo-link'\nimport { onError } from 'apollo-link-error'\nimport { HttpLink } from 'apollo-link-http'\nimport { BASE_URL } from '@src/history'\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData: {\n    __schema: {\n      types: [],\n    },\n  },\n})\n\nexport const errorLink = onError((response) => {\n  const { graphQLErrors, networkError } = response\n  if (graphQLErrors) {\n    graphQLErrors.forEach((gqlError) => {\n      if (gqlError.extensions && gqlError.extensions.code == '401') {\n        console.error('Not Authenticated')\n        window.location.href = '/LoginPage'\n      }\n    })\n  }\n\n  if (networkError) {\n    if (networkError['statusCode'] === 401) {\n      sessionStorage.removeItem('authToken')\n      console.error('Not Authenticated')\n      window.location.href = '/LoginPage'\n    }\n    console.error(`[Network error]: ${networkError}`)\n  }\n})\n\nconst getLink = () => {\n  return concat(authLink, errorLink).concat(\n    new HttpLink({\n      uri: `${BASE_URL}/graphql`,\n      headers: {\n        authorization: `Bearer ${sessionStorage.getItem('authToken')}`,\n      },\n    }),\n  )\n}\nconst authLink = setContext((_, { headers }) => {\n  const token = sessionStorage.getItem('authToken')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  }\n})\n\nexport const client = new AC({\n  link: getLink(),\n  cache: new InMemoryCache({\n    fragmentMatcher,\n  }),\n})\n","import { Button } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport * as React from 'react'\n\nimport { BASE_URL } from '@src/history'\n\nexport const LoginPage = () => {\n  const [username, setUsername] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const [errorMessage, setErrorMessage] = React.useState(null)\n  const submitLogin = () => {\n    fetch(`${BASE_URL}/login`, {\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.code === 200) {\n          sessionStorage.setItem('authToken', data.token)\n          // Redirect to root\n          window.location.href = '/'\n        } else {\n          console.error(data)\n          setErrorMessage(data.message)\n        }\n      })\n  }\n  return (\n    <div\n      style={{\n        height: `${window.innerHeight}px`,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <TextField label=\"Username\" onChange={(e) => setUsername(e.target.value)} />\n      <br />\n      <TextField\n        error={!!errorMessage}\n        helperText={errorMessage || ''}\n        onChange={(e) => setPassword(e.target.value)}\n        type=\"password\"\n        label=\"Password\"\n        onKeyPress={(e) => {\n          if (e.charCode == 13) {\n            submitLogin()\n          }\n        }}\n      />\n      <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={() => submitLogin()}>\n        Login\n      </Button>\n    </div>\n  )\n}\n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  ImportWaveTransactions, ImportWaveTransactionsVariables,\n} from '@src/queries/__generated__/ImportWaveTransactions'\nimport ImportWaveTransactions__QUERY from '@src/queries/ImportWaveTransactions.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/ImportWaveTransactions'\n\nexport const QUERY = ImportWaveTransactions__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<ImportWaveTransactions, ImportWaveTransactionsVariables>,\n) {\n  return useMutation<ImportWaveTransactions, ImportWaveTransactionsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"ImportWaveTransactions\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"importFromWave\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transactions\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":244}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation ImportWaveTransactions($startDate: String!, $endDate: String!) {\\n  importFromWave(startDate: $startDate, endDate: $endDate) {\\n    isOk\\n    transactions {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"ImportWaveTransactions\"] = oneQuery(doc, \"ImportWaveTransactions\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetLatestImportDate, \n} from '@src/queries/__generated__/GetLatestImportDate'\nimport GetLatestImportDate__QUERY from '@src/queries/GetLatestImportDate.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetLatestImportDate'\n\nexport const QUERY = GetLatestImportDate__QUERY\nexport type GetLatestImportDateVariables = {}\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options?: QueryHookOptions<GetLatestImportDate, GetLatestImportDateVariables>,\n) {\n  return useQuery<GetLatestImportDate, GetLatestImportDateVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetLatestImportDate\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"latestImportDate\"},\"arguments\":[],\"directives\":[]}]}}],\"loc\":{\"start\":0,\"end\":49}};\n    doc.loc.source = {\"body\":\"query GetLatestImportDate {\\n  latestImportDate\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetLatestImportDate\"] = oneQuery(doc, \"GetLatestImportDate\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetTransactions\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"TransactionFilters\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"balance\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"amount\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transactions\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parent_id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"iconId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_selectable\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_active\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":306}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nquery GetTransactions($filters: TransactionFilters!) {\\n  balance {\\n    id\\n    amount\\n  }\\n  transactions(filters: $filters) {\\n    ...FragmentTransaction\\n  }\\n  categories {\\n    id\\n    description\\n    name\\n    parent_id\\n    iconId\\n    is_selectable\\n    is_active\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetTransactions\"] = oneQuery(doc, \"GetTransactions\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  CreateTransaction, CreateTransactionVariables,\n} from '@src/queries/__generated__/CreateTransaction'\nimport CreateTransaction__QUERY from '@src/queries/CreateTransaction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/CreateTransaction'\n\nexport const QUERY = CreateTransaction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<CreateTransaction, CreateTransactionVariables>,\n) {\n  return useMutation<CreateTransaction, CreateTransactionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateTransaction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"CreateTransactionInput\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createTransaction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":207}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation CreateTransaction($input: CreateTransactionInput!) {\\n  createTransaction(input: $input) {\\n    isOk\\n    transaction {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"CreateTransaction\"] = oneQuery(doc, \"CreateTransaction\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  AcceptPrediction, AcceptPredictionVariables,\n} from '@src/queries/__generated__/AcceptPrediction'\nimport AcceptPrediction__QUERY from '@src/queries/AcceptPrediction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/AcceptPrediction'\n\nexport const QUERY = AcceptPrediction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<AcceptPrediction, AcceptPredictionVariables>,\n) {\n  return useMutation<AcceptPrediction, AcceptPredictionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"AcceptPrediction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"acceptPrediction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"balance\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"amount\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":219}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation AcceptPrediction($id: Int!) {\\n  acceptPrediction(id: $id) {\\n    isOk\\n    balance {\\n      id\\n      amount\\n    }\\n    transaction {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"AcceptPrediction\"] = oneQuery(doc, \"AcceptPrediction\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  CategorizeTransaction, CategorizeTransactionVariables,\n} from '@src/queries/__generated__/CategorizeTransaction'\nimport CategorizeTransaction__QUERY from '@src/queries/CategorizeTransaction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/CategorizeTransaction'\n\nexport const QUERY = CategorizeTransaction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<CategorizeTransaction, CategorizeTransactionVariables>,\n) {\n  return useMutation<CategorizeTransaction, CategorizeTransactionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"CategorizeTransaction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categorizeTransaction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":231}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation CategorizeTransaction($id: Int!, $categoryId: Int!) {\\n  categorizeTransaction(id: $id, categoryId: $categoryId) {\\n    isOk\\n    transaction {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"CategorizeTransaction\"] = oneQuery(doc, \"CategorizeTransaction\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdateTransaction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UpdateTransactionInput\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateTransaction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"input\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"balance\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"amount\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"transaction\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":249}};\n    doc.loc.source = {\"body\":\"#import './FragmentTransaction.graphql'\\nmutation UpdateTransaction($input: UpdateTransactionInput!) {\\n  updateTransaction(input: $input) {\\n    isOk\\n    balance {\\n      id\\n      amount\\n    }\\n    transaction {\\n      ...FragmentTransaction\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  doc.definitions = doc.definitions.concat(unique(require('./FragmentTransaction.graphql').definitions));\n\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"UpdateTransaction\"] = oneQuery(doc, \"UpdateTransaction\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  ArchiveTransaction, ArchiveTransactionVariables,\n} from '@src/queries/__generated__/ArchiveTransaction'\nimport ArchiveTransaction__QUERY from '@src/queries/ArchiveTransaction.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/ArchiveTransaction'\n\nexport const QUERY = ArchiveTransaction__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<ArchiveTransaction, ArchiveTransactionVariables>,\n) {\n  return useMutation<ArchiveTransaction, ArchiveTransactionVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"ArchiveTransaction\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"archiveTransaction\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":88}};\n    doc.loc.source = {\"body\":\"mutation ArchiveTransaction($id: Int!) {\\n  archiveTransaction(id: $id) {\\n    isOk\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"ArchiveTransaction\"] = oneQuery(doc, \"ArchiveTransaction\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetEventLogs, GetEventLogsVariables,\n} from '@src/queries/__generated__/GetEventLogs'\nimport GetEventLogs__QUERY from '@src/queries/GetEventLogs.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetEventLogs'\n\nexport const QUERY = GetEventLogs__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: QueryHookOptions<GetEventLogs, GetEventLogsVariables>,\n) {\n  return useQuery<GetEventLogs, GetEventLogsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetEventLogs\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"EventLogFilters\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"eventLogs\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"actorId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"eventName\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"entityId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"changes\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":160}};\n    doc.loc.source = {\"body\":\"query GetEventLogs($filters: EventLogFilters!) {\\n  eventLogs(filters: $filters) {\\n    id\\n    actorId\\n    eventName\\n    entityId\\n    createdTs\\n    changes\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetEventLogs\"] = oneQuery(doc, \"GetEventLogs\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  SignCheckpoint, SignCheckpointVariables,\n} from '@src/queries/__generated__/SignCheckpoint'\nimport SignCheckpoint__QUERY from '@src/queries/SignCheckpoint.graphql'\nimport { MutationHookOptions, useMutation } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/SignCheckpoint'\n\nexport const QUERY = SignCheckpoint__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: MutationHookOptions<SignCheckpoint, SignCheckpointVariables>,\n) {\n  return useMutation<SignCheckpoint, SignCheckpointVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"SignCheckpoint\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signCheckpoint\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"isOk\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"checkpoint\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedTs\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedById\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"groupId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signedBalance\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":178}};\n    doc.loc.source = {\"body\":\"mutation SignCheckpoint($id: Int!) {\\n  signCheckpoint(id: $id) {\\n    isOk\\n    checkpoint {\\n      id\\n      signedTs\\n      signedById\\n      groupId\\n      signedBalance\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"SignCheckpoint\"] = oneQuery(doc, \"SignCheckpoint\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetEvents, \n} from '@src/queries/__generated__/GetEvents'\nimport GetEvents__QUERY from '@src/queries/GetEvents.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetEvents'\n\nexport const QUERY = GetEvents__QUERY\nexport type GetEventsVariables = {}\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options?: QueryHookOptions<GetEvents, GetEventsVariables>,\n) {\n  return useQuery<GetEvents, GetEventsVariables>(QUERY, options)\n}\n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetCategories, \n} from '@src/queries/__generated__/GetCategories'\nimport GetCategories__QUERY from '@src/queries/GetCategories.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetCategories'\n\nexport const QUERY = GetCategories__QUERY\nexport type GetCategoriesVariables = {}\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options?: QueryHookOptions<GetCategories, GetCategoriesVariables>,\n) {\n  return useQuery<GetCategories, GetCategoriesVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetCategories\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categories\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"description\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"parent_id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"iconId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_selectable\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"is_active\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":132}};\n    doc.loc.source = {\"body\":\"query GetCategories {\\n  categories {\\n    id\\n    description\\n    name\\n    parent_id\\n    iconId\\n    is_selectable\\n    is_active\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetCategories\"] = oneQuery(doc, \"GetCategories\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetProfitAndLossChart, GetProfitAndLossChartVariables,\n} from '@src/queries/__generated__/GetProfitAndLossChart'\nimport GetProfitAndLossChart__QUERY from '@src/queries/GetProfitAndLossChart.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetProfitAndLossChart'\n\nexport const QUERY = GetProfitAndLossChart__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: QueryHookOptions<GetProfitAndLossChart, GetProfitAndLossChartVariables>,\n) {\n  return useQuery<GetProfitAndLossChart, GetProfitAndLossChartVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetProfitAndLossChart\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"profitAndLossChart\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"startDate\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"endDate\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"series\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"y\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":215}};\n    doc.loc.source = {\"body\":\"query GetProfitAndLossChart($startDate: String!, $endDate: String!) {\\n  profitAndLossChart(startDate: $startDate, endDate: $endDate) {\\n    series {\\n      name\\n      data {\\n        name\\n        y\\n      }\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetProfitAndLossChart\"] = oneQuery(doc, \"GetProfitAndLossChart\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetModels, \n} from '@src/queries/__generated__/GetModels'\nimport GetModels__QUERY from '@src/queries/GetModels.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetModels'\n\nexport const QUERY = GetModels__QUERY\nexport type GetModelsVariables = {}\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options?: QueryHookOptions<GetModels, GetModelsVariables>,\n) {\n  return useQuery<GetModels, GetModelsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetModels\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"models\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"fields\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"valueType\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"filterArgs\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"valueType\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":147}};\n    doc.loc.source = {\"body\":\"query GetModels {\\n  models {\\n    id\\n    name\\n    fields {\\n      name\\n      valueType\\n    }\\n    filterArgs {\\n      name\\n      valueType\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetModels\"] = oneQuery(doc, \"GetModels\");\n        \n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetModelRows, GetModelRowsVariables,\n} from '@src/queries/__generated__/GetModelRows'\nimport GetModelRows__QUERY from '@src/queries/GetModelRows.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetModelRows'\n\nexport const QUERY = GetModelRows__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: QueryHookOptions<GetModelRows, GetModelRowsVariables>,\n) {\n  return useQuery<GetModelRows, GetModelRowsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"GetModelRows\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"modelRows\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"modelId\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"attributes\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"directives\":[]}]}}]}}]}}],\"loc\":{\"start\":0,\"end\":125}};\n    doc.loc.source = {\"body\":\"query GetModelRows($modelId: String!) {\\n  modelRows(modelId: $modelId) {\\n    attributes {\\n      name\\n      value\\n    }\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"GetModelRows\"] = oneQuery(doc, \"GetModelRows\");\n        \n","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const isDarkMode = sessionStorage.getItem('colorTheme') === 'dark'\n\nexport const theme = createMuiTheme({\n  palette: {\n    type: isDarkMode ? 'dark' : 'light',\n  },\n})\n","import { Theme, makeStyles, createStyles } from '@material-ui/core'\n\nexport const isWide = window.innerWidth > 600\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    header: {\n      backgroundColor: theme.palette.info.light,\n    },\n    disabled: {\n      opacity: '0.5',\n      backgroundColor: 'rgba(0, 0, 0, 0.12)',\n      cursor: 'not-allowed',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: '100%',\n    },\n  }),\n)\n","import { Button, Grid, TextField } from '@material-ui/core'\nimport * as React from 'react'\nimport { isWide } from '@src/styles'\nimport { useApolloQuery } from '@src/queries/__generated__/ImportWaveTransactions.hooks'\nimport { useApolloQuery as GetLatestImportDate } from '@src/queries/__generated__/GetLatestImportDate.hooks'\n\nconst today = new Date().toISOString().slice(0, 10)\n\nconst ImportButton: React.FC<{ onClose: () => void; startDate: string; endDate: string }> = ({\n  onClose,\n  startDate,\n  endDate,\n}) => {\n  const [importWaveTransactions, { loading }] = useApolloQuery({})\n\n  return (\n    <Button\n      fullWidth={!isWide}\n      onClick={() =>\n        importWaveTransactions({\n          variables: {\n            startDate,\n            endDate,\n          },\n        }).then((res) => {\n          onClose()\n          window.location.reload()\n        })\n      }\n      style={{ marginTop: '10px' }}\n      color=\"primary\"\n      variant=\"contained\"\n    >\n      {loading ? 'importing ...' : 'Import'}\n    </Button>\n  )\n}\n\nexport const ImportForm = (props: { onClose: () => void }) => {\n  const { data } = GetLatestImportDate({})\n  if (!data) return <div></div>\n\n  return <ImportFormComponent onClose={props.onClose} initialStartDate={data.latestImportDate} />\n}\n\nconst ImportFormComponent = (props: { onClose: () => void; initialStartDate: string }) => {\n  const [startDate, setStartDate] = React.useState(props.initialStartDate)\n  const [endDate, setEndDate] = React.useState(today)\n\n  return (\n    <Grid container>\n      <Grid item xs={12} sm={4}>\n        <TextField\n          fullWidth={!isWide}\n          type=\"date\"\n          label=\"from\"\n          value={startDate}\n          onChange={(e) => setStartDate(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12} sm={4}>\n        <TextField\n          fullWidth={!isWide}\n          type=\"date\"\n          label=\"to\"\n          defaultValue={today}\n          onChange={(e) => setEndDate(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12} sm={4}>\n        <ImportButton onClose={props.onClose} startDate={startDate} endDate={endDate} />\n      </Grid>\n    </Grid>\n  )\n}\n","import { Button, Dialog, DialogContent, DialogTitle, Icon } from '@material-ui/core'\n\nimport * as React from 'react'\n\nimport { Autocomplete } from 'rice-instructor'\n\ninterface DialogSelectProps {\n  choices: Array<{\n    value: string | number\n    iconId?: string\n    label: string\n  }>\n  onSelectOption: (option) => void\n  value: string | null | number\n}\nconst getInitialOption = (\n  value: string | number | null,\n  choices: Array<{\n    value: string | number\n    iconId?: string\n    label: string\n  }>,\n) => {\n  if (!value) return null\n  const option = choices.find((x) => x.value === value)\n  if (!option) {\n    throw new Error(`${value} not found `)\n  }\n\n  return option\n}\nconst isWide = window.innerWidth > 600\nexport const DialogSelect = (props: DialogSelectProps) => {\n  const { choices, value, onSelectOption } = props\n  const [isOpen, setIsOpen] = React.useState(false)\n  const initialOption = getInitialOption(value, choices)\n  return (\n    <div>\n      <Button\n        size={isWide ? 'large' : 'small'}\n        onClick={() => setIsOpen(true)}\n        variant=\"outlined\"\n        color=\"primary\"\n      >\n        {initialOption ? initialOption.label : 'Select a Category'}\n        {initialOption ? <Icon style={{ marginRight: '5px' }}>{initialOption.iconId}</Icon> : null}\n      </Button>\n      <Dialog open={isOpen} fullWidth onClose={() => setIsOpen(false)}>\n        <DialogTitle>Select a Category</DialogTitle>\n        <DialogContent>\n          <Autocomplete\n            onSelectOption={(opt) => {\n              onSelectOption(opt)\n              setIsOpen(false)\n            }}\n            defaultValue={initialOption ? initialOption.value : undefined}\n            placeholder=\"Select a category\"\n            options={choices}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","import querystring from 'querystring'\nexport function stringToDate(dateString: string): Date {\n  const [year, month, day] = dateString.split('-').map((v) => parseInt(v))\n  const ret = new Date(year, month - 1, day)\n  return ret\n}\nexport function formatDate(d: string): string {\n  const date = new Date(d)\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    timeZone: 'UTC',\n  })\n}\n\nexport const getIsoDateString = (d: Date) => {\n  const year = d.getFullYear()\n  const month = d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1\n  const day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport function getToday(): string {\n  const today = new Date()\n  const year = today.getFullYear()\n  const month = today.getMonth() < 9 ? '0' + (today.getMonth() + 1) : today.getMonth() + 1\n  const day = today.getDate() < 10 ? '0' + today.getDate() : today.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport interface Identifiable {\n  id: string | number\n}\nexport const mergeArrays = <T extends Identifiable>(\n  existing: Array<T>,\n  incoming: Array<T>,\n  prependOrAppend: 'prepend' | 'append',\n): Array<T> => {\n  return incoming.reduce(\n    function (accumulator: Array<T>, value: T) {\n      const index = existing.findIndex((x) => x.id === value.id)\n      if (index >= 0) {\n        const ret = [\n          ...accumulator.slice(0, index),\n          value,\n          ...accumulator.slice(index + 1, accumulator.length),\n        ]\n        return ret\n      } else {\n        return prependOrAppend === 'append' ? [...accumulator, value] : [value, ...accumulator]\n      }\n    },\n    [...existing],\n  )\n}\n\nexport function parseSearchString(search: string) {\n  const params = querystring.parse(search.split('?')[1])\n  return params\n}\n","import {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelActions,\n  ExpansionPanelSummary,\n  Grid,\n  TextField,\n} from '@material-ui/core'\nimport * as React from 'react'\nimport {\n  QUERY as GET_TRANSACTIONS_QUERY,\n  GetTransactions,\n  GetTransactions_categories as ICategory,\n} from '@src/queries/__generated__/GetTransactions.hooks'\nimport { DialogSelect } from '@src/components/DialogSelect'\nimport { useApolloQuery } from '@src/queries/__generated__/CreateTransaction.hooks'\nimport { CreateTransactionInput } from '@src/types/__generated__/globalTypes'\n\nimport { getToday } from '@src/utils'\n\ninterface NewTransactionFormProps {\n  onClose: () => void\n  selectableCategories: Array<ICategory>\n}\n\ntype FieldName =\n  | 'issuedDate'\n  | 'merchantName'\n  | 'notes'\n  | 'categoryId'\n  | 'totalAmount'\n  | 'balanceAdjust'\n\nconst fieldConfig = {\n  issuedDate: { type: 'date', required: true },\n  merchantName: { type: 'text', required: true },\n  notes: { type: 'text', required: false },\n  categoryId: { type: 'number', required: false },\n  balanceAdjust: { type: 'number', required: false },\n  totalAmount: { type: 'number', required: true },\n}\n\nconst FieldInput = (props: {\n  fieldName: FieldName\n  updateField: (fieldName) => (event) => void\n  instance: CreateTransactionInput\n}) => {\n  const { fieldName, updateField, instance } = props\n  const config = fieldConfig[fieldName]\n  let error = false\n  if (config.required && !instance[fieldName]) {\n    error = true\n  } else if (config.required && config.type === 'number' && !instance[fieldName]) {\n    error = true\n  }\n\n  return (\n    <TextField\n      type={config.type}\n      required={config.required}\n      error={error}\n      label={fieldName}\n      value={instance[fieldName]}\n      onChange={updateField(fieldName)}\n    />\n  )\n}\nconst initialForm: CreateTransactionInput = {\n  issuedDate: getToday(),\n  merchantName: '',\n  notes: '',\n  categoryId: null,\n  totalAmount: '0',\n  balanceAdjust: '0',\n}\n\nexport const NewTransactionForm: React.FC<NewTransactionFormProps> = (props) => {\n  const { selectableCategories, onClose } = props\n  const [formData, setFormData] = React.useState<CreateTransactionInput>(initialForm)\n  const [createTransaction, { error, loading }] = useApolloQuery({\n    update(cache, { data }) {\n      const variables = {\n        // TODO: send real offset and limit\n        filters: { offset: 0, limit: 40 },\n      }\n      if (data?.createTransaction?.isOk) {\n        const cached = cache.readQuery<GetTransactions>({\n          query: GET_TRANSACTIONS_QUERY,\n          variables,\n        })\n        cache.writeQuery({\n          query: GET_TRANSACTIONS_QUERY,\n          data: Object.assign({}, cached, {\n            transactions: [data.createTransaction.transaction, ...cached!.transactions],\n          }),\n          variables,\n        })\n      }\n    },\n  })\n\n  if (error) {\n    return <div>{error.message}</div>\n  }\n\n  const createNewTransaction = () => {\n    createTransaction({\n      variables: {\n        input: {\n          issuedDate: formData.issuedDate,\n          totalAmount: formData.totalAmount,\n          merchantName: formData.merchantName,\n          balanceAdjust: formData.balanceAdjust || '0',\n          categoryId: formData.categoryId,\n          notes: formData.notes,\n        },\n      },\n    })\n    onClose()\n  }\n  const updateField = (fieldName: FieldName) => {\n    const old = formData\n    return (event) => {\n      const newState = Object.assign({}, old, {\n        [fieldName]: event.target.value,\n      })\n      setFormData(newState)\n    }\n  }\n  const isValid = () => {\n    const t = formData\n    return [t.issuedDate, t.merchantName, +t.totalAmount].every(Boolean)\n  }\n  const transaction = formData\n  return (\n    <div style={{ paddingTop: '10px' }}>\n      <ExpansionPanel expanded={true}>\n        <ExpansionPanelSummary>\n          <Grid container spacing={10}>\n            <Grid item xs={6} sm={4}>\n              <FieldInput instance={transaction} fieldName=\"issuedDate\" updateField={updateField} />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                fieldName=\"merchantName\"\n                instance={transaction}\n                updateField={updateField}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                fieldName=\"totalAmount\"\n                instance={transaction}\n                updateField={updateField}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <DialogSelect\n                value={transaction.categoryId || ''}\n                onSelectOption={(option) => {\n                  const newState = Object.assign({}, formData, {\n                    categoryId: option.value,\n                  })\n                  setFormData(newState)\n                }}\n                choices={selectableCategories.map((cat) => {\n                  return {\n                    value: cat.id,\n                    label: cat.description,\n                    iconId: cat.iconId || '',\n                  }\n                })}\n              />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput fieldName=\"notes\" instance={transaction} updateField={updateField} />\n            </Grid>\n            <Grid item xs={6} sm={4}>\n              <FieldInput\n                fieldName=\"balanceAdjust\"\n                instance={transaction}\n                updateField={updateField}\n              />\n            </Grid>\n          </Grid>\n        </ExpansionPanelSummary>\n        <Divider />\n        <ExpansionPanelActions>\n          <Button\n            size=\"small\"\n            onClick={() => {\n              setFormData(initialForm)\n              onClose()\n            }}\n          >\n            Cancel\n          </Button>\n          <Button size=\"small\" color=\"primary\" onClick={createNewTransaction} disabled={!isValid()}>\n            {loading ? `saving ...` : `Save`}\n          </Button>\n        </ExpansionPanelActions>\n      </ExpansionPanel>\n    </div>\n  )\n}\n","import { parseSearchString } from '@src/utils'\nimport {\n  useLocation as useReactRouterLocation,\n  useHistory as useReactRouterHistory,\n} from 'react-router-dom'\n\ninterface SearchFilters {\n  batchId?: number\n  checkpointId?: number\n  searchText?: string\n  categoryId?: number\n  sharedOnly?: boolean\n  uncategorizedOnly?: boolean\n}\nexport const useHistory = () => {\n  const history = useReactRouterHistory()\n  const push = (pathname: string, filters?: SearchFilters) => {\n    const qs = JSON.stringify(filters)\n    history.push(`${pathname}?filters=${qs}`)\n  }\n  return { _history: history, push }\n}\n\nexport const useLocation = () => {\n  const location = useReactRouterLocation()\n  const params = parseSearchString(location.search)\n  let filters: SearchFilters = {}\n  if (params && params.filters) {\n    filters = JSON.parse(params.filters as string)\n  }\n  return { ...location, filters }\n}\n","import * as React from 'react'\nimport {\n  DialogContentText,\n  DialogTitle,\n  Icon,\n  InputLabel,\n  IconButton,\n  FormControl,\n  MenuItem,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  Select,\n  Dialog,\n  DialogActions,\n  DialogContent,\n} from '@material-ui/core'\nimport { useHistory, useLocation } from '@src/App/hooks'\n\ninterface Prop {\n  categoryChoices: Array<{ id: number; label: string }>\n}\n\nexport const FilterDialog: React.FC<Prop> = ({ categoryChoices }) => {\n  const history = useHistory()\n  const location = useLocation()\n\n  const filters = location.filters\n  const [open, setOpen] = React.useState(false)\n  const [batchId, setBatchId] = React.useState(location.filters.batchId)\n  const [sharedOnly, setSharedOnly] = React.useState(filters.sharedOnly)\n  const [uncategorizedOnly, setUncategorizedOnly] = React.useState(filters.uncategorizedOnly)\n  const [searchText, setSearchText] = React.useState(filters.searchText)\n  const [categoryId, setCategoryId] = React.useState(filters.categoryId)\n\n  const clearFilters = () => {\n    setBatchId(undefined)\n    setSharedOnly(undefined)\n    setUncategorizedOnly(undefined)\n    setSearchText(undefined)\n    setCategoryId(undefined)\n  }\n  const resetFilters = () => {\n    setBatchId(filters.batchId)\n    setSharedOnly(filters.sharedOnly)\n    setSearchText(filters.searchText)\n    setCategoryId(filters.categoryId)\n    setUncategorizedOnly(filters.uncategorizedOnly)\n  }\n\n  const handleClickOpen = () => {\n    resetFilters()\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  if (!open) {\n    return (\n      <IconButton onClick={handleClickOpen}>\n        <Icon color=\"primary\">filter_alt</Icon>\n      </IconButton>\n    )\n  }\n  return (\n    <div>\n      <IconButton onClick={handleClickOpen}>\n        <Icon color=\"primary\">filter_alt</Icon>\n      </IconButton>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Filter Transactions</DialogTitle>\n        {open ? (\n          <DialogContent>\n            <DialogContentText>\n              Search transactions by category, text (merchant name and notes). By checking \"Shared\",\n              you can limit the results to be shared transactions only.\n            </DialogContentText>\n            <FormControl style={{ minWidth: 120 }}>\n              <InputLabel>Category</InputLabel>\n              <Select\n                id=\"categoryId\"\n                value={categoryId || ''}\n                onChange={(e) => setCategoryId(parseInt(e.target.value as string))}\n              >\n                <MenuItem value={''}>None</MenuItem>\n                {categoryChoices.map((choice) => (\n                  <MenuItem key={choice.id} value={choice.id}>\n                    {choice.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <TextField\n              margin=\"dense\"\n              id=\"batchId\"\n              label=\"Event\"\n              type=\"string\"\n              fullWidth\n              value={batchId || ''}\n              onChange={(e) => setBatchId(parseInt(e.target.value, 10))}\n            />\n            <TextField\n              onChange={(e) => setSearchText(e.target.value)}\n              value={searchText || ''}\n              margin=\"dense\"\n              id=\"searchText\"\n              label=\"Text Search\"\n              type=\"text\"\n              fullWidth\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={sharedOnly}\n                  onChange={(e) => setSharedOnly(e.target.checked)}\n                  name=\"sharedOnly\"\n                />\n              }\n              label=\"Shared\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={uncategorizedOnly}\n                  onChange={(e) => setUncategorizedOnly(e.target.checked)}\n                  name=\"uncategorizedOnly\"\n                />\n              }\n              label=\"Uncategorized\"\n            />\n          </DialogContent>\n        ) : null}\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={clearFilters} color=\"primary\">\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              history.push('/TransactionList', {\n                batchId,\n                searchText,\n                sharedOnly,\n                categoryId,\n                uncategorizedOnly,\n              })\n              handleClose()\n            }}\n            color=\"primary\"\n          >\n            Apply\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import {\n  AppBar,\n  Icon,\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Toolbar,\n  Tooltip,\n  Typography,\n} from '@material-ui/core'\nimport { Add, AttachMoney, History, Waves } from '@material-ui/icons'\nimport * as React from 'react'\nimport { IconMenu } from 'rice-instructor'\nimport { FilterDialog } from '@src/TransactionList/FilterDialog'\n\ninterface Prop {\n  balance: string\n  showForm: (formType: string) => void\n  toggleTimeline: () => void\n  categoryChoices: Array<{ id: number; label: string }>\n}\n\nexport const TransactionListAppBar = (props: Prop) => {\n  const { categoryChoices } = props\n  const showNewTransactionForm = () => {\n    props.showForm('transaction')\n  }\n\n  const showWaveImportForm = () => {\n    props.showForm('wave')\n  }\n\n  const toggleTimeline = () => {\n    props.toggleTimeline()\n  }\n\n  return (\n    <AppBar position=\"static\" color=\"transparent\">\n      <Toolbar>\n        <Tooltip title=\"Timeline\">\n          <IconButton onClick={toggleTimeline}>\n            <History />\n          </IconButton>\n        </Tooltip>\n        {props.balance ? (\n          <Typography variant=\"body1\" key=\"balance\">{`Balance: $${props.balance}`}</Typography>\n        ) : null}\n        <div style={{ flex: 1 }} />\n        <FilterDialog categoryChoices={categoryChoices} />\n        <IconMenu icon={<Add />}>\n          <MenuItem key=\"new-transaction-menu\" onClick={showNewTransactionForm}>\n            <ListItemIcon>\n              <AttachMoney />\n            </ListItemIcon>\n            <ListItemText>Transaction</ListItemText>\n          </MenuItem>\n          <MenuItem key=\"new-wave-menu\" onClick={showWaveImportForm}>\n            <ListItemIcon>\n              <Waves color=\"primary\" />\n            </ListItemIcon>\n            <ListItemText>Wave Import</ListItemText>\n          </MenuItem>\n        </IconMenu>\n        <IconButton\n          onClick={() => {\n            sessionStorage.removeItem('authToken')\n            window.location.href = '/'\n          }}\n        >\n          <Icon className=\"material-icons\">exit_to_app</Icon>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import * as React from 'react'\n\nimport { ButtonGroup, Button, Typography } from '@material-ui/core'\nimport { useApolloQuery } from '@src/queries/__generated__/AcceptPrediction.hooks'\nimport { GetTransactions_categories as ICategory } from '@src/queries/__generated__/GetTransactions.hooks'\n\ninterface SmartCatProp {\n  predicatedSplit: boolean | null\n  predicatedCategory: number | null\n  transactionId: number\n  openCategoryDialog: () => void\n\n  selectableCategories: Array<ICategory>\n}\nconst isWide = window.innerWidth > 600\nexport const SmartCatField: React.FC<SmartCatProp> = (props) => {\n  const {\n    predicatedSplit,\n    selectableCategories,\n    predicatedCategory,\n    transactionId,\n    openCategoryDialog,\n  } = props\n\n  const category = selectableCategories.find((x) => x.id === predicatedCategory)\n  if (!category) {\n    throw new Error('cannot find predicated category')\n  }\n\n  const [acceptPrediction, { loading, error }] = useApolloQuery({\n    variables: { id: transactionId },\n  })\n  const split = predicatedSplit ? 'Split ' : ''\n  if (error) return <div>{error.message}</div>\n  if (loading) return <div>saving...</div>\n  return (\n    <div>\n      <Typography variant={isWide ? 'body1' : 'caption'}>{`${split}${category.name}?`}</Typography>\n      <ButtonGroup aria-label=\"outlined primary button group\">\n        <Button size=\"small\" onClick={(e) => acceptPrediction()} variant=\"contained\">\n          YES\n        </Button>\n        <Button\n          size=\"small\"\n          onClick={(e) => openCategoryDialog()}\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          NO\n        </Button>\n      </ButtonGroup>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Link, TypographyProps, Typography } from '@material-ui/core'\n\nconst isWide = window.innerWidth > 600\n\nexport const ResponsiveLabel = (props: TypographyProps) => {\n  return <Typography variant={isWide ? 'body1' : 'caption'} {...props} />\n}\ninterface ResponsiveLinkProps extends TypographyProps {\n  disabled?: boolean\n}\n\nexport const ResponsiveLink = (props: ResponsiveLinkProps) => {\n  const { onClick, children, disabled, ...rest } = props\n  return (\n    <ResponsiveLabel {...rest}>\n      {disabled === true ? (\n        children\n      ) : (\n        <Link color={rest.color} onClick={onClick}>\n          {children}\n        </Link>\n      )}\n    </ResponsiveLabel>\n  )\n}\n","import * as React from 'react'\nimport {\n  AppBar,\n  ListItemSecondaryAction,\n  Icon,\n  TextField,\n  ListItemText,\n  List,\n  ListItem,\n  Toolbar,\n  IconButton,\n  Typography,\n  Button,\n  Dialog,\n  DialogContent,\n} from '@material-ui/core'\nimport { Close } from '@material-ui/icons'\n\nimport { SmartCatField } from './SmartCatField'\nimport { useStyles } from '@src/styles'\nimport { ResponsiveLink } from '@src/components/ResponsiveLabel'\nimport {\n  GetTransactions_categories as ICategory,\n  GetTransactions_transactions as IUserTransaction,\n} from '@src/queries/__generated__/GetTransactions.hooks'\n\nimport { useApolloQuery } from '@src/queries/__generated__/CategorizeTransaction.hooks'\n\ninterface CategoryFieldProp {\n  transaction: IUserTransaction\n  selectableCategories: Array<ICategory>\n}\n\nexport const CategoryField: React.FC<CategoryFieldProp> = ({\n  selectableCategories,\n  transaction,\n}) => {\n  const [showDialog, setShowDialog] = React.useState(false)\n\n  const category = selectableCategories.find((x) => x.id === transaction.categoryId)\n  const categoryName = category ? category.name : '????'\n\n  return (\n    <div>\n      {!transaction.categoryId && transaction.predicatedCategory ? (\n        <SmartCatField\n          openCategoryDialog={() => setShowDialog(true)}\n          predicatedSplit={transaction.predicatedSplit}\n          predicatedCategory={transaction.predicatedCategory}\n          selectableCategories={selectableCategories}\n          transactionId={transaction.id}\n        />\n      ) : (\n        <ResponsiveLink\n          color=\"textPrimary\"\n          disabled={!transaction.editable}\n          onClick={() => setShowDialog(true)}\n        >\n          {categoryName}\n        </ResponsiveLink>\n      )}\n      {showDialog ? (\n        <CategoryDialogSelect\n          transactionId={transaction.id}\n          selectableCategories={selectableCategories}\n          selected={transaction.categoryId}\n          showDialog={showDialog}\n          setShowDialog={setShowDialog}\n        />\n      ) : null}\n    </div>\n  )\n}\n\ninterface CategoryDialogSelectProps {\n  setShowDialog: (boolean) => void\n  showDialog: boolean\n  selected: number | null\n  transactionId: number\n  selectableCategories: Array<ICategory>\n}\nconst CategoryDialogSelect: React.FC<CategoryDialogSelectProps> = ({\n  showDialog,\n  setShowDialog,\n  selected,\n  transactionId,\n  selectableCategories,\n}) => {\n  const initialTextValue = selectableCategories.find((c) => c.id === selected)?.name || ''\n  const classes = useStyles()\n  const [categorizeTransaction, { loading }] = useApolloQuery({})\n  const [textValue, setTextValue] = React.useState<string>(initialTextValue)\n\n  const choices =\n    !textValue.length || textValue === initialTextValue\n      ? selectableCategories\n      : selectableCategories.filter((c) => c.name.includes(textValue.toUpperCase()))\n  return (\n    <Dialog fullScreen={true} onClose={() => setShowDialog(false)} open={showDialog}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            onClick={() => setShowDialog(false)}\n            aria-label=\"close\"\n          >\n            <Close />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Select a Category\n          </Typography>\n          <Button autoFocus color=\"inherit\" onClick={() => setShowDialog(false)}>\n            Cancel\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <DialogContent>\n        {loading ? (\n          <div>loading...</div>\n        ) : (\n          <TextField\n            value={textValue}\n            onChange={(e) => {\n              setTextValue(e.target.value)\n            }}\n            variant=\"outlined\"\n          />\n        )}\n        <List>\n          {choices.map((c) => (\n            <ListItem\n              key={c.id}\n              button\n              selected={c.id === selected}\n              onClick={(e) =>\n                categorizeTransaction({\n                  variables: {\n                    id: transactionId,\n                    categoryId: c.id,\n                  },\n                }).then(() => setShowDialog(false))\n              }\n            >\n              <ListItemText>{c.name}</ListItemText>\n              <ListItemSecondaryAction>\n                <Icon color=\"action\">{c.iconId}</Icon>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import * as React from 'react'\nimport * as _ from 'lodash'\nimport { TextField } from '@material-ui/core'\n\ninterface IDebouncedTextField {\n  helperText?: string\n  onBounce: (newValue) => void\n  setter: (newValue) => void\n  type?: string\n  value?: any\n  loading?: boolean\n  fullWidth?: boolean\n  label?: string\n}\n\nexport const DebouncedTextField: React.FunctionComponent<IDebouncedTextField> = ({\n  helperText,\n  setter,\n  onBounce,\n  label,\n  type,\n  value,\n  loading,\n  fullWidth,\n}) => {\n  const debounced = React.useCallback(_.debounce(onBounce, 1000), [])\n\n  return (\n    <TextField\n      variant=\"outlined\"\n      error={!!loading}\n      fullWidth={fullWidth}\n      label={label}\n      helperText={loading ? 'saving ...' : helperText}\n      type={type}\n      onChange={(event) => {\n        setter(event.target.value)\n        debounced(event.target.value)\n      }}\n      value={value}\n    />\n  )\n}\n","import * as React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Slider from '@material-ui/core/Slider'\nimport { useApolloQuery } from '@src/queries/__generated__/UpdateTransaction.hooks'\nimport { DebouncedTextField } from '@src/components/DebouncedTextField'\n\nconst PrettoSlider = withStyles({\n  root: {\n    color: '#3f51b5',\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider)\n\nconst getPercentage = (balance: number, total: number) => {\n  return Number(((balance / total) * 100).toFixed(2))\n}\n\nexport const BalanceAdjustField = (props: {\n  transactionId\n  total: number\n  balanceAdjust: number\n}) => {\n  const [balanceAdjust, setBalanceAdjust] = React.useState<number>(props.balanceAdjust)\n  const [percentage, setPercentage] = React.useState<number>(\n    getPercentage(balanceAdjust, props.total),\n  )\n  const [updateTransaction, { loading, error }] = useApolloQuery({})\n\n  const handleSliderChange = (event: any, newPercentage: number) => {\n    const newBalanceAdjust = (newPercentage * props.total) / 100\n    setPercentage(newPercentage)\n    setBalanceAdjust(newBalanceAdjust)\n    updateTransaction({\n      variables: {\n        input: {\n          id: props.transactionId,\n          balanceAdjust: newBalanceAdjust.toString(),\n        },\n      },\n    })\n  }\n  if (error) return <div>{error.message}</div>\n\n  return (\n    <div>\n      <Typography color=\"textSecondary\" id=\"input-slider\" gutterBottom>\n        Balance Adjust\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={9}>\n          <PrettoSlider\n            style={{ marginTop: '1.5rem' }}\n            value={typeof percentage === 'number' ? percentage : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n            defaultValue={0}\n            min={-100}\n            max={100}\n            step={null}\n            valueLabelDisplay=\"on\"\n            marks={[\n              { value: -100, label: '-100%' },\n              { value: -50, label: '-50%' },\n              { value: 0, label: '0%' },\n              { value: 50, label: '50%' },\n              { value: 100, label: '100%' },\n            ]}\n            valueLabelFormat={(value: number) => `${value}%`}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          <div style={{ paddingBottom: '2rem' }}>\n            <DebouncedTextField\n              type=\"number\"\n              loading={loading}\n              value={balanceAdjust}\n              setter={(newValue) => {\n                setBalanceAdjust(newValue)\n                setPercentage((Number(newValue) / props.total) * 100)\n              }}\n              onBounce={(newValue) => {\n                updateTransaction({\n                  variables: {\n                    input: { id: props.transactionId, balanceAdjust: newValue as string },\n                  },\n                })\n              }}\n            />\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { Grid } from '@material-ui/core'\nimport { useApolloQuery } from '@src/queries/__generated__/GetEventLogs.hooks'\n\ninterface IEventLogProps {\n  transactionId: number\n}\nexport const EventLog = (props: IEventLogProps) => {\n  const { data } = useApolloQuery({\n    variables: {\n      filters: {\n        offset: 0,\n        limit: 10,\n        entityId: props.transactionId.toString(),\n      },\n    },\n  })\n  if (data) {\n    return (\n      <div>\n        {data.eventLogs.map((log) => (\n          <div key={log.id}>\n            <Grid container spacing={10}>\n              <Grid item xs={3} sm={3}>\n                <div>{log.eventName}</div>\n              </Grid>\n              <Grid item xs={3} sm={3}>\n                <div>{log.createdTs}</div>\n              </Grid>\n              <Grid item xs={6} sm={6}>\n                <div>\n                  {log.changes.map((change, index) => (\n                    <div key={index}>{change}</div>\n                  ))}\n                </div>\n              </Grid>\n            </Grid>\n          </div>\n        ))}\n      </div>\n    )\n  }\n  return <div />\n}\n","import { Card, Collapse, CardHeader, CardContent, Fab, Grid, Typography } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport { useMutation } from '@apollo/react-hooks'\nimport * as _ from 'lodash'\nimport * as React from 'react'\nimport { CategoryField } from './CategoryField'\nimport { BalanceAdjustField } from './BalanceAdjustField'\nimport { useStyles } from '@src/styles'\nimport { ResponsiveLink, ResponsiveLabel } from '@src/components/ResponsiveLabel'\nimport {\n  QUERY as MUTATION,\n  UpdateTransaction,\n  UpdateTransactionVariables,\n} from '@src/queries/__generated__/UpdateTransaction.hooks'\nimport {\n  QUERY as GET_TRANSACTIONS_QUERY,\n  GetTransactions,\n  GetTransactions_categories,\n  GetTransactions_transactions as GetTransactions_transaction,\n} from '@src/queries/__generated__/GetTransactions.hooks'\nimport { DebouncedTextField } from '@src/components/DebouncedTextField'\nimport { formatDate } from '@src/utils'\n\nimport {\n  QUERY as ARCHIVE_TRANSACTION_MUTATION,\n  ArchiveTransaction,\n  ArchiveTransactionVariables,\n} from '@src/queries/__generated__/ArchiveTransaction.hooks'\nimport { EventLog } from './EventLog'\n\ninterface ITransactionRowProps {\n  transaction: GetTransactions_transaction\n  expanded: boolean\n  selectableCategories: Array<GetTransactions_categories>\n  onToggleExpansion: (event) => void\n  showDate: boolean\n}\n\nexport const TransactionRowComponent = (props: ITransactionRowProps) => {\n  const classes = useStyles()\n\n  const { showDate, selectableCategories, transaction, expanded, onToggleExpansion } = props\n  const [notes, setNotes] = React.useState(transaction.notes)\n\n  const [updateTransaction, { loading }] = useMutation<\n    UpdateTransaction,\n    UpdateTransactionVariables\n  >(MUTATION)\n  const [archiveTransaction] = useMutation<ArchiveTransaction, ArchiveTransactionVariables>(\n    ARCHIVE_TRANSACTION_MUTATION,\n    {\n      update(cache, { data }) {\n        const variables = {\n          // TODO: send real offset and limit\n          filters: { offset: 0, limit: 40 },\n        }\n        if (data?.archiveTransaction?.isOk) {\n          const cached = cache.readQuery<GetTransactions>({\n            query: GET_TRANSACTIONS_QUERY,\n            variables,\n          })\n          const removed = [...cached!.transactions]\n          _.remove(removed, (t) => t.id === transaction.id)\n          cache.writeQuery({\n            query: GET_TRANSACTIONS_QUERY,\n            data: Object.assign({}, cached, { transactions: removed }),\n            variables,\n          })\n        }\n      },\n    },\n  )\n\n  return (\n    <div>\n      <Card style={showDate ? { marginTop: '1rem' } : undefined}>\n        {showDate ? (\n          <CardHeader className={classes.header} title={formatDate(transaction.issuedDate)} />\n        ) : null}\n        <CardContent className={!transaction.editable ? classes.disabled : undefined}>\n          <Grid container spacing={10}>\n            <Grid item xs={4} sm={4}>\n              <CategoryField\n                transaction={transaction}\n                selectableCategories={selectableCategories}\n              />\n            </Grid>\n            <Grid item xs={5} sm={4}>\n              <ResponsiveLink\n                color=\"textPrimary\"\n                disabled={!transaction.editable}\n                onClick={onToggleExpansion}\n              >\n                {transaction.merchantName}\n              </ResponsiveLink>\n              <div>\n                <ResponsiveLabel color=\"textSecondary\">{transaction.notes}</ResponsiveLabel>\n              </div>\n            </Grid>\n            <Grid item xs={3} sm={4}>\n              <div style={{ float: 'right' }}>\n                <ResponsiveLabel>{`${transaction.totalAmount}`}</ResponsiveLabel>\n                <Typography\n                  variant=\"subtitle2\"\n                  style={{\n                    color: +transaction.balanceAdjust > 0 ? 'green' : 'red',\n                  }}\n                >\n                  {`${transaction.balanceAdjust}`}\n                </Typography>\n              </div>\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Collapse style={{ margin: '1rem' }} in={expanded} unmountOnExit>\n          <Grid container spacing={1}>\n            <Grid item xs={12} sm={12}>\n              <BalanceAdjustField\n                transactionId={transaction.id}\n                balanceAdjust={Number(transaction.balanceAdjust)}\n                total={parseFloat(transaction.totalAmount)}\n              />\n            </Grid>\n            <Grid item xs={10} sm={11}>\n              <DebouncedTextField\n                fullWidth={true}\n                loading={loading}\n                label=\"Notes\"\n                value={notes}\n                setter={(newValue) => {\n                  setNotes(newValue)\n                }}\n                onBounce={(newValue) =>\n                  updateTransaction({\n                    variables: { input: { id: transaction.id, notes: newValue as string } },\n                  })\n                }\n              />\n            </Grid>\n            <Grid item xs={2} sm={1} style={{ textAlign: 'right' }}>\n              <Fab\n                size=\"medium\"\n                color=\"secondary\"\n                aria-label=\"Delete\"\n                onClick={() =>\n                  archiveTransaction({\n                    variables: {\n                      id: transaction.id,\n                    },\n                  })\n                }\n              >\n                <Delete />\n              </Fab>\n            </Grid>\n            <Grid item xs={12} sm={12}>\n              <EventLog transactionId={transaction.id}></EventLog>\n            </Grid>\n          </Grid>\n        </Collapse>\n      </Card>\n    </div>\n  )\n}\nconst areEqual = (last: ITransactionRowProps, next: ITransactionRowProps) => {\n  if (\n    _.isEqual(last.transaction, next.transaction) &&\n    last.expanded === next.expanded &&\n    last.selectableCategories.length === next.selectableCategories.length\n  ) {\n    return true\n  }\n  return false\n}\nconst TransactionRow = React.memo(TransactionRowComponent, areEqual)\n\n/*\n * This is a wrapper component that is used to control the expansion states of\n * the rows. We do not want a compolicated component to manage the expansion\n * state becaue the rerending will be too expensive.\n */\nexport const TransactionRows: React.FC<{\n  categories: Array<GetTransactions_categories>\n  transactions: Array<GetTransactions_transaction>\n}> = (props) => {\n  const [expanded, setExpanded] = React.useState<number | null>(null)\n  const handleChange = (eventId: number) => (event: React.ChangeEvent<{}>) => {\n    if (eventId === expanded) {\n      return setExpanded(null)\n    }\n    setExpanded(eventId)\n  }\n  return (\n    <>\n      {props.transactions.map((t, index) => {\n        let showDate = false\n        if (index > 0) {\n          const prev = props.transactions[index - 1]\n          showDate = prev.issuedDate !== t.issuedDate\n        } else {\n          // First transaction always show date\n          showDate = true\n        }\n        return (\n          <TransactionRow\n            showDate={showDate}\n            selectableCategories={props.categories.filter((c) => c.is_selectable)}\n            expanded={expanded === t.id}\n            key={t.id}\n            transaction={t}\n            onToggleExpansion={handleChange(t.id)}\n          />\n        )\n      })}\n    </>\n  )\n}\n","import * as React from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport {\n  ListItemSecondaryAction,\n  ButtonGroup,\n  Button,\n  Tooltip,\n  Icon,\n  ListItemIcon,\n  ListItem,\n  ListItemText,\n  Typography,\n} from '@material-ui/core'\nimport { getEventButtonIcon, getEventIcon, getEventDescription } from './utils'\nimport GET_EVENTS from '@src/queries/GetEvents.graphql'\nimport { IEvent, ICheckPoint } from './types'\nimport { theme } from '@src/theme'\nimport {\n  QUERY as SIGN_CHECKPOINT_MUTATION,\n  SignCheckpoint,\n  SignCheckpointVariables,\n} from '@src/queries/__generated__/SignCheckpoint.hooks'\nimport { BASE_URL } from '@src/history'\nimport { useHistory, useLocation } from '@src/App/hooks'\n\nexport const EventRow = (props: { event: IEvent }) => {\n  const location = useLocation()\n  const history = useHistory()\n\n  const { event } = props\n  const disabled = location.filters.batchId === event.id\n  if (event.eventType === 'CHECKPOINT') {\n    return <CheckpointListItem disabled={disabled} checkpoint={event as ICheckPoint} />\n  }\n  const eventIcon = getEventIcon(event)\n  const onFilterBatch = () => {\n    history.push(`/TransactionList`, { batchId: event.id })\n  }\n  const eventButtonIcon = getEventButtonIcon(event)\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilterBatch}>\n      <ListItemIcon>\n        <Tooltip title={event.eventType || ''}>\n          <Icon>{eventIcon}</Icon>\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(event.createdTs).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{getEventDescription(event)}</Typography>\n      </ListItemText>\n      {eventButtonIcon ? (\n        <ListItemSecondaryAction>\n          <Button>\n            <Icon>{eventButtonIcon}</Icon>\n          </Button>\n        </ListItemSecondaryAction>\n      ) : null}\n    </ListItem>\n  )\n}\n\nexport const CheckpointListItem: React.FC<{\n  disabled: boolean\n  checkpoint: ICheckPoint\n}> = ({ checkpoint, disabled }) => {\n  const history = useHistory()\n  const [signCheckpoint, { loading }] = useMutation<SignCheckpoint, SignCheckpointVariables>(\n    SIGN_CHECKPOINT_MUTATION,\n    {\n      refetchQueries: [{ query: GET_EVENTS }],\n    },\n  )\n  const onFilter = () => {\n    history.push('/TransactionList', {\n      checkpointId: checkpoint.id,\n    })\n  }\n  const description = checkpoint.signedTs\n    ? `balance: ${checkpoint.signedBalance}  Signed at ${new Date(\n        checkpoint.signedTs,\n      ).toLocaleDateString()}`\n    : 'Not Signed'\n\n  if (loading) {\n    return <div>Signing ...</div>\n  }\n  return (\n    <ListItem selected={disabled} disabled={disabled} button onClick={onFilter}>\n      <ListItemIcon>\n        <Tooltip title={checkpoint.eventType || ''}>\n          {checkpoint.signedTs ? (\n            <Icon>toll</Icon>\n          ) : (\n            <Icon style={{ color: theme.palette.success.main }}>fiber_new</Icon>\n          )}\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText>\n        <Typography>{`${new Date(checkpoint.createdTs).toLocaleDateString()}`}</Typography>\n        <Typography color=\"textSecondary\">{description}</Typography>\n      </ListItemText>\n      <ListItemSecondaryAction>\n        <ButtonGroup\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          aria-label=\"Small outlined button group\"\n        >\n          {checkpoint.signedTs ? null : (\n            <Button\n              size=\"small\"\n              color=\"secondary\"\n              onClick={() =>\n                signCheckpoint({\n                  variables: {\n                    id: checkpoint.id,\n                  },\n                })\n              }\n            >\n              <Icon>plus_one</Icon>\n            </Button>\n          )}\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            disabled={!sessionStorage.getItem('authToken')}\n            onClick={() => {\n              window.open(\n                `${BASE_URL}/checkpoint/${checkpoint.id}?token=${sessionStorage.getItem(\n                  'authToken',\n                )}`,\n                '_blank',\n              )\n            }}\n          >\n            <Icon>cloud_download</Icon>\n          </Button>\n        </ButtonGroup>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n","import { IBatch, ICheckPoint, IEvent } from './types'\n\nexport const getEventDescription = (e: IEvent) => {\n  if (e.eventType === 'CHECKPOINT') {\n    const checkpoint = e as ICheckPoint\n    return checkpoint.signedTs\n      ? `balance: ${checkpoint.signedBalance}  Signed at ${new Date(\n          checkpoint.signedTs,\n        ).toLocaleDateString()}`\n      : 'Not Signed'\n  }\n  const batch: IBatch = e as IBatch\n  // bank uploads\n  if (batch.origin != 'wave') {\n    return `${batch.origin}: ${batch.startDate} TO ${batch.endDate}`\n  }\n  // Imported from wave or plaid\n  if (e.eventType === 'BATCH_IMPORT') {\n    const batch_import = e as IBatch\n    return `${batch_import.origin}: ${batch_import.startDate.slice(\n      0,\n      10,\n    )} TO ${batch_import.endDate.slice(0, 10)}`\n  }\n\n  throw new Error('not possible')\n}\nexport const getEventIcon = (event: IEvent) => {\n  if (event.eventType === 'CHECKPOINT') {\n    return 'toll'\n  }\n  const batch: IBatch = event as IBatch\n  // bank uploads\n  if (batch.origin != 'wave') {\n    return 'cloud_upload'\n  }\n  if (batch.eventType === 'BATCH_IMPORT') {\n    const batch_import = batch\n    return { plaid: 'grid_on', wave: 'waves' }[batch_import.origin]\n  }\n  throw new Error('not possible')\n}\n\nexport const getEventButtonIcon = (event: IEvent) => {\n  if (event.eventType === 'CHECKPOINT') {\n    return 'plus_one'\n  }\n  return null\n}\n","import { LinearProgress, List } from '@material-ui/core'\nimport * as React from 'react'\nimport { EventRow } from './EventRow'\nimport { useApolloQuery } from '@src/queries/__generated__/GetEvents.hooks'\n\ninterface Prop {}\nexport const Timeline: React.FC<Prop> = () => {\n  const { loading, error, data } = useApolloQuery()\n  if (loading) return <LinearProgress />\n  if (error) return <p>Error :(</p>\n  if (!data) throw new Error('bad')\n  const events = [\n    // Virtual checkpoint\n    {\n      __typename: 'ICheckPoint' as 'ICheckPoint',\n      id: 0,\n      eventType: 'CHECKPOINT',\n      createdTs: new Date(),\n      signedTs: null,\n      signedBalance: null,\n    },\n    ...data.checkpoints,\n    ...data.batches,\n  ]\n  events.sort((a, b) => {\n    // Latest first\n    return Date.parse(b.createdTs) - Date.parse(a.createdTs)\n  })\n  return (\n    <div>\n      <List>\n        {events.map((e, index) => {\n          return e ? <EventRow event={e} key={index} /> : null\n        })}\n      </List>\n    </div>\n  )\n}\n","import { Paper, LinearProgress, Button, Grid } from '@material-ui/core'\nimport * as React from 'react'\nimport { ImportForm } from './ImportForm'\n\nimport { NewTransactionForm } from './NewTransactionForm'\nimport { TransactionListAppBar } from './TransactionListAppBar'\nimport { TransactionRows } from './TransactionRow'\nimport { useLocation } from '@src/App/hooks'\nimport { useApolloQuery } from '@src/queries/__generated__/GetTransactions.hooks'\nimport { Timeline } from '@src/Root/Timeline'\n\ntype FormType = 'transaction' | 'wave'\n\nconst limit = 40\nconst isWide = window.innerWidth > 600\n\nexport const TransactionList = () => {\n  const location = useLocation()\n\n  const [showTimeline, setShowTimeline] = React.useState(isWide)\n  const [formType, setFormType] = React.useState<FormType | null>(null)\n  const filters = location.filters\n\n  const { loading: isTransactionLoading, error, data, fetchMore } = useApolloQuery({\n    variables: {\n      filters: {\n        offset: 0,\n        limit,\n        ...filters,\n      },\n    },\n  })\n  if (error) {\n    return <div>{error.message}</div>\n  }\n\n  const transactions = data?.transactions || []\n  const categories = data?.categories || []\n  // TODO: implement selectable\n  const selectableCategories = categories.filter((c) => c)\n\n  const loadMoreTransactions = () => {\n    fetchMore({\n      variables: { filters: { offset: transactions.length || -1, limit, ...filters } },\n      updateQuery: (prev: any, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        return Object.assign({}, prev, {\n          transactions: [...prev.transactions, ...fetchMoreResult.transactions],\n        })\n      },\n    })\n  }\n\n  const showForm = (formType: FormType) => {\n    setFormType(formType)\n  }\n  return (\n    <Paper variant=\"outlined\">\n      <div style={{ maxWidth: '100%' }}>\n        <TransactionListAppBar\n          toggleTimeline={() => setShowTimeline(!showTimeline)}\n          showForm={showForm}\n          balance={data?.balance.amount || '?'}\n          categoryChoices={selectableCategories.map((c) => {\n            return { id: c.id, label: c.description }\n          })}\n        />\n        <div\n          style={{\n            height: window.innerHeight - 70,\n            overflow: 'scroll',\n          }}\n        >\n          <Grid container>\n            {showTimeline ? (\n              <Grid item sm={3}>\n                <Timeline />\n              </Grid>\n            ) : null}\n            <Grid item sm={showTimeline ? 9 : 12}>\n              <div style={{ marginBottom: '20px' }}>\n                {formType === 'transaction' ? (\n                  <NewTransactionForm\n                    selectableCategories={selectableCategories || []}\n                    onClose={() => setFormType(null)}\n                  />\n                ) : null}\n                {formType === 'wave' ? <ImportForm onClose={() => setFormType(null)} /> : null}\n              </div>\n              {isTransactionLoading ? (\n                <LinearProgress />\n              ) : (\n                <TransactionRows categories={categories || []} transactions={transactions || []} />\n              )}\n              <Button fullWidth size=\"large\" color=\"secondary\" onClick={loadMoreTransactions}>\n                ({transactions.length}) Click to Load More ...\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    </Paper>\n  )\n}\n","import { Typography, Icon, ListItemIcon, Select, MenuItem } from '@material-ui/core'\nimport * as React from 'react'\n\ninterface IIconSelect {\n  initialValue: string | null\n  onChange: (event, child) => void\n  /*\n  options: Array<{\n    value: number | string\n    label: string\n  }>\n   */\n}\nconst ICON_IDS = [\n  'attach_money',\n  'beach_access',\n  'cake',\n  'compare_arrows',\n  'free_breakfast',\n  'gavel',\n  'home',\n  'local_activity',\n  'local_bar',\n  'local_car_wash',\n  'local_gas_station',\n  'local_grocery_store',\n  'local_hospital',\n  'local_parking',\n  'local_taxi',\n  'motorcycle',\n  'movie',\n  'not_interested',\n  'perm_scan_wifi',\n  'phone_iphone',\n  'power',\n  'help',\n  'restaurant',\n  'rowing',\n  'school',\n  'settings_input_component',\n  'settings_input_hdmi',\n  'shopping_basket',\n  'subway',\n  'theaters',\n  'pets',\n]\nexport const IconSelect: React.FC<IIconSelect> = ({ initialValue, onChange }) => {\n  return (\n    <Select onChange={onChange} value={initialValue}>\n      {ICON_IDS.map((iconId) => (\n        <MenuItem key={iconId} value={iconId}>\n          <ListItemIcon>\n            <Icon color=\"primary\">{iconId}</Icon>\n          </ListItemIcon>\n          <Typography style={{ float: 'right' }}>{iconId}</Typography>\n        </MenuItem>\n      ))}\n    </Select>\n  )\n}\n","import * as React from 'react'\n\nimport {\n  makeStyles,\n  TextField,\n  ListItemSecondaryAction,\n  IconButton,\n  Theme,\n  createStyles,\n  Icon,\n  ListItemIcon,\n  Collapse,\n  List,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core'\nimport { ExpandMore, ExpandLess } from '@material-ui/icons'\nimport { Node } from './selectors'\nimport { IconSelect } from '@src/components/IconSelect'\n\ninterface ITreeProps {\n  node: Node\n  onSaveNode: (number, string) => void\n  onSelectIcon: (id: number, iconId: string) => void\n  level?: number\n}\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    node: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  }),\n)\n\nexport const Tree: React.FC<ITreeProps> = (props) => {\n  const { node, level = 0, onSelectIcon, onSaveNode } = props\n  const classes = useStyles()\n\n  const [open, setOpen] = React.useState(true)\n\n  const handleClick = () => {\n    setOpen(!open)\n  }\n  return (\n    <List component=\"nav\" className={classes.node}>\n      <ListItem button onClick={handleClick} style={{ paddingLeft: `${32 * level}px` }}>\n        <ListItemIcon>\n          <Icon color=\"secondary\">{node.iconId}</Icon>\n        </ListItemIcon>\n        <ListItemText primary={node.name}></ListItemText>\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {node.children.map((child) =>\n            child.children.length ? (\n              <Tree\n                onSelectIcon={onSelectIcon}\n                onSaveNode={onSaveNode}\n                key={child.id}\n                node={child}\n                level={level + 1}\n              />\n            ) : (\n              <NodeListItem\n                onSelectIcon={onSelectIcon}\n                onSaveNode={onSaveNode}\n                key={child.id}\n                node={child}\n                level={level + 1}\n              />\n            ),\n          )}\n        </List>\n      </Collapse>\n    </List>\n  )\n}\n\nconst NodeListItem: React.FC<{\n  node: Node\n  level: number\n  onSaveNode: (number, string) => void\n  onSelectIcon: (id: number, iconId: string) => void\n}> = ({ node, level, onSaveNode, onSelectIcon }) => {\n  const [editable, setEditable] = React.useState(false)\n  const [pickingIcon, setPickingIcon] = React.useState(false)\n  const [nodeName, setNodeName] = React.useState(node.name)\n  const [iconId, setIconId] = React.useState(node.iconId)\n  return (\n    <>\n      <ListItem\n        key={node.id}\n        dense\n        button\n        role={undefined}\n        style={{ paddingLeft: `${32 * (level + 1)}px` }}\n      >\n        {editable ? (\n          <TextField\n            autoFocus={true}\n            value={nodeName}\n            onChange={(event) => setNodeName(event.target.value)}\n            onBlur={() => {\n              setEditable(false)\n              onSaveNode(node.id, nodeName)\n            }}\n          />\n        ) : (\n          <>\n            {pickingIcon ? (\n              <IconSelect\n                onChange={(e, child) => {\n                  onSelectIcon(node.id, e.target.value)\n                  setIconId(e.target.value)\n                  setPickingIcon(false)\n                }}\n                initialValue={iconId}\n              ></IconSelect>\n            ) : (\n              <ListItemText onClick={() => setEditable(true)} primary={nodeName}></ListItemText>\n            )}\n            <ListItemSecondaryAction>\n              <IconButton onClick={() => setPickingIcon(true)} edge=\"end\">\n                <Icon color=\"primary\">{iconId}</Icon>\n              </IconButton>\n            </ListItemSecondaryAction>\n          </>\n        )}\n      </ListItem>\n    </>\n  )\n}\n","import { GetCategories_categories } from 'src/queries/__generated__/GetCategories.hooks'\n\nexport interface Node extends GetCategories_categories {\n  children: Array<Node>\n}\n\n/*\n * Recursive: add a node to a tree. If node has no parent, add to root.\n * Otherwise, add to its parent\n */\nconst addNode = (node: Node, tree, visited: Array<Node>, remaining: Array<Node>) => {\n  // Add to root\n  visited.push(node)\n  const p = visited.find((x) => x.id === node.parent_id)\n\n  if (!node.parent_id) {\n    tree[node.id] = node\n    return\n  } else if (p) {\n    // Find parent who is in visited attach\n    const parentNode = p\n    if (!parentNode.children.find((x) => x.id === node.id)) {\n      parentNode.children.push(node)\n    }\n    return\n  } else {\n    //parent is not visited either\n    const parentNode = remaining.find((v) => v.id === node.parent_id)\n    if (!parentNode) {\n      throw new Error('no parent cat')\n    }\n    if (!parentNode.children.find((x) => x.id === node.id)) {\n      parentNode.children.push(node)\n    }\n    // const parentNode = { ...parentCat, children: [node] }\n    return addNode(parentNode, tree, visited, remaining)\n  }\n}\n\nexport const getCategoryTree = (categories: Array<GetCategories_categories>) => {\n  const tree = {}\n  const visited: Array<Node> = []\n  const remaining = categories.map((c) => {\n    return { ...c, children: [] }\n  })\n\n  while (remaining.length > 0) {\n    // Take node out of remaining\n    const node = remaining.pop()\n    if (!node) throw new Error()\n\n    addNode(node, tree, visited, remaining)\n  }\n\n  return tree\n}\n","import * as React from 'react'\nimport { Tree } from './Tree'\nimport { getCategoryTree } from './selectors'\nimport { useApolloQuery } from '@src/queries/__generated__/GetCategories.hooks'\n\nexport const CategoryPage: React.FC<{}> = (props) => {\n  const { data } = useApolloQuery()\n\n  if (!data) {\n    return <div>loading...</div>\n  }\n  const tree = getCategoryTree(data.categories)\n  const root = {\n    id: 0,\n    name: 'root',\n    iconId: null,\n    parent_id: null,\n    is_selectable: false,\n    is_active: true,\n    __typename: 'Category',\n    description: 'root',\n    children: Object.keys(tree).map((k) => tree[k]),\n  }\n\n  return (\n    <Tree\n      onSaveNode={(id: number, name: string) => console.log(id, name)}\n      onSelectIcon={(id: number, iconId: string) => console.log(id, iconId)}\n      node={root as any}\n    />\n  )\n}\n","import HighchartsData from 'highcharts-data'\nimport HighchartsDrilldown from 'highcharts-drilldown'\nimport * as React from 'react'\nimport Highchart from 'react-highcharts'\nimport u from 'updeep'\nimport { useApolloQuery } from '@src/queries/__generated__/GetProfitAndLossChart.hooks'\nimport { getIsoDateString } from '@src/utils'\n\nHighchartsData(Highchart.Highcharts)\nHighchartsDrilldown(Highchart.Highcharts)\n\nconst getChartConfig = ({ onClickColumn }) => {\n  return {\n    chart: {\n      type: 'column',\n      //height: 800,\n      //width: 800\n    },\n    title: {\n      text: 'Income/Expense Report',\n    },\n    xAxis: {\n      type: 'category',\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: 'Spend',\n        align: 'high',\n      },\n      labels: {\n        overflow: 'justify',\n      },\n    },\n    tooltip: {\n      valueSuffix: ' dollars',\n    },\n    plotOptions: {\n      bar: {\n        dataLabels: {\n          enabled: true,\n        },\n      },\n      column: {\n        dataLabels: {\n          enabled: true,\n        },\n        allowPointSelect: false,\n        events: {\n          click: onClickColumn,\n        },\n      },\n    },\n    legend: {\n      enabled: true,\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'top',\n      x: -40,\n      y: 80,\n      floating: true,\n      borderWidth: 1,\n      shadow: true,\n    },\n    credits: {\n      enabled: false,\n    },\n  }\n}\nconst today = new Date()\nconst sixMonthsAgo = new Date()\nsixMonthsAgo.setDate(sixMonthsAgo.getDate() - 180)\n// Set to start of the month\nsixMonthsAgo.setDate(1)\n\nexport const PnlChart: React.FC<{}> = (props) => {\n  const { loading, error, data } = useApolloQuery({\n    variables: {\n      startDate: getIsoDateString(sixMonthsAgo),\n      endDate: getIsoDateString(today),\n    },\n  })\n  if (loading) {\n    return <div>loading ...</div>\n  }\n  if (error) return <div>error ...</div>\n\n  const initial = getChartConfig({\n    onClickColumn: (e) => console.log(e),\n  })\n  const titled = u(\n    {\n      title: {\n        text: 'Profit & Loss Report',\n      },\n    },\n    initial,\n  )\n  const config = Object.assign({}, titled, data!.profitAndLossChart)\n  return (\n    <div>\n      <Highchart config={config} />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { TableBody, TableHead, TableRow, TableContainer, Table, TableCell } from '@material-ui/core'\nimport { useApolloQuery } from '@src/queries/__generated__/GetModelRows.hooks'\n\ninterface TableProps {\n  fields: Array<{ name: string; valueType: string }>\n  modelId: string\n}\n\nconst Body = ({ modelId }: { modelId: string }) => {\n  const { data } = useApolloQuery({\n    variables: {\n      modelId: modelId,\n    },\n  })\n  if (data) {\n    return (\n      <>\n        {data.modelRows.map((row, index) => (\n          <TableRow key={index}>\n            {row.attributes.map((attrib) => (\n              <TableCell key={attrib.name}>{attrib.value}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </>\n    )\n  }\n\n  return null\n}\nexport default ({ fields, modelId }: TableProps) => {\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {fields.map((f) => (\n              <TableCell key={f.name}>{f.name}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <Body modelId={modelId} />\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n","import * as React from 'react'\nimport { Grid } from '@material-ui/core'\nimport { Link, useRouteMatch, Switch, Route } from 'react-router-dom'\nimport { useApolloQuery, GetModels_models } from '@src/queries/__generated__/GetModels.hooks'\nimport Table from './Table'\n\nexport const Admin = () => {\n  return <AdminRoutes />\n}\n\nconst AdminRoutes = () => {\n  const match = useRouteMatch()\n  const { loading, data } = useApolloQuery()\n\n  if (loading) return <div>loading</div>\n  if (data) {\n    return (\n      <div>\n        <ul>\n          {data.models.map((model) => (\n            <li key={model.id}>\n              <Link to={`${match.url}/${model.id}`}>{model.id}</Link>\n            </li>\n          ))}\n        </ul>\n        <Switch>\n          {data.models.map((model) => (\n            <Route key={model.id} exact path={`${match.path}/${model.id}`}>\n              <ModelPage model={model} />\n            </Route>\n          ))}\n        </Switch>\n      </div>\n    )\n  }\n  return <div />\n}\n\ninterface ModelPageProp {\n  model: GetModels_models\n}\n\nconst ModelPage = ({ model }: ModelPageProp) => {\n  return (\n    <div>\n      <Grid container>\n        <Grid item xs={6}>\n          {model.id}:\n          <div>\n            {model.fields.map((f) => (\n              <div key={f.name}>\n                {f.name}: {f.valueType}{' '}\n              </div>\n            ))}\n          </div>\n        </Grid>\n        <Grid item xs={6}>\n          Filter Args:\n          <div>\n            {model.filterArgs.map((f) => (\n              <div key={f.name}>\n                {f.name}: {f.valueType}\n              </div>\n            ))}\n          </div>\n        </Grid>\n      </Grid>\n      <Table fields={model.fields} modelId={model.id} />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { theme, isDarkMode } from '@src/theme'\nimport { FormControlLabel, Checkbox } from '@material-ui/core'\nimport { ThemeProvider } from '@material-ui/core/styles'\n\nimport { TransactionList } from '@src/TransactionList'\nimport jwtDecode from 'jwt-decode'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport { CategoryPage } from '@src/CategoryPage'\nimport { PnlChart } from '@src/Report/PnlChart'\nimport { Admin } from '@src/App/Admin'\nimport { Link, Switch, Route } from 'react-router-dom'\n\nconst Nav = () => {\n  const location = useLocation()\n  if (location.pathname !== '/') {\n    return null\n  }\n  return (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={isDarkMode}\n            onChange={(e) => {\n              sessionStorage.setItem('colorTheme', e.target.checked ? 'dark' : 'light')\n              window.location.reload()\n            }}\n            name=\"sharedOnly\"\n          />\n        }\n        label=\"Dark Mode\"\n      />\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/TransactionList\">Transaction List</Link>\n          </li>\n          <li>\n            <Link to=\"/ProfitAndLoss\">Profit and Loss Chart</Link>\n          </li>\n          <li>\n            <Link to=\"/LoginPage\">Login</Link>\n          </li>\n          <li>\n            <Link to=\"/CategoryPage\">CategoryPage</Link>\n          </li>\n          <li>\n            <Link to=\"/Admin\">Admin</Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  )\n}\n\nexport const Home = () => {\n  console.log('Home')\n  const authToken = sessionStorage.getItem('authToken')\n\n  if (!authToken) {\n    const history = useHistory()\n    history.push('/LoginPage')\n    return null\n  }\n  const decoded: any = jwtDecode(authToken)\n  if ((decoded.exp as number) * 1000 < new Date().getTime()) {\n    return (\n      <div>\n        Token expired! Click here:\n        <Link to=\"/LoginPage\">Login</Link>\n      </div>\n    )\n  }\n  return (\n    <ThemeProvider theme={theme}>\n      <Nav />\n      <Switch>\n        <Route exact path=\"/ProfitAndLoss\" component={PnlChart}></Route>\n        <Route exact path=\"/TransactionList\" component={TransactionList}></Route>\n        <Route exact path=\"/CategoryPage\" component={CategoryPage}></Route>\n        <Route path=\"/Admin\" component={Admin}></Route>\n      </Switch>\n    </ThemeProvider>\n  )\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport { App } from '@src/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","\n/*\n * Generated code! DO NOT EDIT !!!!!\n */\nimport {\n  GetTransactions, GetTransactionsVariables,\n} from '@src/queries/__generated__/GetTransactions'\nimport GetTransactions__QUERY from '@src/queries/GetTransactions.graphql'\nimport { QueryHookOptions, useQuery } from '@apollo/react-hooks'\n\nexport * from '@src/queries/__generated__/GetTransactions'\n\nexport const QUERY = GetTransactions__QUERY\n\n\n/*\n * Used for hooks\n */\n\nexport function useApolloQuery(\n  options: QueryHookOptions<GetTransactions, GetTransactionsVariables>,\n) {\n  return useQuery<GetTransactions, GetTransactionsVariables>(QUERY, options)\n}\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"FragmentTransaction\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"IUserTransaction\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"totalAmount\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"issuedDate\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"notes\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"categoryId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"checkpointId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"merchantName\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"balanceAdjust\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"createdById\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"editable\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"predicatedCategory\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"predicatedSplit\"},\"arguments\":[],\"directives\":[]}]}}],\"loc\":{\"start\":0,\"end\":216}};\n    doc.loc.source = {\"body\":\"fragment FragmentTransaction on IUserTransaction {\\n  id\\n  totalAmount\\n  issuedDate\\n  notes\\n  categoryId\\n  checkpointId\\n  merchantName\\n  balanceAdjust\\n  createdById\\n  editable\\n  predicatedCategory\\n  predicatedSplit\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","/*\nexport enum UrlPathEnum {\n  Root = '',\n  LoginPage = 'LoginPage',\n  TablesPage = 'TablesPage',\n  TransactionList = 'TransactionList',\n  CategoryPage = 'CategoryPage',\n  PnlChart = 'PnlChart',\n}\n*/\nexport enum UrlPathEnum {\n  Root,\n  LoginPage,\n  TablesPage,\n  TransactionList,\n  CategoryPage,\n  PnlChart,\n}\n","import { createBrowserHistory } from 'history'\nimport * as _ from 'lodash'\nimport { UrlPathEnum } from '@src/types'\n\nconst pathMap: { [v: string]: UrlPathEnum } = {\n  '': UrlPathEnum.Root,\n  LoginPage: UrlPathEnum.LoginPage,\n  TablesPage: UrlPathEnum.TablesPage,\n  TransactionList: UrlPathEnum.TransactionList,\n  CategoryPage: UrlPathEnum.CategoryPage,\n  PnlChart: UrlPathEnum.PnlChart,\n}\n\nexport const history = createBrowserHistory()\nexport const pushHistory = (\n  pathname: UrlPathEnum,\n  subpath = '',\n  urlState?: {} | null,\n  state: {} | null = null,\n) => {\n  const searchString =\n    urlState && urlState && Object.keys(urlState).length\n      ? '?urlState=' + JSON.stringify(_.pickBy(urlState, _.identity))\n      : ''\n\n  const pathValue = Object.keys(pathMap).find((k) => pathMap[k] === pathname)\n  if (pathValue === undefined) {\n    throw new Error(`cannot find ${pathname}`)\n  }\n\n  let path: string\n  if (pathValue) {\n    path = ['/' + pathValue, subpath].join('/')\n  } else {\n    path = [pathValue, subpath].join('/')\n  }\n  console.log(`pathname: ${pathname} pathValue: ${pathValue} subpath: ${subpath} path: ${path}`)\n\n  return history.push({\n    pathname: path,\n    search: searchString,\n    state,\n  })\n}\n\nexport const getPathName = (): UrlPathEnum => {\n  const splitPaths = history.location.pathname.split('/').filter((p) => !!p)\n\n  const stripped = splitPaths\n\n  if (stripped.length === 0) {\n    return UrlPathEnum.Root\n  }\n  /*\n  else if (stripped.length !== 1) {\n    throw new Error(`${stripped}: Expected exactly 1 path`)\n  }\n  */\n\n  if (!pathMap[stripped[0]]) {\n    throw new Error(`cannot find ${stripped}`)\n  }\n\n  return pathMap[stripped[0]]\n}\n\nconst isLocal = !!window.location.port\n\nexport const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${\n  isLocal ? '8888' : ''\n}`\n"],"sourceRoot":""}